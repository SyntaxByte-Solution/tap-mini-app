{"version":3,"file":"AuctionHousePdasClient.mjs","sources":["../../../../src/plugins/auctionHouseModule/AuctionHousePdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey } from '@/types';\nimport { Option } from '@/utils';\n\n/**\n * This client allows you to build PDAs related to the Auction House module.\n *\n * @see {@link AuctionHouseClient}\n * @group Module Pdas\n */\nexport class AuctionHousePdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Auction House PDA for a creator and treasury tuple. */\n  auctionHouse(input: {\n    /** The address of the Auction House's creator. */\n    creator: PublicKey;\n    /** The mint address of the Auction House's treasury. */\n    treasuryMint: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.creator.toBuffer(),\n      input.treasuryMint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Auctioneer PDA of an Auction House. */\n  auctioneer(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the Auctioneer authority. */\n    auctioneerAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auctioneer', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.auctioneerAuthority.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the PDA of the Auction House Program\n   * itself used to sign transaction.\n   */\n  programAsSigner(input?: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input?.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      Buffer.from('signer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's fee account. */\n  fee(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('fee_payer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's treasury account. */\n  treasury(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('treasury', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of a buyer's escrow account. */\n  buyerEscrow(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer. */\n    buyer: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.buyer.toBuffer(),\n    ]);\n  }\n\n  /** Finds the trade state PDA of a bid or listing. */\n  tradeState(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer or seller. */\n    wallet: PublicKey;\n    /** The mint address of the Auction House's treasury at the time of trade. */\n    treasuryMint: PublicKey;\n    /** The mint address of the token to trade. */\n    tokenMint: PublicKey;\n    /** The price of the trade in basis points. */\n    price: BigNumber;\n    /** The number of tokens to trade in basis points. */\n    tokenSize: BigNumber;\n    /** The token account from which to trade, unless it is a public bid. */\n    tokenAccount?: Option<PublicKey>;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.wallet.toBuffer(),\n      input.auctionHouse.toBuffer(),\n      ...(input.tokenAccount ? [input.tokenAccount.toBuffer()] : []),\n      input.treasuryMint.toBuffer(),\n      input.tokenMint.toBuffer(),\n      input.price.toArrayLike(Buffer, 'le', 8),\n      input.tokenSize.toArrayLike(Buffer, 'le', 8),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Listing trade state. */\n  listingReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('listing_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Bid trade state. */\n  bidReceipt(input: {\n    /** The trade state PDA of the Bid. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('bid_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Purchase. */\n  purchaseReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    listingTradeState: PublicKey;\n    /** The trade state PDA of the Bid. */\n    bidTradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('purchase_receipt', 'utf8'),\n      input.listingTradeState.toBuffer(),\n      input.bidTradeState.toBuffer(),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getAuctionHouse(programs).address;\n  }\n}\n"],"names":["AuctionHousePdasClient","constructor","metaplex","auctionHouse","input","programId","programs","Pda","find","Buffer","from","creator","toBuffer","treasuryMint","auctioneer","auctioneerAuthority","programAsSigner","fee","treasury","buyerEscrow","buyer","tradeState","wallet","tokenAccount","tokenMint","price","toArrayLike","tokenSize","listingReceipt","bidReceipt","purchaseReceipt","listingTradeState","bidTradeState","getAuctionHouse","address"],"mappings":"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"}