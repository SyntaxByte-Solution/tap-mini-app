import { defineProperty as _defineProperty } from '../_virtual/_rollupPluginBabelHelpers.mjs';
import { MetaplexError } from './MetaplexError.mjs';

/** @group Errors */
class ProgramError extends MetaplexError {
  constructor(message, program, cause, logs) {
    super(message, 'program', `${program.name} [${program.address.toString()}]`, cause);
    _defineProperty(this, "name", 'ProgramError');
    this.program = program;
    this.logs = logs;
    if (logs) {
      this.message = this.message + `\nProgram Logs:\n${logs.map(log => '| ' + log).join('\n')}\n`;
    }
  }
}
/** @group Errors */
class ParsedProgramError extends ProgramError {
  constructor(program, cause, logs) {
    const ofCode = cause.code ? ` of code [${cause.code}]` : '';
    const message = `The program [${program.name}] ` + `at address [${program.address.toString()}] ` + `raised an error${ofCode} ` + `that translates to "${cause.message}".`;
    super(message, program, cause, logs);
    _defineProperty(this, "name", 'ParsedProgramError');
  }
}

/** @group Errors */
class UnknownProgramError extends ProgramError {
  constructor(program, cause) {
    const ofCode = cause.code ? ` of code [${cause.code}]` : '';
    const message = `The program [${program.name}] ` + `at address [${program.address.toString()}] ` + `raised an error${ofCode} ` + `that is not recognized by the programs registered on the SDK. ` + `Please check the underlying program error below for more details.`;
    super(message, program, cause, cause.logs);
    _defineProperty(this, "name", 'UnknownProgramError');
  }
}

export { ParsedProgramError, ProgramError, UnknownProgramError };
//# sourceMappingURL=ProgramError.mjs.map
