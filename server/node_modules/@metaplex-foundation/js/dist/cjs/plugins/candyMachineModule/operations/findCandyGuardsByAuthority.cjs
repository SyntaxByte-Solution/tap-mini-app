'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var GpaBuilder = require('../../../utils/GpaBuilder.cjs');
var CandyGuard = require('../models/CandyGuard.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindCandyGuardsByAuthorityOperation';

/**
 * Find all Candy Guards matching by a given authority.
 *
 * ```ts
 * const candyGuards = await metaplex
 *   .candyMachines()
 *   .findAllCandyGuardsByAuthority({ authority: new PublicKey('...') });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findCandyGuardsByAuthorityOperation = _findCandyGuardsByAuthorityOperation;
// eslint-disable-next-line @typescript-eslint/naming-convention
function _findCandyGuardsByAuthorityOperation(input) {
  return {
    key: Key,
    input
  };
}
_findCandyGuardsByAuthorityOperation.key = Key;

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findCandyGuardsByAuthorityOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      authority
    } = operation.input;
    const {
      programs,
      commitment
    } = scope;
    const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
    const query = mplCandyGuard.CandyGuard.gpaBuilder(candyGuardProgram.address).addFilter('authority', authority);
    const gpaBuilder = new GpaBuilder.GpaBuilder(metaplex, candyGuardProgram.address);
    gpaBuilder.mergeConfig({
      ...query.config,
      commitment
    });
    return gpaBuilder.getAndMap(account => CandyGuard.toCandyGuard(account, metaplex));
  }
};

exports.findCandyGuardsByAuthorityOperation = findCandyGuardsByAuthorityOperation;
exports.findCandyGuardsByAuthorityOperationHandler = findCandyGuardsByAuthorityOperationHandler;
//# sourceMappingURL=findCandyGuardsByAuthority.cjs.map
