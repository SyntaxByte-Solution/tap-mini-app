'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var readApiConnection = require('../../../utils/readApiConnection.cjs');
var Nft = require('../models/Nft.cjs');
var Operation = require('../../../types/Operation.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindNftByAssetIdOperation';

/**
 * Finds an NFT or an SFT by its mint address.
 *
 * ```ts
 * const nft = await metaplex
 *   .nfts()
 *   .findByAssetId({ assetId };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findNftByAssetIdOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findNftByAssetIdOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      assetId
    } = operation.input;

    // Retrieve asset from RPC
    // Massage into the NFT model

    const asset = await metaplex.rpc().getAsset(assetId);
    scope.throwIfCanceled();
    const metadata = readApiConnection.toMetadataFromReadApiAsset(asset);
    const mint = readApiConnection.toMintFromReadApiAsset(asset);
    const nftEdition = readApiConnection.toNftEditionFromReadApiAsset(asset);
    return Nft.toNft(metadata, mint, nftEdition);
  }
};

exports.findNftByAssetIdOperation = findNftByAssetIdOperation;
exports.findNftByAssetIdOperationHandler = findNftByAssetIdOperationHandler;
//# sourceMappingURL=findNftByAssetId.cjs.map
