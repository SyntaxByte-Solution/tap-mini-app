'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'UpdateCandyGuardAuthorityOperation';

/**
 * Updates the authority of a Candy Guard account.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .updateCandyGuardAuthority({
 *     candyGuard: candyGuard.address,
 *     authority: candyGuardAuthority,
 *     newAuthority,
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const updateCandyGuardAuthorityOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const updateCandyGuardAuthorityOperationHandler = {
  async handle(operation, metaplex, scope) {
    return updateCandyGuardAuthorityBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Updates the authority of a Candy Guard account.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .builders()
 *   .updateCandyGuardAuthority({
 *     candyGuard: candyGuard.address,
 *     authority: candyGuardAuthority,
 *     newAuthority,
 *   };
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const updateCandyGuardAuthorityBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    newAuthority,
    authority = metaplex.identity()
  } = params;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Update the candy guard account.
  .add({
    instruction: mplCandyGuard.createSetAuthorityInstruction({
      candyGuard,
      authority: authority.publicKey
    }, {
      newAuthority
    }, candyGuardProgram.address),
    signers: [authority, payer],
    key: params.instructionKey ?? 'updateCandyGuardAuthority'
  });
};

exports.updateCandyGuardAuthorityBuilder = updateCandyGuardAuthorityBuilder;
exports.updateCandyGuardAuthorityOperation = updateCandyGuardAuthorityOperation;
exports.updateCandyGuardAuthorityOperationHandler = updateCandyGuardAuthorityOperationHandler;
//# sourceMappingURL=updateCandyGuardAuthority.cjs.map
