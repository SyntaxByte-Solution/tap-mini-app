{"version":3,"file":"IdentityClient.mjs","sources":["../../../../src/plugins/identityModule/IdentityClient.ts"],"sourcesContent":["import * as ed25519 from '@noble/ed25519';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { IdentityDriver } from './IdentityDriver';\nimport {\n  HasDriver,\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n} from '@/types';\nimport { DriverNotProvidedError } from '@/errors';\n\n/**\n * @group Modules\n */\nexport class IdentityClient\n  implements HasDriver<IdentityDriver>, IdentitySigner\n{\n  private _driver: IdentityDriver | null = null;\n\n  driver(): IdentityDriver {\n    if (!this._driver) {\n      throw new DriverNotProvidedError('IdentityDriver');\n    }\n\n    return this._driver;\n  }\n\n  setDriver(newDriver: IdentityDriver): void {\n    this._driver = newDriver;\n  }\n\n  get publicKey(): PublicKey {\n    return this.driver().publicKey;\n  }\n\n  get secretKey(): Uint8Array | undefined {\n    return this.driver().secretKey;\n  }\n\n  signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return this.driver().signMessage(message);\n  }\n\n  signTransaction(transaction: Transaction): Promise<Transaction> {\n    return this.driver().signTransaction(transaction);\n  }\n\n  signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    return this.driver().signAllTransactions(transactions);\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  hasSecretKey(): this is KeypairSigner {\n    return this.secretKey != null;\n  }\n}\n"],"names":["IdentityClient","driver","_driver","DriverNotProvidedError","setDriver","newDriver","publicKey","secretKey","signMessage","message","signTransaction","transaction","signAllTransactions","transactions","verifyMessage","signature","ed25519","sync","verify","toBytes","equals","that","isSigner","hasSecretKey"],"mappings":";;;;;AAYA;AACA;AACA;AACO,MAAMA,cAAc,CAE3B;AAAA,EAAA,WAAA,GAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,SAAA,EAC2C,IAAI,CAAA,CAAA;AAAA,GAAA;AAE7CC,EAAAA,MAAM,GAAmB;AACvB,IAAA,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE;AACjB,MAAA,MAAM,IAAIC,sBAAsB,CAAC,gBAAgB,CAAC,CAAA;AACpD,KAAA;IAEA,OAAO,IAAI,CAACD,OAAO,CAAA;AACrB,GAAA;EAEAE,SAAS,CAACC,SAAyB,EAAQ;IACzC,IAAI,CAACH,OAAO,GAAGG,SAAS,CAAA;AAC1B,GAAA;AAEA,EAAA,IAAIC,SAAS,GAAc;AACzB,IAAA,OAAO,IAAI,CAACL,MAAM,EAAE,CAACK,SAAS,CAAA;AAChC,GAAA;AAEA,EAAA,IAAIC,SAAS,GAA2B;AACtC,IAAA,OAAO,IAAI,CAACN,MAAM,EAAE,CAACM,SAAS,CAAA;AAChC,GAAA;EAEAC,WAAW,CAACC,OAAmB,EAAuB;IACpD,OAAO,IAAI,CAACR,MAAM,EAAE,CAACO,WAAW,CAACC,OAAO,CAAC,CAAA;AAC3C,GAAA;EAEAC,eAAe,CAACC,WAAwB,EAAwB;IAC9D,OAAO,IAAI,CAACV,MAAM,EAAE,CAACS,eAAe,CAACC,WAAW,CAAC,CAAA;AACnD,GAAA;EAEAC,mBAAmB,CAACC,YAA2B,EAA0B;IACvE,OAAO,IAAI,CAACZ,MAAM,EAAE,CAACW,mBAAmB,CAACC,YAAY,CAAC,CAAA;AACxD,GAAA;AAEAC,EAAAA,aAAa,CAACL,OAAmB,EAAEM,SAAqB,EAAW;AACjE,IAAA,OAAOC,OAAO,CAACC,IAAI,CAACC,MAAM,CAACT,OAAO,EAAEM,SAAS,EAAE,IAAI,CAACT,SAAS,CAACa,OAAO,EAAE,CAAC,CAAA;AAC1E,GAAA;EAEAC,MAAM,CAACC,IAAwB,EAAW;AACxC,IAAA,IAAIC,QAAQ,CAACD,IAAI,CAAC,EAAE;MAClBA,IAAI,GAAGA,IAAI,CAACf,SAAS,CAAA;AACvB,KAAA;AAEA,IAAA,OAAO,IAAI,CAACA,SAAS,CAACc,MAAM,CAACC,IAAI,CAAC,CAAA;AACpC,GAAA;AAEAE,EAAAA,YAAY,GAA0B;AACpC,IAAA,OAAO,IAAI,CAAChB,SAAS,IAAI,IAAI,CAAA;AAC/B,GAAA;AACF;;;;"}