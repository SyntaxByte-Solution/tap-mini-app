{"version":3,"file":"Serializer.mjs","sources":["../../../src/types/Serializer.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Beet } from '@metaplex-foundation/beet';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  FailedToDeserializeDataError,\n  FailedToSerializeDataError,\n  UnexpectedAccountError,\n} from '../errors';\nimport {\n  Account,\n  MaybeAccount,\n  UnparsedAccount,\n  UnparsedMaybeAccount,\n} from './Account';\n\nexport type Serializer<T> = {\n  description: string;\n  serialize: (value: T) => Buffer;\n  deserialize: (buffer: Buffer, offset?: number) => [T, number];\n};\n\nexport const mapSerializer = <T, U>(\n  serializer: Serializer<T>,\n  map: (value: T) => U,\n  unmap: (value: U) => T\n): Serializer<U> => ({\n  description: serializer.description,\n  serialize: (value) => serializer.serialize(unmap(value)),\n  deserialize: (buffer, offset) => {\n    const [value, newOffset] = serializer.deserialize(buffer, offset);\n    return [map(value), newOffset];\n  },\n});\n\nexport const createSerializerFromBeet = <T>(\n  beetArg: Beet<T>\n): Serializer<T> => ({\n  description: beetArg.description,\n  serialize: (value: T) => {\n    const fixedBeet = beet.isFixableBeet(beetArg)\n      ? beetArg.toFixedFromValue(value)\n      : beetArg;\n    const writer = new beet.BeetWriter(fixedBeet.byteSize);\n    writer.write(fixedBeet, value);\n    return writer.buffer;\n  },\n  deserialize: (buffer: Buffer, offset?: number) => {\n    const fixedBeet = beet.isFixableBeet(beetArg)\n      ? beetArg.toFixedFromData(buffer, offset ?? 0)\n      : beetArg;\n    const reader = new beet.BeetReader(buffer, offset ?? 0);\n    const value = reader.read(fixedBeet);\n    return [value, reader.offset];\n  },\n});\n\nexport type SolitaType<T> = {\n  name: string;\n  deserialize: (data: Buffer, offset?: number) => [T, number];\n  fromArgs: (args: T) => {\n    serialize: () => [Buffer, number];\n  };\n};\n\nexport const createSerializerFromSolitaType = <T>(\n  solitaType: SolitaType<T>,\n  description?: string\n): Serializer<T> => ({\n  description: description ?? solitaType.name,\n  serialize: (value: T) => {\n    return solitaType.fromArgs(value).serialize()[0];\n  },\n  deserialize: (buffer: Buffer, offset?: number) => {\n    return solitaType.deserialize(buffer, offset);\n  },\n});\n\nexport const serialize = <T>(\n  value: T,\n  serializer: Pick<Serializer<T>, 'description' | 'serialize'>\n): Buffer => {\n  try {\n    return serializer.serialize(value);\n  } catch (error) {\n    throw new FailedToSerializeDataError(\n      serializer.description,\n      error as Error\n    );\n  }\n};\n\nexport const deserialize = <T>(\n  value: Buffer,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): [T, number] => {\n  try {\n    return serializer.deserialize(value);\n  } catch (error) {\n    throw new FailedToDeserializeDataError(\n      serializer.description,\n      error as Error\n    );\n  }\n};\n\nexport function deserializeAccount<T>(\n  account: UnparsedMaybeAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): MaybeAccount<T>;\nexport function deserializeAccount<T>(\n  account: UnparsedAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): Account<T>;\nexport function deserializeAccount<T>(\n  account: UnparsedAccount | UnparsedMaybeAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): Account<T> | MaybeAccount<T> {\n  if ('exists' in account && !account.exists) {\n    return account;\n  }\n\n  try {\n    const data: T = serializer.deserialize(account.data)[0];\n    return { ...account, data };\n  } catch (error) {\n    throw new UnexpectedAccountError(\n      account.publicKey,\n      serializer.description,\n      error as Error\n    );\n  }\n}\n\nexport const serializeDiscriminator = (discriminator: number[]): Buffer => {\n  const serializer = createSerializerFromBeet(\n    beet.uniformFixedSizeArray(beet.u8, 8)\n  );\n  return serialize(discriminator, serializer);\n};\n"],"names":["mapSerializer","serializer","map","unmap","description","serialize","value","deserialize","buffer","offset","newOffset","createSerializerFromBeet","beetArg","fixedBeet","beet","isFixableBeet","toFixedFromValue","writer","BeetWriter","byteSize","write","toFixedFromData","reader","BeetReader","read","createSerializerFromSolitaType","solitaType","name","fromArgs","error","FailedToSerializeDataError","FailedToDeserializeDataError","deserializeAccount","account","exists","data","UnexpectedAccountError","publicKey","serializeDiscriminator","discriminator","uniformFixedSizeArray","u8"],"mappings":"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"}