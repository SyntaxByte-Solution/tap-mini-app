{"version":3,"file":"cancelBid.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelBid.ts"],"sourcesContent":["import {\n  CancelInstructionAccounts,\n  createAuctioneerCancelInstruction,\n  createCancelBidReceiptInstruction,\n  createCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Bid } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { NftWithToken, SftWithToken } from '@/plugins/nftModule';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation' as const;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelBid({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelBidOperation = useOperation<CancelBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelBidOperation = Operation<\n  typeof Key,\n  CancelBidInput,\n  CancelBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelBidInput = {\n  /**\n   * The Auction House in which to cancel Bid.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to cancel bid.\n   *\n   * This includes, its address, authority address, its fee account address, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'authorityAddress' | 'address' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Bid to cancel.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, buyer address, price, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'buyerAddress'\n    | 'isPublic'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelBidOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelBidOperationHandler: OperationHandler<CancelBidOperation> = {\n  handle: async (\n    operation: CancelBidOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) =>\n    cancelBidBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    ),\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelBidBuilderParams = Omit<CancelBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelBidBuilderContext = Omit<CancelBidOutput, 'response'>;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelBid({ auctionHouse, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelBidBuilder = (\n  metaplex: Metaplex,\n  params: CancelBidBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CancelBidBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, bid } = params;\n\n  // Data.\n  const {\n    asset,\n    buyerAddress,\n    tradeStateAddress,\n    price,\n    receiptAddress,\n    tokens,\n    isPublic,\n  } = bid;\n  const {\n    authorityAddress,\n    address: auctionHouseAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const tokenAccount = isPublic\n    ? metaplex\n        .tokens()\n        .pdas()\n        .associatedTokenAccount({\n          mint: asset.mint.address,\n          owner: toPublicKey(buyerAddress),\n          programs,\n        })\n    : (asset as SftWithToken | NftWithToken).token.address;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Bid Instruction.\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouseAddress,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Cancel Bid.\n      .add({\n        instruction: cancelBidInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelBid',\n      })\n\n      // Cancel Bid Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelBidReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelBidOperation","useOperation","cancelBidOperationHandler","handle","operation","metaplex","scope","cancelBidBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","bid","asset","buyerAddress","tradeStateAddress","price","receiptAddress","tokens","isPublic","authorityAddress","address","auctionHouseAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","tokenAccount","pdas","associatedTokenAccount","mint","owner","toPublicKey","token","accounts","wallet","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","buyerPrice","basisPoints","tokenSize","cancelBidInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","auctioneer","cancelSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelBidReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}