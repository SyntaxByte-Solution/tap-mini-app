import { createDelegateInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { parseTokenMetadataAuthorization } from '../Authorization.mjs';
import { parseTokenMetadataDelegateInput } from '../DelegateInput.mjs';
import { getDefaultDelegateArgs } from '../DelegateType.mjs';
import { isNonFungible } from '../models/Metadata.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

const TOKEN_AUTH_RULES_ID = new PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'ApproveNftDelegateOperation';

/**
 * Approve a new delegate authority for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().delegate({
 *   nftOrSft,
 *   delegate,
 *   delegateArgs
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const approveNftDelegateOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const approveNftDelegateOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return approveNftDelegateBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Approve a new delegate authority for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .delegate({
 *     nftOrSft,
 *     delegate,
 *     delegateArgs
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const approveNftDelegateBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails
  } = params;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);

  // PDAs.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });

  // New Delegate.
  const {
    delegateRecord,
    delegate,
    isTokenDelegate
  } = parseTokenMetadataDelegateInput(metaplex, nftOrSft.address, params.delegate, programs);

  // Auth.
  let tokenMetadataAuthority;
  if ('__kind' in authority) {
    tokenMetadataAuthority = authority;
  } else if ('owner' in params.delegate) {
    tokenMetadataAuthority = {
      __kind: 'holder',
      owner: authority,
      token: metaplex.tokens().pdas().associatedTokenAccount({
        mint: nftOrSft.address,
        owner: authority.publicKey,
        programs
      })
    };
  } else {
    tokenMetadataAuthority = {
      __kind: 'metadata',
      updateAuthority: authority
    };
  }
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: tokenMetadataAuthority,
    authorizationDetails,
    programs
  });
  const delegateArgsWithoutAuthData = params.delegate.data === undefined ? getDefaultDelegateArgs(params.delegate.type) : {
    __kind: params.delegate.type,
    ...params.delegate.data
  };
  return TransactionBuilder.make().setFeePayer(payer)

  // Update the metadata account.
  .add({
    instruction: createDelegateInstruction({
      delegateRecord,
      delegate,
      metadata,
      masterEdition: isNonFungible(nftOrSft) ? masterEdition : undefined,
      tokenRecord: isTokenDelegate ? delegateRecord : undefined,
      mint: nftOrSft.address,
      token: auth.accounts.token,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      delegateArgs: {
        ...delegateArgsWithoutAuthData,
        ...auth.data
      }
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? 'approveNftDelegate'
  });
};

export { approveNftDelegateBuilder, approveNftDelegateOperation, approveNftDelegateOperationHandler };
//# sourceMappingURL=approveNftDelegate.mjs.map
