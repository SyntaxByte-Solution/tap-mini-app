import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityTokenDelegate, TokenMetadataAuthorizationDetails } from '../Authorization';
import { Sft } from '../models';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "UnlockNftOperation";
/**
 * Unlock a programmable NFT.
 *
 * ```ts
 * await metaplex.nfts().unlock({ nftOrSft, authority });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const unlockNftOperation: import("../../../types").OperationConstructor<UnlockNftOperation, "UnlockNftOperation", UnlockNftInput, UnlockNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type UnlockNftOperation = Operation<typeof Key, UnlockNftInput, UnlockNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type UnlockNftInput = {
    /**
     * The NFT or SFT to unlock.
     * We only need its address and token standard.
     *
     * Note that locking and unlocking only works for programmable assets.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to unlock the asset.
     *
     * This must be a token delegate.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority: TokenMetadataAuthorityTokenDelegate;
    /**
     * The authorization rules and data to use for the operation.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
};
/**
 * @group Operations
 * @category Outputs
 */
export type UnlockNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const unlockNftOperationHandler: OperationHandler<UnlockNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type UnlockNftBuilderParams = Omit<UnlockNftInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Unlock a programmable NFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .unlock({ nftOrSft, authority });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const unlockNftBuilder: (metaplex: Metaplex, params: UnlockNftBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
