import { Buffer } from 'buffer';
import { solPaymentBeet } from '@metaplex-foundation/mpl-candy-guard';
import { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';
import { lamports } from '../../../types/Amount.mjs';

/**
 * The solPayment guard is used to charge an
 * amount in SOL for the minted NFT.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 */

/** @internal */
const solPaymentGuardManifest = {
  name: 'solPayment',
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(solPaymentBeet), settings => ({
    ...settings,
    amount: lamports(settings.lamports)
  }), settings => ({
    ...settings,
    lamports: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    settings
  }) => {
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: settings.destination,
        isWritable: true
      }]
    };
  }
};

export { solPaymentGuardManifest };
//# sourceMappingURL=solPayment.mjs.map
