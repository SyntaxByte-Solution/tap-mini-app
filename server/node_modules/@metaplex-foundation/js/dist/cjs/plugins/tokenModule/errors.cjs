'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.cjs');
var MetaplexError = require('../../errors/MetaplexError.cjs');

/** @group Errors */
class TokenError extends MetaplexError.MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Token', cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'TokenError');
  }
}

/** @group Errors */
class MintAuthorityMustBeSignerToMintInitialSupplyError extends TokenError {
  constructor() {
    const message = 'You are trying to create a Mint and a Token account and to send an initial ' + 'supply of token to the newly created Token account. The issue is, you have provided ' + "a Mint Authority as a Public Key which means we don't have the rights to send this transaction. " + 'Please provide the Mint Authority as a Signer when using the "createTokenWithMint" operation ' + ', so we can send the initial supply. Alternative, remove the initial supply from the operation for it to succeed.';
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'MintAuthorityMustBeSignerToMintInitialSupplyError');
  }
}

/** @group Errors */
class TokenAndMintDoNotMatchError extends TokenError {
  constructor(token, tokenMint, mint) {
    const message = `The provided Token and Mint accounts do not match. That is, the mint address [${tokenMint}] ` + `stored in the Token account [${token}] do not match the address of the Mint account [${mint}]. ` + 'Please provide a Token account that belongs to the provided Mint account.';
    super(message);
  }
}

exports.MintAuthorityMustBeSignerToMintInitialSupplyError = MintAuthorityMustBeSignerToMintInitialSupplyError;
exports.TokenAndMintDoNotMatchError = TokenAndMintDoNotMatchError;
exports.TokenError = TokenError;
//# sourceMappingURL=errors.cjs.map
