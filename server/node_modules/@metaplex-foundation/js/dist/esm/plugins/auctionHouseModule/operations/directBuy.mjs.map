{"version":3,"file":"directBuy.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/directBuy.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Bid, Listing, Purchase } from '../models';\nimport { ExecuteSaleBuilderContext } from './executeSale';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DirectBuyOperation' as const;\n\n/**\n * Creates a bid on a given asset and then executes a sale on the created bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .buy({ auctionHouse, listing, buyer };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const directBuyOperation = useOperation<DirectBuyOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DirectBuyOperation = Operation<\n  typeof Key,\n  DirectBuyInput,\n  DirectBuyOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DirectBuyInput = {\n  /** The Auction House in which to create a Bid and execute a Sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auction House authority.\n   * If this is Signer the transaction fee\n   * will be paid from the Auction House Fee Account\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * Creator of a bid.\n   * Should not be the same as seller who creates a Listing\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'price'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n    | 'receiptAddress'\n  >;\n\n  /**\n   * The buyer's price.\n   *\n   * @defaultValue `listing.price`.\n   */\n  price?: SolAmount | SplTokenAmount;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DirectBuyOutput = {\n  /** A model that keeps information about the Bid. */\n  bid: Bid;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const directBuyOperationHandler: OperationHandler<DirectBuyOperation> = {\n  handle: async (\n    operation: DirectBuyOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) => {\n    const builder = await directBuyBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DirectBuyBuilderParams = Omit<DirectBuyInput, 'confirmOptions'> & {\n  createBidInstructionKey?: string;\n  executeSaleInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DirectBuyBuilderContext = Omit<DirectBuyOutput, 'response'>;\n\n/**\n * Creates a bid on a given asset and executes a sale on the created bid and given listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .buy({ auctionHouse, listing, buyer })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const directBuyBuilder = async (\n  metaplex: Metaplex,\n  params: DirectBuyBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<DirectBuyBuilderContext>> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    listing,\n    price = listing.price,\n    buyer = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n    bookkeeper = metaplex.identity(),\n    createBidInstructionKey,\n    executeSaleInstructionKey,\n  } = params;\n\n  const { tokens, asset, sellerAddress, receiptAddress } = listing;\n\n  const printReceipt = (params.printReceipt ?? true) && Boolean(receiptAddress);\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const bidBuilder = await metaplex.auctionHouse().builders().bid(\n    {\n      auctionHouse,\n      auctioneerAuthority,\n      authority,\n      tokens,\n      price,\n      mintAccount: asset.mint.address,\n      seller: sellerAddress,\n      buyer,\n      printReceipt,\n      bookkeeper,\n      instructionKey: createBidInstructionKey,\n    },\n    { programs, payer }\n  );\n  const { receipt, buyerTradeState } = bidBuilder.getContext();\n\n  const bid: Bid = {\n    model: 'bid',\n    lazy: false,\n    auctionHouse,\n    asset,\n    tradeStateAddress: buyerTradeState,\n    bookkeeperAddress: bookkeeper.publicKey,\n    buyerAddress: buyer.publicKey,\n    receiptAddress: receipt,\n    purchaseReceiptAddress: null,\n    price,\n    tokens,\n    canceledAt: null,\n    createdAt: now(),\n    isPublic: false,\n  };\n\n  const saleBuilder: TransactionBuilder<ExecuteSaleBuilderContext> = metaplex\n    .auctionHouse()\n    .builders()\n    .executeSale(\n      {\n        auctionHouse,\n        auctioneerAuthority,\n        bid,\n        listing,\n        printReceipt,\n        bookkeeper,\n        instructionKey: executeSaleInstructionKey,\n      },\n      { programs, payer }\n    );\n\n  const { receipt: purchaseReceiptAddress } = saleBuilder.getContext();\n\n  const buyerTokenAccount = metaplex\n    .tokens()\n    .pdas()\n    .associatedTokenAccount({\n      mint: asset.address,\n      owner: toPublicKey(buyer),\n      programs,\n    });\n  const purchasedAsset = {\n    ...asset,\n    token: {\n      ...asset.token,\n      address: buyerTokenAccount,\n      ownerAddress: toPublicKey(buyer),\n    },\n  };\n\n  const purchase: Purchase = {\n    auctionHouse,\n    model: 'purchase',\n    lazy: false,\n    buyerAddress: toPublicKey(buyer),\n    sellerAddress,\n    asset: purchasedAsset,\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    receiptAddress: purchaseReceiptAddress,\n    price: listing.price,\n    tokens,\n    createdAt: now(),\n  };\n\n  return TransactionBuilder.make<DirectBuyBuilderContext>()\n    .setContext({\n      bid,\n      purchase,\n    })\n    .add(bidBuilder)\n    .add(saleBuilder);\n};\n"],"names":["Key","directBuyOperation","useOperation","directBuyOperationHandler","handle","operation","metaplex","scope","builder","directBuyBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","listing","price","buyer","identity","authority","authorityAddress","bookkeeper","createBidInstructionKey","executeSaleInstructionKey","tokens","asset","sellerAddress","receiptAddress","printReceipt","Boolean","hasAuctioneer","AuctioneerAuthorityRequiredError","bidBuilder","builders","bid","mintAccount","mint","address","seller","instructionKey","receipt","buyerTradeState","getContext","model","lazy","tradeStateAddress","bookkeeperAddress","publicKey","buyerAddress","purchaseReceiptAddress","canceledAt","createdAt","now","isPublic","saleBuilder","executeSale","buyerTokenAccount","pdas","associatedTokenAccount","owner","toPublicKey","purchasedAsset","token","ownerAddress","purchase","TransactionBuilder","make","setContext","add"],"mappings":"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"}