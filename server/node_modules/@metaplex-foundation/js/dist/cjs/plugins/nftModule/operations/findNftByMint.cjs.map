{"version":3,"file":"findNftByMint.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByMint.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  toMint,\n  toMintAccount,\n  toToken,\n  toTokenAccount,\n} from '../../tokenModule';\nimport {\n  parseOriginalOrPrintEditionAccount,\n  toMetadataAccount,\n} from '../accounts';\nimport {\n  JsonMetadata,\n  Nft,\n  NftWithToken,\n  Sft,\n  SftWithToken,\n  toMetadata,\n  toNft,\n  toNftEdition,\n  toNftWithToken,\n  toSft,\n  toSftWithToken,\n} from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMintOperation' as const;\n\n/**\n * Finds an NFT or an SFT by its mint address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByMint({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftByMintOperation = useOperation<FindNftByMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByMintOperation = Operation<\n  typeof Key,\n  FindNftByMintInput,\n  FindNftByMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByMintInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The explicit token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that address is valid, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenOwner` parameter to fetch the\n   * associated token account.\n   *\n   * @defaultValue Defaults to not fetching the token account.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The associated token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that account exists, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenAddress` parameter to fetch the\n   * token account at an explicit address.\n   *\n   * @defaultValue Defaults to not fetching the associated token account.\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByMintOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByMintOperationHandler: OperationHandler<FindNftByMintOperation> =\n  {\n    handle: async (\n      operation: FindNftByMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftByMintOutput> => {\n      const { programs, commitment } = scope;\n      const {\n        mintAddress,\n        tokenAddress,\n        tokenOwner,\n        loadJsonMetadata = true,\n      } = operation.input;\n\n      const associatedTokenAddress = tokenOwner\n        ? metaplex.tokens().pdas().associatedTokenAccount({\n            mint: mintAddress,\n            owner: tokenOwner,\n            programs,\n          })\n        : undefined;\n      const nftPdas = metaplex.nfts().pdas();\n      const accountAddresses = [\n        mintAddress,\n        nftPdas.metadata({ mint: mintAddress, programs }),\n        nftPdas.masterEdition({ mint: mintAddress, programs }),\n        tokenAddress ?? associatedTokenAddress,\n      ].filter((address): address is PublicKey => !!address);\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(accountAddresses, commitment);\n      scope.throwIfCanceled();\n\n      const mint = toMint(toMintAccount(accounts[0]));\n      let metadata = toMetadata(toMetadataAccount(accounts[1]));\n      const editionAccount = parseOriginalOrPrintEditionAccount(accounts[2]);\n      const token = accounts[3] ? toToken(toTokenAccount(accounts[3])) : null;\n\n      if (loadJsonMetadata) {\n        try {\n          const json = await metaplex\n            .storage()\n            .downloadJson<JsonMetadata>(metadata.uri, scope);\n          metadata = { ...metadata, jsonLoaded: true, json };\n        } catch (error) {\n          metadata = { ...metadata, jsonLoaded: true, json: null };\n        }\n      }\n\n      const isNft =\n        editionAccount.exists &&\n        mint.mintAuthorityAddress &&\n        mint.mintAuthorityAddress.equals(editionAccount.publicKey);\n\n      if (isNft) {\n        const edition = toNftEdition(editionAccount);\n        return token\n          ? toNftWithToken(metadata, mint, edition, token)\n          : toNft(metadata, mint, edition);\n      }\n\n      return token\n        ? toSftWithToken(metadata, mint, token)\n        : toSft(metadata, mint);\n    },\n  };\n"],"names":["Key","findNftByMintOperation","useOperation","findNftByMintOperationHandler","handle","operation","metaplex","scope","programs","commitment","mintAddress","tokenAddress","tokenOwner","loadJsonMetadata","input","associatedTokenAddress","tokens","pdas","associatedTokenAccount","mint","owner","undefined","nftPdas","nfts","accountAddresses","metadata","masterEdition","filter","address","accounts","rpc","getMultipleAccounts","throwIfCanceled","toMint","toMintAccount","toMetadata","toMetadataAccount","editionAccount","parseOriginalOrPrintEditionAccount","token","toToken","toTokenAccount","json","storage","downloadJson","uri","jsonLoaded","error","isNft","exists","mintAuthorityAddress","equals","publicKey","edition","toNftEdition","toNftWithToken","toNft","toSftWithToken","toSft"],"mappings":";;;;;;;;;;;;;;AAgCA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAiC,CAAA;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,sBAAsB,GAAGC,sBAAY,CAAyBF,GAAG,EAAC;;AAE/E;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;AACO,MAAMG,6BAAuE,GAClF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAiC,EACjCC,QAAkB,EAClBC,KAAqB,KACY;IACjC,MAAM;MAAEC,QAAQ;AAAEC,MAAAA,UAAAA;AAAW,KAAC,GAAGF,KAAK,CAAA;IACtC,MAAM;MACJG,WAAW;MACXC,YAAY;MACZC,UAAU;AACVC,MAAAA,gBAAgB,GAAG,IAAA;KACpB,GAAGR,SAAS,CAACS,KAAK,CAAA;AAEnB,IAAA,MAAMC,sBAAsB,GAAGH,UAAU,GACrCN,QAAQ,CAACU,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;AAC9CC,MAAAA,IAAI,EAAET,WAAW;AACjBU,MAAAA,KAAK,EAAER,UAAU;AACjBJ,MAAAA,QAAAA;KACD,CAAC,GACFa,SAAS,CAAA;IACb,MAAMC,OAAO,GAAGhB,QAAQ,CAACiB,IAAI,EAAE,CAACN,IAAI,EAAE,CAAA;IACtC,MAAMO,gBAAgB,GAAG,CACvBd,WAAW,EACXY,OAAO,CAACG,QAAQ,CAAC;AAAEN,MAAAA,IAAI,EAAET,WAAW;AAAEF,MAAAA,QAAAA;AAAS,KAAC,CAAC,EACjDc,OAAO,CAACI,aAAa,CAAC;AAAEP,MAAAA,IAAI,EAAET,WAAW;AAAEF,MAAAA,QAAAA;AAAS,KAAC,CAAC,EACtDG,YAAY,IAAII,sBAAsB,CACvC,CAACY,MAAM,CAAEC,OAAO,IAA2B,CAAC,CAACA,OAAO,CAAC,CAAA;AAEtD,IAAA,MAAMC,UAAQ,GAAG,MAAMvB,QAAQ,CAC5BwB,GAAG,EAAE,CACLC,mBAAmB,CAACP,gBAAgB,EAAEf,UAAU,CAAC,CAAA;IACpDF,KAAK,CAACyB,eAAe,EAAE,CAAA;IAEvB,MAAMb,IAAI,GAAGc,WAAM,CAACC,sBAAa,CAACL,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IAC/C,IAAIJ,QAAQ,GAAGU,mBAAU,CAACC,4BAAiB,CAACP,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;IACzD,MAAMQ,cAAc,GAAGC,6CAAkC,CAACT,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AACtE,IAAA,MAAMU,KAAK,GAAGV,UAAQ,CAAC,CAAC,CAAC,GAAGW,aAAO,CAACC,uBAAc,CAACZ,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;AAEvE,IAAA,IAAIhB,gBAAgB,EAAE;MACpB,IAAI;AACF,QAAA,MAAM6B,IAAI,GAAG,MAAMpC,QAAQ,CACxBqC,OAAO,EAAE,CACTC,YAAY,CAAenB,QAAQ,CAACoB,GAAG,EAAEtC,KAAK,CAAC,CAAA;AAClDkB,QAAAA,QAAQ,GAAG;AAAE,UAAA,GAAGA,QAAQ;AAAEqB,UAAAA,UAAU,EAAE,IAAI;AAAEJ,UAAAA,IAAAA;SAAM,CAAA;OACnD,CAAC,OAAOK,KAAK,EAAE;AACdtB,QAAAA,QAAQ,GAAG;AAAE,UAAA,GAAGA,QAAQ;AAAEqB,UAAAA,UAAU,EAAE,IAAI;AAAEJ,UAAAA,IAAI,EAAE,IAAA;SAAM,CAAA;AAC1D,OAAA;AACF,KAAA;AAEA,IAAA,MAAMM,KAAK,GACTX,cAAc,CAACY,MAAM,IACrB9B,IAAI,CAAC+B,oBAAoB,IACzB/B,IAAI,CAAC+B,oBAAoB,CAACC,MAAM,CAACd,cAAc,CAACe,SAAS,CAAC,CAAA;AAE5D,IAAA,IAAIJ,KAAK,EAAE;AACT,MAAA,MAAMK,OAAO,GAAGC,uBAAY,CAACjB,cAAc,CAAC,CAAA;MAC5C,OAAOE,KAAK,GACRgB,kBAAc,CAAC9B,QAAQ,EAAEN,IAAI,EAAEkC,OAAO,EAAEd,KAAK,CAAC,GAC9CiB,SAAK,CAAC/B,QAAQ,EAAEN,IAAI,EAAEkC,OAAO,CAAC,CAAA;AACpC,KAAA;AAEA,IAAA,OAAOd,KAAK,GACRkB,kBAAc,CAAChC,QAAQ,EAAEN,IAAI,EAAEoB,KAAK,CAAC,GACrCmB,SAAK,CAACjC,QAAQ,EAAEN,IAAI,CAAC,CAAA;AAC3B,GAAA;AACF;;;;;"}