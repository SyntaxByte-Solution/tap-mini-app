import type { default as NodeIrys, WebIrys } from '@irys/sdk';
import { Connection, PublicKey, SendOptions, Signer as Web3Signer, Transaction, TransactionSignature } from '@solana/web3.js';
import { MetaplexFile, StorageDriver } from '../storageModule';
import { Metaplex } from '../../Metaplex';
import { Amount, IdentitySigner, KeypairSigner, Signer } from '../../types';
export type IrysOptions = {
    address?: string;
    timeout?: number;
    providerUrl?: string;
    priceMultiplier?: number;
    identity?: Signer;
};
export type IrysWalletAdapter = {
    publicKey: PublicKey | null;
    signMessage?: (message: Uint8Array) => Promise<Uint8Array>;
    signTransaction?: (transaction: Transaction) => Promise<Transaction>;
    signAllTransactions?: (transactions: Transaction[]) => Promise<Transaction[]>;
    sendTransaction: (transaction: Transaction, connection: Connection, options?: SendOptions & {
        signers?: Web3Signer[];
    }) => Promise<TransactionSignature>;
};
export declare class IrysStorageDriver implements StorageDriver {
    protected _metaplex: Metaplex;
    protected _irys: WebIrys | NodeIrys | null;
    protected _options: IrysOptions;
    constructor(metaplex: Metaplex, options?: IrysOptions);
    getUploadPrice(bytes: number): Promise<Amount>;
    getUploadPriceForFiles(files: MetaplexFile[]): Promise<Amount>;
    upload(file: MetaplexFile): Promise<string>;
    uploadAll(files: MetaplexFile[]): Promise<string[]>;
    getBalance(): Promise<Amount>;
    fund(amount: Amount, skipBalanceCheck?: boolean): Promise<void>;
    withdrawAll(): Promise<void>;
    withdraw(amount: Amount): Promise<void>;
    irys(): Promise<WebIrys | NodeIrys>;
    initIrys(): Promise<WebIrys | NodeIrys>;
    initNodeirys(address: string, currency: string, keypair: KeypairSigner, options: any): Promise<NodeIrys>;
    initWebirys(address: string, currency: string, identity: IdentitySigner, options: any): Promise<WebIrys>;
}
export declare const isirysStorageDriver: (storageDriver: StorageDriver) => storageDriver is IrysStorageDriver;
