{"version":3,"file":"tokenPayment.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/tokenPayment.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  TokenPayment,\n  tokenPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenPayment guard allows minting by charging the\n * payer a specific amount of tokens from a certain mint acount.\n * The tokens will be transfered to a predefined destination.\n *\n * This guard alone does not limit how many times a holder\n * can mint. A holder can mint as many times as they have\n * the required amount of tokens to pay with.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenPaymentGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n\n  /** The associated token address to send the tokens to. */\n  destinationAta: PublicKey;\n};\n\n/** @internal */\nexport const tokenPaymentGuardManifest: CandyGuardManifest<TokenPaymentGuardSettings> =\n  {\n    name: 'tokenPayment',\n    settingsBytes: 72,\n    settingsSerializer: mapSerializer<TokenPayment, TokenPaymentGuardSettings>(\n      createSerializerFromBeet(tokenPaymentBeet),\n      (settings) => ({\n        mint: settings.mint,\n        amount: token(settings.amount),\n        destinationAta: settings.destinationAta,\n      }),\n      (settings) => ({\n        mint: settings.mint,\n        amount: settings.amount.basisPoints,\n        destinationAta: settings.destinationAta,\n      })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAddress,\n            isWritable: true,\n          },\n          {\n            isSigner: false,\n            address: settings.destinationAta,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"],"names":["tokenPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenPaymentBeet","settings","mint","amount","token","destinationAta","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAddress","tokens","pdas","associatedTokenAccount","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACO,MAAMA,yBAAwE,GACnF;AACEC,EAAAA,IAAI,EAAE,cAAc;AACpBC,EAAAA,aAAa,EAAE,EAAE;EACjBC,kBAAkB,EAAEC,aAAa,CAC/BC,wBAAwB,CAACC,gBAAgB,CAAC,EACzCC,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBC,IAAAA,MAAM,EAAEC,KAAK,CAACH,QAAQ,CAACE,MAAM,CAAC;IAC9BE,cAAc,EAAEJ,QAAQ,CAACI,cAAAA;GAC1B,CAAC,EACDJ,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAAM,CAACG,WAAW;IACnCD,cAAc,EAAEJ,QAAQ,CAACI,cAAAA;AAC3B,GAAC,CAAC,CACH;AACDE,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAQ;IAAEP,QAAQ;IAAEQ,KAAK;AAAEC,IAAAA,QAAAA;AAAS,GAAC,KAAK;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MACnEZ,IAAI,EAAED,QAAQ,CAACC,IAAI;MACnBa,KAAK,EAAEN,KAAK,CAACO,SAAS;AACtBN,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLO,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEX,YAAY;AACrBY,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAErB,QAAQ,CAACI,cAAc;AAChCkB,QAAAA,UAAU,EAAE,IAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}