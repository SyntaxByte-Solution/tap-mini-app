"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const aptos_1 = require("aptos");
const web_1 = require("arbundles/web");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const js_sha3_1 = __importDefault(require("js-sha3"));
// import { Ed25519PublicKey } from "aptos/src/aptos_types/ed25519";
// import { Transaction_UserTransaction, TransactionPayload_EntryFunctionPayload, TransactionPayload, PendingTransaction, UserTransaction } from "aptos/src/generated";
const token_1 = __importDefault(require("../token"));
class AptosConfig extends token_1.default {
    constructor(config) {
        // if (typeof config.wallet === "string" && config.wallet.length === 66) config.wallet = Buffer.from(config.wallet.slice(2), "hex");
        // // @ts-ignore
        // config.accountInstance = new AptosAccount(config.wallet);
        super(config);
        this.base = ["aptom", 1e8];
    }
    getProvider() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return ((_a = this.providerInstance) !== null && _a !== void 0 ? _a : (this.providerInstance = new aptos_1.AptosClient(this.providerUrl)));
        });
    }
    getTx(txId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this.getProvider();
            const tx = (yield client.waitForTransactionWithResult(txId, /* { checkSuccess: true } */ { timeoutSecs: 1, checkSuccess: true }));
            const payload = tx === null || tx === void 0 ? void 0 : tx.payload;
            if (!tx.success) {
                throw new Error((_a = tx === null || tx === void 0 ? void 0 : tx.vm_status) !== null && _a !== void 0 ? _a : "Unknown Aptos error");
            }
            if (!((payload === null || payload === void 0 ? void 0 : payload.function) === "0x1::coin::transfer" &&
                (payload === null || payload === void 0 ? void 0 : payload.type_arguments[0]) === "0x1::aptos_coin::AptosCoin" &&
                (tx === null || tx === void 0 ? void 0 : tx.vm_status) === "Executed successfully")) {
                throw new Error(`Aptos tx ${txId} failed validation`);
            }
            const isPending = tx.type === "pending_transaction";
            return {
                to: payload.arguments[0],
                from: tx.sender,
                amount: new bignumber_js_1.default(payload.arguments[1]),
                pending: isPending,
                confirmed: !isPending,
            };
        });
    }
    ownerToAddress(owner) {
        const hash = js_sha3_1.default.sha3_256.create();
        hash.update(Buffer.from(owner));
        hash.update("\x00");
        return `0x${hash.hex()}`;
    }
    sign(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.getSigner().sign(data);
        });
    }
    getSigner() {
        var _a;
        return ((_a = this.signerInstance) !== null && _a !== void 0 ? _a : (this.signerInstance = new web_1.InjectedAptosSigner(this.wallet, this._publicKey)));
    }
    verify(pub, data, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield web_1.InjectedAptosSigner.verify(pub, data, signature);
        });
    }
    getCurrentHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default((yield (yield this.getProvider()).client.blocks.httpRequest.request({ method: "GET", url: "/" })).block_height);
        });
    }
    getFee(amount, to) {
        return __awaiter(this, void 0, void 0, function* () {
            const client = yield this.getProvider();
            if (!this.address)
                throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
            const builder = new aptos_1.TransactionBuilderRemoteABI(client, { sender: this.address });
            const rawTransaction = yield builder.build("0x1::coin::transfer", ["0x1::aptos_coin::AptosCoin"], [to !== null && to !== void 0 ? to : "0x149f7dc9c8e43c14ab46d3a6b62cfe84d67668f764277411f98732bf6718acf9", new bignumber_js_1.default(amount).toNumber()]);
            // eslint-disable-next-line @typescript-eslint/no-unused-vars
            const txnBuilder = new aptos_1.TransactionBuilderEd25519((_signingMessage) => {
                const invalidSigBytes = new Uint8Array(64);
                return new aptos_1.TxnBuilderTypes.Ed25519Signature(invalidSigBytes);
            }, (yield this.getPublicKey()));
            const signedSimulation = txnBuilder.sign(rawTransaction);
            const queryParams = {
                estimate_gas_unit_price: true,
                estimate_max_gas_amount: true,
            };
            const simulationResult = yield client.client.request.request({
                url: "/transactions/simulate",
                query: queryParams,
                method: "POST",
                body: signedSimulation,
                mediaType: "application/x.aptos.signed_transaction+bcs",
            });
            return { gasUnitPrice: +simulationResult[0].gas_unit_price, maxGasAmount: +simulationResult[0].max_gas_amount };
            // const simulationResult = await client.simulateTransaction(this.accountInstance, rawTransaction, { estimateGasUnitPrice: true, estimateMaxGasAmount: true });
            // return new BigNumber(simulationResult?.[0].gas_unit_price).multipliedBy(simulationResult?.[0].gas_used);
            // const est = await provider.client.transactions.estimateGasPrice();
            // return new BigNumber(est.gas_estimate/* (await (await this.getProvider()).client.transactions.estimateGasPrice()).gas_estimate */); // * by gas limit (for upper limit)
        });
    }
    sendTx(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.wallet.signAndSubmitTransaction(data)).hash;
            // return (await (await (this.getProvider())).submitSignedBCSTransaction(data)).hash;
        });
    }
    createTx(amount, to, _fee) {
        return __awaiter(this, void 0, void 0, function* () {
            // const client = await this.getProvider();
            // const payload = new CoinClient(client).transactionBuilder.buildTransactionPayload(
            //     "0x1::coin::transfer",
            //     ["0x1::aptos_coin::AptosCoin"],
            //     [to, new BigNumber(amount).toNumber()],
            // );
            const tx = {
                arguments: [to, new bignumber_js_1.default(amount).toNumber()],
                function: "0x1::coin::transfer",
                type: "entry_function_payload",
                type_arguments: ["0x1::aptos_coin::AptosCoin"],
            };
            // const rawTransaction = await client.generateRawTransaction(this.accountInstance.address(), payload);
            // const bcsTxn = AptosClient.generateBCSTransaction(this.accountInstance, rawTransaction);
            // const tx = await this.wallet.signTransaction(transaction);
            return { txId: undefined, tx };
        });
    }
    getPublicKey() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return ((_a = this._publicKey) !== null && _a !== void 0 ? _a : (this._publicKey = Buffer.from((yield this.wallet.account()).publicKey.toString().slice(2), "hex")));
        });
    }
    ready() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this._publicKey = (yield this.getPublicKey());
            this._address = this.ownerToAddress(this._publicKey);
            const client = yield this.getProvider();
            this._address = yield client
                .lookupOriginalAddress((_a = this.address) !== null && _a !== void 0 ? _a : "")
                .then((hs) => hs.toString())
                .catch((_) => this._address); // fallback to original
            if (((_b = this._address) === null || _b === void 0 ? void 0 : _b.length) == 66 && this._address.charAt(2) === "0") {
                this._address = this._address.slice(0, 2) + this._address.slice(3);
            }
        });
    }
}
exports.default = AptosConfig;
//# sourceMappingURL=aptos.js.map