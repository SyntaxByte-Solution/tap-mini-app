{"version":3,"file":"UtilsClient.mjs","sources":["../../../../src/plugins/utilsModule/UtilsClient.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  addAmounts,\n  lamports,\n  multiplyAmount,\n  SolAmount,\n  subtractAmounts,\n} from '@/types';\n\nconst TRANSACTION_FEE = 5000;\n\n/**\n * @group Modules\n */\nexport class UtilsClient {\n  protected readonly metaplex: Metaplex;\n  protected cachedRentPerEmptyAccount: SolAmount | null = null;\n  protected cachedRentPerByte: SolAmount | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  async estimate(\n    bytes: number,\n    numberOfAccounts = 1,\n    numberOfTransactions = 1,\n    useCache = true\n  ): Promise<SolAmount> {\n    const rent = await this.estimateRent(bytes, numberOfAccounts, useCache);\n    const transactionFees = this.estimateTransactionFee(numberOfTransactions);\n\n    return addAmounts(rent, transactionFees);\n  }\n\n  async estimateRent(\n    bytes: number,\n    numberOfAccounts = 1,\n    useCache = true\n  ): Promise<SolAmount> {\n    if (\n      !useCache ||\n      this.cachedRentPerEmptyAccount === null ||\n      this.cachedRentPerByte === null\n    ) {\n      const rentFor0Bytes = await this.metaplex.rpc().getRent(0);\n\n      // TODO(loris): Infer from header size in bytes.\n      const rentFor1Byte = await this.metaplex.rpc().getRent(1);\n      this.cachedRentPerEmptyAccount = rentFor0Bytes;\n      this.cachedRentPerByte = subtractAmounts(rentFor1Byte, rentFor0Bytes);\n    }\n\n    const rentForAccounts = multiplyAmount(\n      this.cachedRentPerEmptyAccount,\n      numberOfAccounts\n    );\n    const rentForBytes = multiplyAmount(this.cachedRentPerByte, bytes);\n\n    return addAmounts(rentForAccounts, rentForBytes);\n  }\n\n  estimateTransactionFee(numberOfTransactions = 1): SolAmount {\n    // TODO(loris): Improve with an RPC call to get the current transaction fee.\n    return lamports(numberOfTransactions * TRANSACTION_FEE);\n  }\n}\n"],"names":["TRANSACTION_FEE","UtilsClient","constructor","metaplex","estimate","bytes","numberOfAccounts","numberOfTransactions","useCache","rent","estimateRent","transactionFees","estimateTransactionFee","addAmounts","cachedRentPerEmptyAccount","cachedRentPerByte","rentFor0Bytes","rpc","getRent","rentFor1Byte","subtractAmounts","rentForAccounts","multiplyAmount","rentForBytes","lamports"],"mappings":";;;AASA,MAAMA,eAAe,GAAG,IAAI,CAAA;;AAE5B;AACA;AACA;AACO,MAAMC,WAAW,CAAC;EAKvBC,WAAW,CAACC,QAAkB,EAAE;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,2BAAA,EAHwB,IAAI,CAAA,CAAA;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,mBAAA,EACZ,IAAI,CAAA,CAAA;IAGlD,IAAI,CAACA,QAAQ,GAAGA,QAAQ,CAAA;AAC1B,GAAA;AAEA,EAAA,MAAMC,QAAQ,CACZC,KAAa,EACbC,gBAAgB,GAAG,CAAC,EACpBC,oBAAoB,GAAG,CAAC,EACxBC,QAAQ,GAAG,IAAI,EACK;AACpB,IAAA,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,YAAY,CAACL,KAAK,EAAEC,gBAAgB,EAAEE,QAAQ,CAAC,CAAA;AACvE,IAAA,MAAMG,eAAe,GAAG,IAAI,CAACC,sBAAsB,CAACL,oBAAoB,CAAC,CAAA;AAEzE,IAAA,OAAOM,UAAU,CAACJ,IAAI,EAAEE,eAAe,CAAC,CAAA;AAC1C,GAAA;EAEA,MAAMD,YAAY,CAChBL,KAAa,EACbC,gBAAgB,GAAG,CAAC,EACpBE,QAAQ,GAAG,IAAI,EACK;AACpB,IAAA,IACE,CAACA,QAAQ,IACT,IAAI,CAACM,yBAAyB,KAAK,IAAI,IACvC,IAAI,CAACC,iBAAiB,KAAK,IAAI,EAC/B;AACA,MAAA,MAAMC,aAAa,GAAG,MAAM,IAAI,CAACb,QAAQ,CAACc,GAAG,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAAA;;AAE1D;AACA,MAAA,MAAMC,YAAY,GAAG,MAAM,IAAI,CAAChB,QAAQ,CAACc,GAAG,EAAE,CAACC,OAAO,CAAC,CAAC,CAAC,CAAA;MACzD,IAAI,CAACJ,yBAAyB,GAAGE,aAAa,CAAA;MAC9C,IAAI,CAACD,iBAAiB,GAAGK,eAAe,CAACD,YAAY,EAAEH,aAAa,CAAC,CAAA;AACvE,KAAA;IAEA,MAAMK,eAAe,GAAGC,cAAc,CACpC,IAAI,CAACR,yBAAyB,EAC9BR,gBAAgB,CACjB,CAAA;IACD,MAAMiB,YAAY,GAAGD,cAAc,CAAC,IAAI,CAACP,iBAAiB,EAAEV,KAAK,CAAC,CAAA;AAElE,IAAA,OAAOQ,UAAU,CAACQ,eAAe,EAAEE,YAAY,CAAC,CAAA;AAClD,GAAA;AAEAX,EAAAA,sBAAsB,CAACL,oBAAoB,GAAG,CAAC,EAAa;AAC1D;AACA,IAAA,OAAOiB,QAAQ,CAACjB,oBAAoB,GAAGP,eAAe,CAAC,CAAA;AACzD,GAAA;AACF;;;;"}