'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('../accounts.cjs');
var errors = require('../errors.cjs');
var Mint = require('../models/Mint.cjs');
var Token = require('../models/Token.cjs');
var Operation = require('../../../types/Operation.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindTokenWithMintByMintOperation';

/**
 * Finds a token account and its associated mint account
 * by providing the mint address and either:
 * - the token address or
 * - the address of the token's owner.
 *
 * ```ts
 * const tokenWithMint = await metaplex
 *   .tokens()
 *   .findTokenWithMintByMint({ mint, address: tokenAddress, type: "token" };
 *
 * const tokenWithMint = await metaplex
 *   .tokens()
 *   .findTokenWithMintByMint({ mint, address: ownerAddress, type: "owner" };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findTokenWithMintByMintOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findTokenWithMintByMintOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      commitment,
      programs
    } = scope;
    const {
      mint,
      address,
      addressType
    } = operation.input;
    const tokenAddress = addressType === 'owner' ? metaplex.tokens().pdas().associatedTokenAccount({
      mint,
      owner: address,
      programs
    }) : address;
    const accounts$1 = await metaplex.rpc().getMultipleAccounts([mint, tokenAddress], commitment);
    const mintAccount = accounts.toMintAccount(accounts$1[0]);
    const tokenAccount = accounts.toTokenAccount(accounts$1[1]);
    if (!tokenAccount.data.mint.equals(mint)) {
      throw new errors.TokenAndMintDoNotMatchError(tokenAddress, tokenAccount.data.mint, mint);
    }
    return Token.toTokenWithMint(tokenAccount, Mint.toMint(mintAccount));
  }
};

exports.findTokenWithMintByMintOperation = findTokenWithMintByMintOperation;
exports.findTokenWithMintByMintOperationHandler = findTokenWithMintByMintOperationHandler;
//# sourceMappingURL=findTokenWithMintByMint.cjs.map
