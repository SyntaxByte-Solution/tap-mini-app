{"version":3,"file":"loadPurchase.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/loadPurchase.ts"],"sourcesContent":["import { assertNftOrSftWithToken } from '../../nftModule';\nimport { LazyPurchase, Purchase } from '../models/Purchase';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  amount,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadPurchaseOperation' as const;\n\n/**\n * Transforms a `LazyPurchase` model into a `Purchase` model.\n *\n * ```ts\n * const purchase = await metaplex\n *   .auctionHouse()\n *   .loadPurchase({ lazyPurchase };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const loadPurchaseOperation = useOperation<LoadPurchaseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadPurchaseOperation = Operation<\n  typeof Key,\n  LoadPurchaseInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadPurchaseInput = {\n  /** The `LazyPurchase` model to transform into the `Purchase`.  */\n  lazyPurchase: LazyPurchase;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadPurchaseOperationHandler: OperationHandler<LoadPurchaseOperation> =\n  {\n    handle: async (\n      operation: LoadPurchaseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { lazyPurchase, loadJsonMetadata = true } = operation.input;\n      const asset = await metaplex.nfts().findByMetadata(\n        {\n          metadata: lazyPurchase.metadataAddress,\n          tokenOwner: lazyPurchase.buyerAddress,\n          loadJsonMetadata,\n        },\n        scope\n      );\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyPurchase,\n        lazy: false,\n        isPublic: false,\n        asset,\n        tokens: amount(lazyPurchase.tokens, asset.mint.currency),\n      };\n    },\n  };\n"],"names":["Key","loadPurchaseOperation","useOperation","loadPurchaseOperationHandler","handle","operation","metaplex","scope","lazyPurchase","loadJsonMetadata","input","asset","nfts","findByMetadata","metadata","metadataAddress","tokenOwner","buyerAddress","assertNftOrSftWithToken","lazy","isPublic","tokens","amount","mint","currency"],"mappings":";;;;AAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAgC,CAAA;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,qBAAqB,GAAGC,YAAY,CAAwBF,GAAG,EAAC;;AAE7E;AACA;AACA;AACA;;AAuBA;AACA;AACA;AACA;AACO,MAAMG,4BAAqE,GAChF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAgC,EAChCC,QAAkB,EAClBC,KAAqB,KAClB;IACH,MAAM;MAAEC,YAAY;AAAEC,MAAAA,gBAAgB,GAAG,IAAA;KAAM,GAAGJ,SAAS,CAACK,KAAK,CAAA;IACjE,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAI,EAAE,CAACC,cAAc,CAChD;MACEC,QAAQ,EAAEN,YAAY,CAACO,eAAe;MACtCC,UAAU,EAAER,YAAY,CAACS,YAAY;AACrCR,MAAAA,gBAAAA;KACD,EACDF,KAAK,CACN,CAAA;IACDW,uBAAuB,CAACP,KAAK,CAAC,CAAA;IAE9B,OAAO;AACL,MAAA,GAAGH,YAAY;AACfW,MAAAA,IAAI,EAAE,KAAK;AACXC,MAAAA,QAAQ,EAAE,KAAK;MACfT,KAAK;MACLU,MAAM,EAAEC,MAAM,CAACd,YAAY,CAACa,MAAM,EAAEV,KAAK,CAACY,IAAI,CAACC,QAAQ,CAAA;KACxD,CAAA;AACH,GAAA;AACF;;;;"}