{"version":3,"file":"findCandyMachineByAddress.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyMachineByAddress.ts"],"sourcesContent":["import { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { CandyMachine, toCandyGuard, toCandyMachine } from '../models';\nimport { assertCandyGuardProgram } from '../programs';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineByAddressOperation' as const;\n\n/**\n * Find an existing Candy Machine by its address.\n *\n * ```ts\n * const candyMachine = await metaplex\n *   .candyMachines()\n *   .findbyAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachineByAddressOperation =\n  _findCandyMachineByAddressOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _findCandyMachineByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  input: FindCandyMachineByAddressInput\n): FindCandyMachineByAddressOperation<T> {\n  return { key: Key, input };\n}\n_findCandyMachineByAddressOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachineByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, FindCandyMachineByAddressInput, CandyMachine<T>>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachineByAddressInput = {\n  /** The Candy Machine address. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachineByAddressOperationHandler: OperationHandler<FindCandyMachineByAddressOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: FindCandyMachineByAddressOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) {\n      const { address } = operation.input;\n      const { commitment, programs } = scope;\n      const potentialCandyGuardAddress = metaplex\n        .candyMachines()\n        .pdas()\n        .candyGuard({ base: address, programs });\n      const [candyMachineAccount, potentialCandyGuardAccount] = await metaplex\n        .rpc()\n        .getMultipleAccounts([address, potentialCandyGuardAddress], commitment);\n      scope.throwIfCanceled();\n\n      assertAccountExists(candyMachineAccount, 'CandyMachine');\n      const candyMachine = toCandyMachine<T>(candyMachineAccount);\n      const mintAuthority = candyMachine.mintAuthorityAddress;\n\n      // Optimisation that tries to load both the Candy Machine\n      // And the Candy Guard in one RPC call assuming the Candy\n      // Machine's address is the base address of the Candy Guard.\n      if (\n        potentialCandyGuardAccount.exists &&\n        potentialCandyGuardAccount.publicKey.equals(mintAuthority)\n      ) {\n        return {\n          ...candyMachine,\n          candyGuard: toCandyGuard<T>(potentialCandyGuardAccount, metaplex),\n        };\n      }\n\n      // If the Candy Machine's mint authority is not a PDA,\n      // it cannot have an associated Candy Guard.\n      // TODO(loris): Does not seem to work when the Candy Guard does not derive from the Candy Machine.\n      if (PublicKey.isOnCurve(mintAuthority)) {\n        return candyMachine;\n      }\n\n      // Fetch the content of the mint authority PDA.\n      const mintAuthorityAccount = await metaplex\n        .rpc()\n        .getAccount(mintAuthority, commitment);\n      scope.throwIfCanceled();\n\n      try {\n        // Identity the program owner as a Candy Guard program\n        // and parse the Candy Guard accordingly.\n        assertAccountExists(mintAuthorityAccount);\n        const program = metaplex.programs().get(mintAuthorityAccount.owner);\n        assertCandyGuardProgram(program);\n\n        return {\n          ...candyMachine,\n          candyGuard: toCandyGuard<T>(mintAuthorityAccount, metaplex),\n        };\n      } catch (error) {\n        // If anything goes wrong, assume there is no Candy Guard\n        // attached to this Candy Machine.\n        return candyMachine;\n      }\n    },\n  };\n"],"names":["Key","findCandyMachineByAddressOperation","_findCandyMachineByAddressOperation","input","key","findCandyMachineByAddressOperationHandler","handle","operation","metaplex","scope","address","commitment","programs","potentialCandyGuardAddress","candyMachines","pdas","candyGuard","base","candyMachineAccount","potentialCandyGuardAccount","rpc","getMultipleAccounts","throwIfCanceled","assertAccountExists","candyMachine","toCandyMachine","mintAuthority","mintAuthorityAddress","exists","publicKey","equals","toCandyGuard","PublicKey","isOnCurve","mintAuthorityAccount","getAccount","program","get","owner","assertCandyGuardProgram","error"],"mappings":";;;;;;;;;;AAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAA6C,CAAA;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,kCAAkC,GAC7CC,oCAAmC;AACrC;AACA,SAASA,mCAAmC,CAG1CC,KAAqC,EACE;EACvC,OAAO;AAAEC,IAAAA,GAAG,EAAEJ,GAAG;AAAEG,IAAAA,KAAAA;GAAO,CAAA;AAC5B,CAAA;AACAD,mCAAmC,CAACE,GAAG,GAAGJ,GAAG,CAAA;;AAE7C;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACO,MAAMK,yCAA+F,GAC1G;AACE,EAAA,MAAMC,MAAM,CACVC,SAAgD,EAChDC,QAAkB,EAClBC,KAAqB,EACrB;IACA,MAAM;AAAEC,MAAAA,OAAAA;KAAS,GAAGH,SAAS,CAACJ,KAAK,CAAA;IACnC,MAAM;MAAEQ,UAAU;AAAEC,gBAAAA,UAAAA;AAAS,KAAC,GAAGH,KAAK,CAAA;IACtC,MAAMI,0BAA0B,GAAGL,QAAQ,CACxCM,aAAa,EAAE,CACfC,IAAI,EAAE,CACNC,UAAU,CAAC;AAAEC,MAAAA,IAAI,EAAEP,OAAO;AAAEE,gBAAAA,UAAAA;AAAS,KAAC,CAAC,CAAA;IAC1C,MAAM,CAACM,mBAAmB,EAAEC,0BAA0B,CAAC,GAAG,MAAMX,QAAQ,CACrEY,GAAG,EAAE,CACLC,mBAAmB,CAAC,CAACX,OAAO,EAAEG,0BAA0B,CAAC,EAAEF,UAAU,CAAC,CAAA;IACzEF,KAAK,CAACa,eAAe,EAAE,CAAA;AAEvBC,IAAAA,2BAAmB,CAACL,mBAAmB,EAAE,cAAc,CAAC,CAAA;AACxD,IAAA,MAAMM,YAAY,GAAGC,2BAAc,CAAIP,mBAAmB,CAAC,CAAA;AAC3D,IAAA,MAAMQ,aAAa,GAAGF,YAAY,CAACG,oBAAoB,CAAA;;AAEvD;AACA;AACA;AACA,IAAA,IACER,0BAA0B,CAACS,MAAM,IACjCT,0BAA0B,CAACU,SAAS,CAACC,MAAM,CAACJ,aAAa,CAAC,EAC1D;MACA,OAAO;AACL,QAAA,GAAGF,YAAY;AACfR,QAAAA,UAAU,EAAEe,uBAAY,CAAIZ,0BAA0B,EAAEX,QAAQ,CAAA;OACjE,CAAA;AACH,KAAA;;AAEA;AACA;AACA;AACA,IAAA,IAAIwB,iBAAS,CAACC,SAAS,CAACP,aAAa,CAAC,EAAE;AACtC,MAAA,OAAOF,YAAY,CAAA;AACrB,KAAA;;AAEA;AACA,IAAA,MAAMU,oBAAoB,GAAG,MAAM1B,QAAQ,CACxCY,GAAG,EAAE,CACLe,UAAU,CAACT,aAAa,EAAEf,UAAU,CAAC,CAAA;IACxCF,KAAK,CAACa,eAAe,EAAE,CAAA;IAEvB,IAAI;AACF;AACA;MACAC,2BAAmB,CAACW,oBAAoB,CAAC,CAAA;AACzC,MAAA,MAAME,OAAO,GAAG5B,QAAQ,CAACI,QAAQ,EAAE,CAACyB,GAAG,CAACH,oBAAoB,CAACI,KAAK,CAAC,CAAA;MACnEC,gCAAuB,CAACH,OAAO,CAAC,CAAA;MAEhC,OAAO;AACL,QAAA,GAAGZ,YAAY;AACfR,QAAAA,UAAU,EAAEe,uBAAY,CAAIG,oBAAoB,EAAE1B,QAAQ,CAAA;OAC3D,CAAA;KACF,CAAC,OAAOgC,KAAK,EAAE;AACd;AACA;AACA,MAAA,OAAOhB,YAAY,CAAA;AACrB,KAAA;AACF,GAAA;AACF;;;;;"}