{"version":3,"file":"executeSale.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/executeSale.ts"],"sourcesContent":["import {\n  AuctioneerExecuteSaleInstructionAccounts,\n  createAuctioneerExecuteSaleInstruction,\n  createExecutePartialSaleInstruction,\n  createExecuteSaleInstruction,\n  createPrintPurchaseReceiptInstruction,\n  ExecutePartialSaleInstructionArgs,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  AuctioneerAuthorityRequiredError,\n  AuctioneerPartialSaleNotSupportedError,\n  BidAndListingHaveDifferentAuctionHousesError,\n  BidAndListingHaveDifferentMintsError,\n  CanceledBidIsNotAllowedError,\n  CanceledListingIsNotAllowedError,\n  PartialPriceMismatchError,\n} from '../errors';\nimport { AuctionHouse, Bid, LazyPurchase, Listing, Purchase } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  amount,\n  isSigner,\n  lamports,\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ExecuteSaleOperation' as const;\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .executeSale({ auctionHouse, bid, listing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const executeSaleOperation = useOperation<ExecuteSaleOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ExecuteSaleOperation = Operation<\n  typeof Key,\n  ExecuteSaleInput,\n  ExecuteSaleOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ExecuteSaleInput = {\n  /**\n   * The Bid that is used in the sale.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, buyer, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'auctionHouse'\n    | 'buyerAddress'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /** The Auction House in which to execute a sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ExecuteSaleOutput = {\n  /** Seller trade state account address encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Biyer trade state account address encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** The buyer address. */\n  buyer: PublicKey;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The asset's metadata address. */\n  metadata: PublicKey;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The sale price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens bought. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .executeSale({ auctionHouse, listing, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleOperationHandler: OperationHandler<ExecuteSaleOperation> =\n  {\n    async handle(\n      operation: ExecuteSaleOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ExecuteSaleOutput> {\n      const { auctionHouse } = operation.input;\n\n      const output = await executeSaleBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const purchase = await metaplex\n          .auctionHouse()\n          .findPurchaseByReceipt(\n            { auctionHouse, receiptAddress: output.receipt },\n            scope\n          );\n\n        return { purchase, ...output };\n      }\n\n      const lazyPurchase: LazyPurchase = {\n        model: 'purchase',\n        lazy: true,\n        auctionHouse: operation.input.auctionHouse,\n        buyerAddress: output.buyer,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        bookkeeperAddress: output.bookkeeper,\n        receiptAddress: output.receipt,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n      };\n\n      return {\n        purchase: await metaplex\n          .auctionHouse()\n          .loadPurchase({ lazyPurchase }, scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ExecuteSaleBuilderParams = Omit<\n  ExecuteSaleInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type ExecuteSaleBuilderContext = Omit<\n  ExecuteSaleOutput,\n  'response' | 'purchase'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleBuilder = (\n  metaplex: Metaplex,\n  params: ExecuteSaleBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<ExecuteSaleBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, listing, bid, auctioneerAuthority } = params;\n  const { sellerAddress, asset } = listing;\n  const { buyerAddress } = bid;\n  const {\n    hasAuctioneer,\n    isNative,\n    treasuryMint,\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    treasuryAccountAddress,\n  } = auctionHouse;\n\n  const isPartialSale = bid.tokens.basisPoints < listing.tokens.basisPoints;\n\n  // Use full size of listing & price when finding trade state PDA for the partial sale.\n  const { tokens, price } = isPartialSale ? listing : bid;\n  const { price: buyerPrice, tokens: buyerTokensSize } = bid;\n\n  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {\n    throw new BidAndListingHaveDifferentAuctionHousesError();\n  }\n  if (!listing.asset.address.equals(bid.asset.address)) {\n    throw new BidAndListingHaveDifferentMintsError();\n  }\n  if (bid.canceledAt) {\n    throw new CanceledBidIsNotAllowedError();\n  }\n  if (listing.canceledAt) {\n    throw new CanceledListingIsNotAllowedError();\n  }\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (isPartialSale && hasAuctioneer) {\n    throw new AuctioneerPartialSaleNotSupportedError();\n  }\n  if (isPartialSale) {\n    const listingPricePerToken = price.basisPoints.div(tokens.basisPoints);\n    const buyerPricePerToken = buyerPrice.basisPoints.div(\n      buyerTokensSize.basisPoints\n    );\n\n    if (!listingPricePerToken.eq(buyerPricePerToken)) {\n      throw new PartialPriceMismatchError(\n        auctionHouse.isNative\n          ? lamports(listingPricePerToken)\n          : amount(listingPricePerToken, auctionHouse.treasuryMint.currency),\n        auctionHouse.isNative\n          ? lamports(buyerPricePerToken)\n          : amount(buyerPricePerToken, auctionHouse.treasuryMint.currency)\n      );\n    }\n  }\n\n  // Accounts.\n  const sellerPaymentReceiptAccount = isNative\n    ? sellerAddress\n    : metaplex.tokens().pdas().associatedTokenAccount({\n        mint: treasuryMint.address,\n        owner: sellerAddress,\n        programs,\n      });\n  const buyerReceiptTokenAccount = metaplex\n    .tokens()\n    .pdas()\n    .associatedTokenAccount({\n      mint: asset.address,\n      owner: buyerAddress,\n      programs,\n    });\n  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({\n    auctionHouse: auctionHouseAddress,\n    buyer: buyerAddress,\n    programs,\n  });\n  const freeTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouseAddress,\n      wallet: sellerAddress,\n      treasuryMint: treasuryMint.address,\n      tokenMint: asset.address,\n      price: lamports(0).basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount: asset.token.address,\n      programs,\n    });\n  const programAsSigner = metaplex.auctionHouse().pdas().programAsSigner();\n\n  const accounts = {\n    buyer: buyerAddress,\n    seller: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    metadata: asset.metadataAddress,\n    treasuryMint: treasuryMint.address,\n    escrowPaymentAccount: escrowPayment,\n    sellerPaymentReceiptAccount,\n    buyerReceiptTokenAccount,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    auctionHouseTreasury: treasuryAccountAddress,\n    buyerTradeState: bid.tradeStateAddress,\n    sellerTradeState: listing.tradeStateAddress,\n    freeTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    freeTradeStateBump: freeTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Execute Sale Instruction\n  const partialSaleArgs: ExecutePartialSaleInstructionArgs = {\n    ...args,\n    partialOrderSize: bid.tokens.basisPoints,\n    partialOrderPrice: bid.price.basisPoints,\n  };\n\n  let executeSaleInstruction = isPartialSale\n    ? createExecutePartialSaleInstruction(accounts, partialSaleArgs)\n    : createExecuteSaleInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    const auctioneerAccounts: AuctioneerExecuteSaleInstructionAccounts = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n        auctionHouse: auctionHouse.address,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        programs,\n      }),\n    };\n\n    executeSaleInstruction = createAuctioneerExecuteSaleInstruction(\n      auctioneerAccounts,\n      args\n    );\n  }\n\n  // Provide additional keys to pay royalties.\n  asset.creators.forEach(({ address }) => {\n    executeSaleInstruction.keys.push({\n      pubkey: address,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    // Provide ATA to receive SPL token royalty if is not native SOL sale.\n    if (!isNative) {\n      executeSaleInstruction.keys.push({\n        pubkey: metaplex.tokens().pdas().associatedTokenAccount({\n          mint: treasuryMint.address,\n          owner: address,\n          programs,\n        }),\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  });\n\n  // Signers.\n  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);\n\n  // Receipt.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) &&\n    Boolean(listing.receiptAddress && bid.receiptAddress && !isPartialSale);\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const purchaseReceipt = metaplex.auctionHouse().pdas().purchaseReceipt({\n    listingTradeState: listing.tradeStateAddress,\n    bidTradeState: bid.tradeStateAddress,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make<ExecuteSaleBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        sellerTradeState: listing.tradeStateAddress,\n        buyerTradeState: bid.tradeStateAddress,\n        buyer: buyerAddress,\n        seller: sellerAddress,\n        metadata: asset.metadataAddress,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        receipt: shouldPrintReceipt ? purchaseReceipt : null,\n        price,\n        tokens,\n      })\n\n      // Execute Sale.\n      .add({\n        instruction: executeSaleInstruction,\n        signers: executeSaleSigners,\n        key: params.instructionKey ?? 'executeSale',\n      })\n\n      // Print the Purchase Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintPurchaseReceiptInstruction(\n            {\n              purchaseReceipt,\n              listingReceipt: listing.receiptAddress as Pda,\n              bidReceipt: bid.receiptAddress as Pda,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { purchaseReceiptBump: purchaseReceipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printPurchaseReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","executeSaleOperation","useOperation","executeSaleOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","output","executeSaleBuilder","sendAndConfirm","confirmOptions","throwIfCanceled","receipt","purchase","findPurchaseByReceipt","receiptAddress","lazyPurchase","model","lazy","buyerAddress","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","price","tokens","basisPoints","createdAt","now","loadPurchase","params","options","programs","payer","rpc","getDefaultFeePayer","listing","bid","auctioneerAuthority","asset","hasAuctioneer","isNative","treasuryMint","address","auctionHouseAddress","authorityAddress","feeAccountAddress","treasuryAccountAddress","isPartialSale","buyerPrice","buyerTokensSize","equals","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","canceledAt","CanceledBidIsNotAllowedError","CanceledListingIsNotAllowedError","AuctioneerAuthorityRequiredError","AuctioneerPartialSaleNotSupportedError","listingPricePerToken","div","buyerPricePerToken","eq","PartialPriceMismatchError","lamports","amount","currency","sellerPaymentReceiptAccount","pdas","associatedTokenAccount","mint","owner","buyerReceiptTokenAccount","escrowPayment","buyerEscrow","freeTradeState","tradeState","wallet","tokenMint","tokenSize","tokenAccount","token","programAsSigner","accounts","escrowPaymentAccount","authority","auctionHouseFeeAccount","auctionHouseTreasury","buyerTradeState","tradeStateAddress","sellerTradeState","args","freeTradeStateBump","bump","escrowPaymentBump","programAsSignerBump","partialSaleArgs","partialOrderSize","partialOrderPrice","executeSaleInstruction","createExecutePartialSaleInstruction","createExecuteSaleInstruction","auctioneerAccounts","publicKey","ahAuctioneerPda","auctioneer","createAuctioneerExecuteSaleInstruction","creators","forEach","keys","push","pubkey","isWritable","isSigner","executeSaleSigners","filter","shouldPrintReceipt","printReceipt","Boolean","identity","purchaseReceipt","listingTradeState","bidTradeState","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","key","instructionKey","when","builder","createPrintPurchaseReceiptInstruction","listingReceipt","bidReceipt","SYSVAR_INSTRUCTIONS_PUBKEY","purchaseReceiptBump"],"mappings":";;;;;;;;;AAqCA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAA+B,CAAA;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,oBAAoB,GAAGC,YAAY,CAAuBF,GAAG,EAAC;;AAE3E;AACA;AACA;AACA;;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,2BAAmE,GAC9E;AACE,EAAA,MAAMC,MAAM,CACVC,SAA+B,EAC/BC,QAAkB,EAClBC,KAAqB,EACO;IAC5B,MAAM;AAAEC,MAAAA,YAAAA;KAAc,GAAGH,SAAS,CAACI,KAAK,CAAA;IAExC,MAAMC,MAAM,GAAG,MAAMC,kBAAkB,CACrCL,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACK,cAAc,CAACN,QAAQ,EAAEC,KAAK,CAACM,cAAc,CAAC,CAAA;IAChDN,KAAK,CAACO,eAAe,EAAE,CAAA;IAEvB,IAAIJ,MAAM,CAACK,OAAO,EAAE;MAClB,MAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAC5BE,YAAY,EAAE,CACdS,qBAAqB,CACpB;QAAET,YAAY;QAAEU,cAAc,EAAER,MAAM,CAACK,OAAAA;OAAS,EAChDR,KAAK,CACN,CAAA;MAEH,OAAO;QAAES,QAAQ;QAAE,GAAGN,MAAAA;OAAQ,CAAA;AAChC,KAAA;AAEA,IAAA,MAAMS,YAA0B,GAAG;AACjCC,MAAAA,KAAK,EAAE,UAAU;AACjBC,MAAAA,IAAI,EAAE,IAAI;AACVb,MAAAA,YAAY,EAAEH,SAAS,CAACI,KAAK,CAACD,YAAY;MAC1Cc,YAAY,EAAEZ,MAAM,CAACa,KAAK;MAC1BC,aAAa,EAAEd,MAAM,CAACe,MAAM;MAC5BC,eAAe,EAAEhB,MAAM,CAACiB,QAAQ;MAChCC,iBAAiB,EAAElB,MAAM,CAACmB,UAAU;MACpCX,cAAc,EAAER,MAAM,CAACK,OAAO;MAC9Be,KAAK,EAAEpB,MAAM,CAACoB,KAAK;AACnBC,MAAAA,MAAM,EAAErB,MAAM,CAACqB,MAAM,CAACC,WAAW;AACjCC,MAAAA,SAAS,EAAEC,GAAG,EAAA;KACf,CAAA;IAED,OAAO;MACLlB,QAAQ,EAAE,MAAMV,QAAQ,CACrBE,YAAY,EAAE,CACd2B,YAAY,CAAC;AAAEhB,QAAAA,YAAAA;OAAc,EAAEZ,KAAK,CAAC;MACxC,GAAGG,MAAAA;KACJ,CAAA;AACH,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACaC,MAAAA,kBAAkB,GAAG,CAChCL,QAAkB,EAClB8B,MAAgC,EAChCC,OAAkC,GAAG,EAAE,KACW;EAClD,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGjC,QAAQ,CAACkC,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IAAE7B,YAAY;IAAEkC,OAAO;IAAEC,GAAG;AAAEC,IAAAA,mBAAAA;AAAoB,GAAC,GAAGR,MAAM,CAAA;EAClE,MAAM;IAAEZ,aAAa;AAAEqB,IAAAA,KAAAA;AAAM,GAAC,GAAGH,OAAO,CAAA;EACxC,MAAM;AAAEpB,IAAAA,YAAAA;AAAa,GAAC,GAAGqB,GAAG,CAAA;EAC5B,MAAM;IACJG,aAAa;IACbC,QAAQ;IACRC,YAAY;AACZC,IAAAA,OAAO,EAAEC,mBAAmB;IAC5BC,gBAAgB;IAChBC,iBAAiB;AACjBC,IAAAA,sBAAAA;AACF,GAAC,GAAG7C,YAAY,CAAA;AAEhB,EAAA,MAAM8C,aAAa,GAAGX,GAAG,CAACZ,MAAM,CAACC,WAAW,GAAGU,OAAO,CAACX,MAAM,CAACC,WAAW,CAAA;;AAEzE;EACA,MAAM;IAAED,MAAM;AAAED,IAAAA,KAAAA;AAAM,GAAC,GAAGwB,aAAa,GAAGZ,OAAO,GAAGC,GAAG,CAAA;EACvD,MAAM;AAAEb,IAAAA,KAAK,EAAEyB,UAAU;AAAExB,IAAAA,MAAM,EAAEyB,eAAAA;AAAgB,GAAC,GAAGb,GAAG,CAAA;AAE1D,EAAA,IAAI,CAACD,OAAO,CAAClC,YAAY,CAACyC,OAAO,CAACQ,MAAM,CAACd,GAAG,CAACnC,YAAY,CAACyC,OAAO,CAAC,EAAE;IAClE,MAAM,IAAIS,4CAA4C,EAAE,CAAA;AAC1D,GAAA;AACA,EAAA,IAAI,CAAChB,OAAO,CAACG,KAAK,CAACI,OAAO,CAACQ,MAAM,CAACd,GAAG,CAACE,KAAK,CAACI,OAAO,CAAC,EAAE;IACpD,MAAM,IAAIU,oCAAoC,EAAE,CAAA;AAClD,GAAA;EACA,IAAIhB,GAAG,CAACiB,UAAU,EAAE;IAClB,MAAM,IAAIC,4BAA4B,EAAE,CAAA;AAC1C,GAAA;EACA,IAAInB,OAAO,CAACkB,UAAU,EAAE;IACtB,MAAM,IAAIE,gCAAgC,EAAE,CAAA;AAC9C,GAAA;AACA,EAAA,IAAIhB,aAAa,IAAI,CAACF,mBAAmB,EAAE;IACzC,MAAM,IAAImB,gCAAgC,EAAE,CAAA;AAC9C,GAAA;EACA,IAAIT,aAAa,IAAIR,aAAa,EAAE;IAClC,MAAM,IAAIkB,sCAAsC,EAAE,CAAA;AACpD,GAAA;AACA,EAAA,IAAIV,aAAa,EAAE;IACjB,MAAMW,oBAAoB,GAAGnC,KAAK,CAACE,WAAW,CAACkC,GAAG,CAACnC,MAAM,CAACC,WAAW,CAAC,CAAA;IACtE,MAAMmC,kBAAkB,GAAGZ,UAAU,CAACvB,WAAW,CAACkC,GAAG,CACnDV,eAAe,CAACxB,WAAW,CAC5B,CAAA;AAED,IAAA,IAAI,CAACiC,oBAAoB,CAACG,EAAE,CAACD,kBAAkB,CAAC,EAAE;AAChD,MAAA,MAAM,IAAIE,yBAAyB,CACjC7D,YAAY,CAACuC,QAAQ,GACjBuB,QAAQ,CAACL,oBAAoB,CAAC,GAC9BM,MAAM,CAACN,oBAAoB,EAAEzD,YAAY,CAACwC,YAAY,CAACwB,QAAQ,CAAC,EACpEhE,YAAY,CAACuC,QAAQ,GACjBuB,QAAQ,CAACH,kBAAkB,CAAC,GAC5BI,MAAM,CAACJ,kBAAkB,EAAE3D,YAAY,CAACwC,YAAY,CAACwB,QAAQ,CAAC,CACnE,CAAA;AACH,KAAA;AACF,GAAA;;AAEA;AACA,EAAA,MAAMC,2BAA2B,GAAG1B,QAAQ,GACxCvB,aAAa,GACblB,QAAQ,CAACyB,MAAM,EAAE,CAAC2C,IAAI,EAAE,CAACC,sBAAsB,CAAC;IAC9CC,IAAI,EAAE5B,YAAY,CAACC,OAAO;AAC1B4B,IAAAA,KAAK,EAAErD,aAAa;AACpBc,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACN,MAAMwC,wBAAwB,GAAGxE,QAAQ,CACtCyB,MAAM,EAAE,CACR2C,IAAI,EAAE,CACNC,sBAAsB,CAAC;IACtBC,IAAI,EAAE/B,KAAK,CAACI,OAAO;AACnB4B,IAAAA,KAAK,EAAEvD,YAAY;AACnBgB,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACJ,MAAMyC,aAAa,GAAGzE,QAAQ,CAACE,YAAY,EAAE,CAACkE,IAAI,EAAE,CAACM,WAAW,CAAC;AAC/DxE,IAAAA,YAAY,EAAE0C,mBAAmB;AACjC3B,IAAAA,KAAK,EAAED,YAAY;AACnBgB,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAM2C,cAAc,GAAG3E,QAAQ,CAC5BE,YAAY,EAAE,CACdkE,IAAI,EAAE,CACNQ,UAAU,CAAC;AACV1E,IAAAA,YAAY,EAAE0C,mBAAmB;AACjCiC,IAAAA,MAAM,EAAE3D,aAAa;IACrBwB,YAAY,EAAEA,YAAY,CAACC,OAAO;IAClCmC,SAAS,EAAEvC,KAAK,CAACI,OAAO;AACxBnB,IAAAA,KAAK,EAAEwC,QAAQ,CAAC,CAAC,CAAC,CAACtC,WAAW;IAC9BqD,SAAS,EAAEtD,MAAM,CAACC,WAAW;AAC7BsD,IAAAA,YAAY,EAAEzC,KAAK,CAAC0C,KAAK,CAACtC,OAAO;AACjCX,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACJ,MAAMkD,eAAe,GAAGlF,QAAQ,CAACE,YAAY,EAAE,CAACkE,IAAI,EAAE,CAACc,eAAe,EAAE,CAAA;AAExE,EAAA,MAAMC,QAAQ,GAAG;AACflE,IAAAA,KAAK,EAAED,YAAY;AACnBG,IAAAA,MAAM,EAAED,aAAa;AACrB8D,IAAAA,YAAY,EAAEzC,KAAK,CAAC0C,KAAK,CAACtC,OAAO;IACjCmC,SAAS,EAAEvC,KAAK,CAACI,OAAO;IACxBtB,QAAQ,EAAEkB,KAAK,CAACnB,eAAe;IAC/BsB,YAAY,EAAEA,YAAY,CAACC,OAAO;AAClCyC,IAAAA,oBAAoB,EAAEX,aAAa;IACnCN,2BAA2B;IAC3BK,wBAAwB;AACxBa,IAAAA,SAAS,EAAExC,gBAAgB;AAC3B3C,IAAAA,YAAY,EAAE0C,mBAAmB;AACjC0C,IAAAA,sBAAsB,EAAExC,iBAAiB;AACzCyC,IAAAA,oBAAoB,EAAExC,sBAAsB;IAC5CyC,eAAe,EAAEnD,GAAG,CAACoD,iBAAiB;IACtCC,gBAAgB,EAAEtD,OAAO,CAACqD,iBAAiB;IAC3Cd,cAAc;AACdO,IAAAA,eAAAA;GACD,CAAA;;AAED;AACA,EAAA,MAAMS,IAAI,GAAG;IACXC,kBAAkB,EAAEjB,cAAc,CAACkB,IAAI;IACvCC,iBAAiB,EAAErB,aAAa,CAACoB,IAAI;IACrCE,mBAAmB,EAAEb,eAAe,CAACW,IAAI;IACzC5C,UAAU,EAAEzB,KAAK,CAACE,WAAW;IAC7BqD,SAAS,EAAEtD,MAAM,CAACC,WAAAA;GACnB,CAAA;;AAED;AACA,EAAA,MAAMsE,eAAkD,GAAG;AACzD,IAAA,GAAGL,IAAI;AACPM,IAAAA,gBAAgB,EAAE5D,GAAG,CAACZ,MAAM,CAACC,WAAW;AACxCwE,IAAAA,iBAAiB,EAAE7D,GAAG,CAACb,KAAK,CAACE,WAAAA;GAC9B,CAAA;AAED,EAAA,IAAIyE,sBAAsB,GAAGnD,aAAa,GACtCoD,mCAAmC,CAACjB,QAAQ,EAAEa,eAAe,CAAC,GAC9DK,4BAA4B,CAAClB,QAAQ,EAAEQ,IAAI,CAAC,CAAA;AAEhD,EAAA,IAAIrD,mBAAmB,EAAE;AACvB,IAAA,MAAMgE,kBAA4D,GAAG;AACnE,MAAA,GAAGnB,QAAQ;MACX7C,mBAAmB,EAAEA,mBAAmB,CAACiE,SAAS;MAClDC,eAAe,EAAExG,QAAQ,CAACE,YAAY,EAAE,CAACkE,IAAI,EAAE,CAACqC,UAAU,CAAC;QACzDvG,YAAY,EAAEA,YAAY,CAACyC,OAAO;QAClCL,mBAAmB,EAAEA,mBAAmB,CAACiE,SAAS;AAClDvE,QAAAA,QAAAA;OACD,CAAA;KACF,CAAA;AAEDmE,IAAAA,sBAAsB,GAAGO,sCAAsC,CAC7DJ,kBAAkB,EAClBX,IAAI,CACL,CAAA;AACH,GAAA;;AAEA;AACApD,EAAAA,KAAK,CAACoE,QAAQ,CAACC,OAAO,CAAC,CAAC;AAAEjE,IAAAA,OAAAA;AAAQ,GAAC,KAAK;AACtCwD,IAAAA,sBAAsB,CAACU,IAAI,CAACC,IAAI,CAAC;AAC/BC,MAAAA,MAAM,EAAEpE,OAAO;AACfqE,MAAAA,UAAU,EAAE,IAAI;AAChBC,MAAAA,QAAQ,EAAE,KAAA;AACZ,KAAC,CAAC,CAAA;;AAEF;IACA,IAAI,CAACxE,QAAQ,EAAE;AACb0D,MAAAA,sBAAsB,CAACU,IAAI,CAACC,IAAI,CAAC;QAC/BC,MAAM,EAAE/G,QAAQ,CAACyB,MAAM,EAAE,CAAC2C,IAAI,EAAE,CAACC,sBAAsB,CAAC;UACtDC,IAAI,EAAE5B,YAAY,CAACC,OAAO;AAC1B4B,UAAAA,KAAK,EAAE5B,OAAO;AACdX,UAAAA,QAAAA;AACF,SAAC,CAAC;AACFgF,QAAAA,UAAU,EAAE,IAAI;AAChBC,QAAAA,QAAQ,EAAE,KAAA;AACZ,OAAC,CAAC,CAAA;AACJ,KAAA;AACF,GAAC,CAAC,CAAA;;AAEF;EACA,MAAMC,kBAAkB,GAAG,CAAC5E,mBAAmB,CAAC,CAAC6E,MAAM,CAACF,QAAQ,CAAC,CAAA;;AAEjE;EACA,MAAMG,kBAAkB,GACtB,CAACtF,MAAM,CAACuF,YAAY,IAAI,IAAI,KAC5BC,OAAO,CAAClF,OAAO,CAACxB,cAAc,IAAIyB,GAAG,CAACzB,cAAc,IAAI,CAACoC,aAAa,CAAC,CAAA;EACzE,MAAMzB,UAAU,GAAGO,MAAM,CAACP,UAAU,IAAIvB,QAAQ,CAACuH,QAAQ,EAAE,CAAA;EAC3D,MAAMC,eAAe,GAAGxH,QAAQ,CAACE,YAAY,EAAE,CAACkE,IAAI,EAAE,CAACoD,eAAe,CAAC;IACrEC,iBAAiB,EAAErF,OAAO,CAACqD,iBAAiB;IAC5CiC,aAAa,EAAErF,GAAG,CAACoD,iBAAiB;AACpCzD,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEF,OACE2F,kBAAkB,CAACC,IAAI,EAA6B,CACjDC,WAAW,CAAC5F,KAAK,CAAC,CAClB6F,UAAU,CAAC;IACVpC,gBAAgB,EAAEtD,OAAO,CAACqD,iBAAiB;IAC3CD,eAAe,EAAEnD,GAAG,CAACoD,iBAAiB;AACtCxE,IAAAA,KAAK,EAAED,YAAY;AACnBG,IAAAA,MAAM,EAAED,aAAa;IACrBG,QAAQ,EAAEkB,KAAK,CAACnB,eAAe;AAC/BG,IAAAA,UAAU,EAAE6F,kBAAkB,GAAG7F,UAAU,CAACgF,SAAS,GAAG,IAAI;AAC5D9F,IAAAA,OAAO,EAAE2G,kBAAkB,GAAGI,eAAe,GAAG,IAAI;IACpDhG,KAAK;AACLC,IAAAA,MAAAA;GACD,CAAA;;AAED;AAAA,GACCsG,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAE7B,sBAAsB;AACnC8B,IAAAA,OAAO,EAAEf,kBAAkB;AAC3BgB,IAAAA,GAAG,EAAEpG,MAAM,CAACqG,cAAc,IAAI,aAAA;GAC/B,CAAA;;AAED;GACCC,IAAI,CAAChB,kBAAkB,EAAGiB,OAAO,IAChCA,OAAO,CAACN,GAAG,CAAC;IACVC,WAAW,EAAEM,qCAAqC,CAChD;MACEd,eAAe;MACfe,cAAc,EAAEnG,OAAO,CAACxB,cAAqB;MAC7C4H,UAAU,EAAEnG,GAAG,CAACzB,cAAqB;MACrCW,UAAU,EAAEA,UAAU,CAACgF,SAAS;AAChCyB,MAAAA,WAAW,EAAES,0BAAAA;AACf,KAAC,EACD;MAAEC,mBAAmB,EAAElB,eAAe,CAAC3B,IAAAA;AAAK,KAAC,CAC9C;IACDoC,OAAO,EAAE,CAAC1G,UAAU,CAAC;AACrB2G,IAAAA,GAAG,EAAE,sBAAA;AACP,GAAC,CAAC,CACH,CAAA;AAEP;;;;"}