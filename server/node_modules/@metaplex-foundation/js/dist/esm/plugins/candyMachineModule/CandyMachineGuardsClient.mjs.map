{"version":3,"file":"CandyMachineGuardsClient.mjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachineGuardsClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport { AccountMeta } from '@solana/web3.js';\nimport { CANDY_GUARD_LABEL_SIZE } from './constants';\nimport {\n  GuardGroupLabelTooLongError,\n  GuardGroupRequiredError,\n  GuardNotEnabledError,\n  GuardRouteNotSupportedError,\n  SelectedGuardGroupDoesNotExistError,\n  UnregisteredCandyGuardError,\n} from './errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsMintSettings,\n  CandyGuardsRemainingAccount,\n  CandyGuardsRouteSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardRouteSettings,\n  DefaultCandyGuardSettings,\n} from './guards';\nimport { CandyGuard } from './models';\nimport { CandyGuardProgram } from './programs';\nimport { Option, padEmptyChars, removeEmptyChars } from '@/utils';\nimport {\n  deserialize,\n  deserializeFeatureFlags,\n  Program,\n  PublicKey,\n  serialize,\n  serializeFeatureFlags,\n  Signer,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This client enables us to register custom guards from\n * custom Candy Guard programs and interact with them.\n *\n * @see {@link CandyGuardClient}\n * @group Module\n */\nexport class CandyMachineGuardsClient {\n  readonly guards: CandyGuardManifest<any, any, any>[] = [];\n\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Registers one or many guards by providing their manifest. */\n  register(...guard: CandyGuardManifest<any, any, any>[]) {\n    this.guards.push(...guard);\n  }\n\n  /** Gets the manifest of a guard using its name. */\n  get(name: string): CandyGuardManifest<any, any, any> {\n    const guard = this.guards.find((guard) => guard.name === name);\n\n    if (!guard) {\n      throw new UnregisteredCandyGuardError(name);\n    }\n\n    return guard;\n  }\n\n  /** Gets all registered guard manifests. */\n  all(): CandyGuardManifest<any, any, any>[] {\n    return this.guards;\n  }\n\n  /**\n   * Gets all guard manifests for a registered Candy Guard program.\n   *\n   * It fails if the manifest of any guard expected by the program\n   * is not registered. Manifests are returned in the order in which\n   * they are defined on the `availableGuards` property of the program.\n   */\n  forProgram(\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram =\n      typeof program === 'object' && 'availableGuards' in program\n        ? program\n        : this.metaplex.programs().get<CandyGuardProgram>(program);\n\n    return candyGuardProgram.availableGuards.map((name) => this.get(name));\n  }\n\n  /**\n   * Gets all guard manifests for the registered Candy Guard program.\n   *\n   * @see {@link CandyMachineGuardsClient.forProgram}\n   */\n  forCandyGuardProgram(\n    programs: Program[] = []\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram = this.metaplex.programs().getCandyGuard(programs);\n\n    return this.forProgram(candyGuardProgram);\n  }\n\n  /** Serializes the settings of all guards and groups. */\n  serializeSettings<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    guards: Partial<T>,\n    groups: { label: string; guards: Partial<T> }[] = [],\n    programs: Program[] = []\n  ): Buffer {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    this.assertGuardsAreRegistered<T>(\n      guards,\n      groups,\n      availableGuards.map(({ name }) => name)\n    );\n\n    const serializeSet = (set: Partial<T>): Buffer => {\n      const { features, buffer } = availableGuards.reduce(\n        (acc, guard, index) => {\n          const value = set[guard.name] ?? null;\n          acc.features[index] = Boolean(value);\n          if (value) {\n            acc.buffer = Buffer.concat([\n              acc.buffer,\n              serialize(value, guard.settingsSerializer),\n            ]);\n          }\n          return acc;\n        },\n        {\n          features: [] as boolean[],\n          buffer: Buffer.from([]),\n        }\n      );\n\n      const serializedfeatures = serializeFeatureFlags(features, 8, true);\n      serializedfeatures.reverse();\n\n      return Buffer.concat([serializedfeatures, buffer]);\n    };\n\n    let buffer = serializeSet(guards);\n\n    const groupCountBuffer = Buffer.alloc(4);\n    beet.u32.write(groupCountBuffer, 0, groups.length);\n    buffer = Buffer.concat([buffer, groupCountBuffer]);\n\n    groups.forEach((group) => {\n      if (group.label.length > CANDY_GUARD_LABEL_SIZE) {\n        throw new GuardGroupLabelTooLongError(\n          group.label,\n          CANDY_GUARD_LABEL_SIZE\n        );\n      }\n      const labelBuffer = Buffer.alloc(CANDY_GUARD_LABEL_SIZE);\n      labelBuffer.write(\n        padEmptyChars(group.label, CANDY_GUARD_LABEL_SIZE),\n        0,\n        CANDY_GUARD_LABEL_SIZE,\n        'utf8'\n      );\n      buffer = Buffer.concat([buffer, labelBuffer, serializeSet(group.guards)]);\n    });\n\n    return buffer;\n  }\n\n  /** Deserializes the settings of all guards and groups. */\n  deserializeSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    buffer: Buffer,\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): { guards: T; groups: { label: string; guards: T }[] } {\n    const availableGuards = this.forProgram(program);\n    const deserializeSet = () => {\n      const serializedFeatures = buffer.slice(0, 8);\n      serializedFeatures.reverse();\n      const features = deserializeFeatureFlags(serializedFeatures, 64, true);\n      buffer = buffer.slice(8);\n\n      return availableGuards.reduce((acc, guard, index) => {\n        const isEnabled = features[index] ?? false;\n        acc[guard.name] = null;\n        if (!isEnabled) return acc;\n\n        const [settings] = deserialize(buffer, guard.settingsSerializer);\n        buffer = buffer.slice(guard.settingsBytes);\n        acc[guard.name] = settings;\n        return acc;\n      }, {} as CandyGuardsSettings) as T;\n    };\n\n    const guards: T = deserializeSet();\n    const groups: { label: string; guards: T }[] = [];\n    const groupsCount = beet.u32.read(buffer, 0);\n    buffer = buffer.slice(4);\n\n    for (let i = 0; i < groupsCount; i++) {\n      const label = removeEmptyChars(\n        buffer.slice(0, CANDY_GUARD_LABEL_SIZE).toString('utf8')\n      );\n      buffer = buffer.slice(CANDY_GUARD_LABEL_SIZE);\n      groups.push({ label, guards: deserializeSet() });\n    }\n\n    return { guards, groups };\n  }\n\n  /**\n   * Resolves the set of settings that should be used when minting.\n   *\n   * If no group exists, the `guards` settings will be used.\n   * Otherwise, the `guards` settings will act as default settings and\n   * the settings of the selected group will override them.\n   */\n  resolveGroupSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    guards: T,\n    groups: { label: string; guards: T }[] = [],\n    groupLabel: Option<string>\n  ): T {\n    const availableGroups = groups.map((group) => group.label);\n    const activeGroup = groups.find((group) => group.label === groupLabel);\n    if (groupLabel && !activeGroup) {\n      throw new SelectedGuardGroupDoesNotExistError(\n        groupLabel,\n        availableGroups\n      );\n    }\n\n    if (groups.length === 0) {\n      return guards;\n    }\n\n    if (!activeGroup) {\n      throw new GuardGroupRequiredError(availableGroups);\n    }\n\n    const activeGroupGuardsWithoutNullGuards = Object.fromEntries(\n      Object.entries(activeGroup.guards).filter(([, v]) => v != null)\n    ) as Partial<T>;\n\n    return {\n      ...guards,\n      ...activeGroupGuardsWithoutNullGuards,\n    };\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * all relevant guards for the mint instruction.\n   */\n  parseMintSettings<\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    MintSettings extends CandyGuardsMintSettings = {}\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    owner: PublicKey,\n    payer: Signer,\n    mint: Signer,\n    guardMintSettings: Partial<MintSettings>,\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const initialAccumulator = {\n      arguments: Buffer.from([]),\n      accountMetas: [] as AccountMeta[],\n      signers: [] as Signer[],\n    };\n\n    return availableGuards.reduce((acc, guard) => {\n      const settings = guardSettings[guard.name] ?? null;\n      const mintSettings = guardMintSettings[guard.name] ?? null;\n      if (!guard.mintSettingsParser || !settings) return acc;\n\n      const parsedSettings = guard.mintSettingsParser({\n        metaplex: this.metaplex,\n        settings,\n        mintSettings,\n        owner,\n        payer,\n        mint,\n        candyMachine,\n        candyGuard: candyGuard.address,\n        candyGuardAuthority: candyGuard.authorityAddress,\n        programs,\n      });\n\n      const accounts = this.getAccountMetas(parsedSettings.remainingAccounts);\n      const signers = this.getSigners(parsedSettings.remainingAccounts);\n      acc.arguments = Buffer.concat([acc.arguments, parsedSettings.arguments]);\n      acc.accountMetas.push(...accounts);\n      acc.signers.push(...signers);\n      return acc;\n    }, initialAccumulator);\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * the requested guard for the route instruction.\n   */\n  parseRouteSettings<\n    Guard extends keyof RouteSettings & string,\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    payer: Signer,\n    guard: Guard,\n    routeSettings: RouteSettings[Guard],\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const guardManifest = this.get(guard);\n    if (!guardManifest.routeSettingsParser) {\n      throw new GuardRouteNotSupportedError(guard);\n    }\n\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const settings = guardSettings[guard] ?? null;\n    if (!settings) {\n      throw new GuardNotEnabledError(guard, groupLabel);\n    }\n\n    const parsedSettings = guardManifest.routeSettingsParser({\n      metaplex: this.metaplex,\n      settings,\n      routeSettings,\n      payer,\n      candyMachine,\n      candyGuard: candyGuard.address,\n      candyGuardAuthority: candyGuard.authorityAddress,\n      programs,\n    });\n\n    return {\n      arguments: parsedSettings.arguments,\n      accountMetas: this.getAccountMetas(parsedSettings.remainingAccounts),\n      signers: this.getSigners(parsedSettings.remainingAccounts),\n    };\n  }\n\n  /** @internal */\n  protected getAccountMetas(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): AccountMeta[] {\n    return remainingAccounts.map((account) => ({\n      pubkey: account.isSigner ? account.address.publicKey : account.address,\n      isSigner: account.isSigner,\n      isWritable: account.isWritable,\n    }));\n  }\n\n  /** @internal */\n  protected getSigners(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): Signer[] {\n    return remainingAccounts\n      .filter((account) => account.isSigner)\n      .map((account) => account.address as Signer);\n  }\n\n  /** @internal */\n  protected assertGuardsAreRegistered<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    guards: Partial<T>,\n    groups: { label: string; guards: Partial<T> }[],\n    availableGuardNames: string[]\n  ): void {\n    const guardNames = new Set<string>();\n    const addGuardSet = (guardSet: Partial<T>) => {\n      Object.keys(guardSet).forEach((name) => {\n        if (!!guardSet[name]) {\n          guardNames.add(name);\n        }\n      });\n    };\n\n    addGuardSet(guards);\n    groups.forEach((group) => addGuardSet(group.guards));\n\n    guardNames.forEach((name) => {\n      if (!availableGuardNames.includes(name)) {\n        throw new UnregisteredCandyGuardError(name);\n      }\n    });\n  }\n}\n"],"names":["CandyMachineGuardsClient","constructor","metaplex","register","guard","guards","push","get","name","find","UnregisteredCandyGuardError","all","forProgram","program","candyGuardProgram","programs","availableGuards","map","forCandyGuardProgram","getCandyGuard","serializeSettings","groups","assertGuardsAreRegistered","serializeSet","set","features","buffer","reduce","acc","index","value","Boolean","Buffer","concat","serialize","settingsSerializer","from","serializedfeatures","serializeFeatureFlags","reverse","groupCountBuffer","alloc","beet","u32","write","length","forEach","group","label","CANDY_GUARD_LABEL_SIZE","GuardGroupLabelTooLongError","labelBuffer","padEmptyChars","deserializeSettings","deserializeSet","serializedFeatures","slice","deserializeFeatureFlags","isEnabled","settings","deserialize","settingsBytes","groupsCount","read","i","removeEmptyChars","toString","resolveGroupSettings","groupLabel","availableGroups","activeGroup","SelectedGuardGroupDoesNotExistError","GuardGroupRequiredError","activeGroupGuardsWithoutNullGuards","Object","fromEntries","entries","filter","v","parseMintSettings","candyMachine","candyGuard","owner","payer","mint","guardMintSettings","guardSettings","initialAccumulator","arguments","accountMetas","signers","mintSettings","mintSettingsParser","parsedSettings","address","candyGuardAuthority","authorityAddress","accounts","getAccountMetas","remainingAccounts","getSigners","parseRouteSettings","routeSettings","guardManifest","routeSettingsParser","GuardRouteNotSupportedError","GuardNotEnabledError","account","pubkey","isSigner","publicKey","isWritable","availableGuardNames","guardNames","Set","addGuardSet","guardSet","keys","add","includes"],"mappings":"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"}