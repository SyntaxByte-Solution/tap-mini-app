{"version":3,"file":"AuctionHouse.mjs","sources":["../../../../../src/plugins/auctionHouseModule/models/AuctionHouse.ts"],"sourcesContent":["import { AuthorityScope } from '@metaplex-foundation/mpl-auction-house';\nimport type { PublicKey } from '@solana/web3.js';\nimport { AuctioneerAccount, AuctionHouseAccount } from '../accounts';\nimport { Mint } from '../../tokenModule';\nimport { Pda } from '@/types';\nimport { assert } from '@/utils';\n\nexport type AuctionHouse = Readonly<\n  {\n    /** A model identifier to distinguish models in the SDK. */\n    model: 'auctionHouse';\n\n    /** The address of the Auction House. */\n    address: Pda;\n\n    /** The address of the Auction House creator. */\n    creatorAddress: PublicKey;\n\n    /** The address of the authority that is allowed to manage this Auction House. */\n    authorityAddress: PublicKey;\n\n    /**\n     * The address of the Auction House treasury mint.\n     * The token you accept as the purchase currency.\n     * By default Auction House uses the `WRAPPED_SOL_MINT` treasury mint.\n     */\n    treasuryMint: Mint;\n\n    /** The account that used to pay the fees for selling and buying. */\n    feeAccountAddress: Pda;\n\n    /** The account that receives the AuctionHouse fees. */\n    treasuryAccountAddress: Pda;\n\n    /** The account that is marked as a destination of withdrawal from the fee account. */\n    feeWithdrawalDestinationAddress: PublicKey;\n\n    /** The account that is marked as a destination of withdrawal from the treasury account. */\n    treasuryWithdrawalDestinationAddress: PublicKey;\n\n    /** The share of the sale the auction house takes on all NFTs as a fee. */\n    sellerFeeBasisPoints: number;\n\n    /** This allows the centralised authority to gate which NFT can be listed, bought and sold. */\n    requiresSignOff: boolean;\n\n    /**\n     * Is intended to be used with the Auction House that requires sign off.\n     * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n     * The Auction House can then change the price to match a matching Bid that is greater than 0.\n     */\n    canChangeSalePrice: boolean;\n\n    /**\n     * If this is true, then it means that Auction House accepts SOL as the purchase currency.\n     * In other case, different SPL token is set as the purchase currency.\n     */\n    isNative: boolean;\n\n    /**\n     * The list of scopes available to the user in the Auction House.\n     * For example Bid, List, Execute Sale.\n     */\n    scopes: AuthorityScope[];\n  } & (\n    | {\n        /** This Auction House doesn't have Auctioneer. */\n        hasAuctioneer: false;\n      }\n    | {\n        /**\n         * This Auction House has Auctioneer enabled.\n         * It allows timed auctions, minimum bid prices, and highest bid tracking.\n         */\n        hasAuctioneer: true;\n\n        auctioneer: {\n          /** The address of Auctioneer instance. */\n          address: PublicKey;\n\n          /** The address of Auctioneer Authority. */\n          authority: PublicKey;\n        };\n      }\n  )\n>;\n\n/** @group Model Helpers */\nexport const isAuctionHouse = (value: any): value is AuctionHouse =>\n  typeof value === 'object' && value.model === 'auctionHouse';\n\n/** @group Model Helpers */\nexport function assertAuctionHouse(value: any): asserts value is AuctionHouse {\n  assert(isAuctionHouse(value), `Expected AuctionHouse type`);\n}\n\nexport type AuctioneerAuctionHouse = AuctionHouse & {\n  hasAuctioneer: true;\n};\n\n/** @group Model Helpers */\nexport const isAuctioneerAuctionHouse = (\n  value: any\n): value is AuctioneerAuctionHouse =>\n  isAuctionHouse(value) && value.hasAuctioneer;\n\n/** @group Model Helpers */\nexport function assertAuctioneerAuctionHouse(\n  value: any\n): asserts value is AuctioneerAuctionHouse {\n  assert(\n    isAuctioneerAuctionHouse(value),\n    `Expected AuctioneerAuctionHouse type`\n  );\n}\n\n/** @group Model Helpers */\nexport const toAuctionHouse = (\n  auctionHouseAccount: AuctionHouseAccount,\n  treasuryMint: Mint,\n  auctioneerAccount?: AuctioneerAccount | null\n): AuctionHouse => {\n  if (auctionHouseAccount.data.hasAuctioneer) {\n    assert(\n      !!auctioneerAccount,\n      'Auctioneer account is required when hasAuctioneer is true'\n    );\n    assert(\n      !!auctioneerAccount &&\n        auctioneerAccount.data.auctionHouse.equals(\n          auctionHouseAccount.publicKey\n        ),\n      'Auctioneer account does not match the AuctionHouse account'\n    );\n  }\n\n  return {\n    model: 'auctionHouse',\n    address: new Pda(\n      auctionHouseAccount.publicKey,\n      auctionHouseAccount.data.bump\n    ),\n    creatorAddress: auctionHouseAccount.data.creator,\n    authorityAddress: auctionHouseAccount.data.authority,\n    treasuryMint,\n    feeAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseFeeAccount,\n      auctionHouseAccount.data.feePayerBump\n    ),\n    treasuryAccountAddress: new Pda(\n      auctionHouseAccount.data.auctionHouseTreasury,\n      auctionHouseAccount.data.treasuryBump\n    ),\n    feeWithdrawalDestinationAddress:\n      auctionHouseAccount.data.feeWithdrawalDestination,\n    treasuryWithdrawalDestinationAddress:\n      auctionHouseAccount.data.treasuryWithdrawalDestination,\n    sellerFeeBasisPoints: auctionHouseAccount.data.sellerFeeBasisPoints,\n    requiresSignOff: auctionHouseAccount.data.requiresSignOff,\n    canChangeSalePrice: auctionHouseAccount.data.canChangeSalePrice,\n    isNative: treasuryMint.isWrappedSol,\n    scopes: auctionHouseAccount.data.scopes.reduce<number[]>(\n      (acc, isAllowed, index) => (isAllowed ? [...acc, index] : acc),\n      [] as number[]\n    ),\n\n    // Auctioneer.\n    ...(auctionHouseAccount.data.hasAuctioneer && auctioneerAccount\n      ? {\n          hasAuctioneer: true,\n          auctioneer: {\n            address: auctioneerAccount.publicKey,\n            authority: auctioneerAccount.data.auctioneerAuthority,\n          },\n        }\n      : { hasAuctioneer: false }),\n  };\n};\n"],"names":["isAuctionHouse","value","model","assertAuctionHouse","assert","isAuctioneerAuctionHouse","hasAuctioneer","assertAuctioneerAuctionHouse","toAuctionHouse","auctionHouseAccount","treasuryMint","auctioneerAccount","data","auctionHouse","equals","publicKey","address","Pda","bump","creatorAddress","creator","authorityAddress","authority","feeAccountAddress","auctionHouseFeeAccount","feePayerBump","treasuryAccountAddress","auctionHouseTreasury","treasuryBump","feeWithdrawalDestinationAddress","feeWithdrawalDestination","treasuryWithdrawalDestinationAddress","treasuryWithdrawalDestination","sellerFeeBasisPoints","requiresSignOff","canChangeSalePrice","isNative","isWrappedSol","scopes","reduce","acc","isAllowed","index","auctioneer","auctioneerAuthority"],"mappings":"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"}