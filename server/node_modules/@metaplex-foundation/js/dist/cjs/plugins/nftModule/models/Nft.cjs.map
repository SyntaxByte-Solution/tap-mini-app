{"version":3,"file":"Nft.cjs","sources":["../../../../../src/plugins/nftModule/models/Nft.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\nimport type { NftEdition } from './NftEdition';\nimport { isSftWithToken, SftWithToken, toSft, toSftWithToken } from './Sft';\nimport { assert } from '@/utils';\nimport type { Pda } from '@/types';\n\n/**\n * This model captures all the relevant information about an NFT\n * in the Solana blockchain. That includes the NFT's metadata account,\n * its mint account, its edition account and its off-chain JSON metadata.\n *\n * @group Models\n */\nexport type Nft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> & {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nft';\n\n  /** The mint address of the NFT. */\n  readonly address: PublicKey;\n\n  /** The metadata address of the NFT. */\n  readonly metadataAddress: Pda;\n\n  /** The mint account of the NFT. */\n  readonly mint: Mint;\n\n  /**\n   * Defines whether the NFT is an original edition or a\n   * printed edition and provides additional information accordingly.\n   */\n  readonly edition: NftEdition;\n};\n\n/** @group Model Helpers */\nexport const isNft = (value: any): value is Nft =>\n  typeof value === 'object' && value.model === 'nft';\n\n/** @group Model Helpers */\nexport function assertNft(value: any): asserts value is Nft {\n  assert(isNft(value), `Expected Nft model`);\n}\n\n/** @group Model Helpers */\nexport const toNft = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition\n): Nft => ({\n  ...toSft(metadata, mint),\n  model: 'nft',\n  edition,\n});\n\n/** @group Models */\nexport type NftWithToken = Nft & { token: Token };\n\n/** @group Model Helpers */\nexport const isNftWithToken = (value: any): value is NftWithToken =>\n  isNft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertNftWithToken(value: any): asserts value is NftWithToken {\n  assert(isNftWithToken(value), `Expected Nft model with token`);\n}\n\n/** @group Model Helpers */\nexport function assertNftOrSftWithToken(\n  value: any\n): asserts value is NftWithToken | SftWithToken {\n  assert(\n    isNftWithToken(value) || isSftWithToken(value),\n    `Expected Nft or Sft model with token`\n  );\n}\n\n/** @group Model Helpers */\nexport const toNftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  edition: NftEdition,\n  token: Token\n): NftWithToken => ({\n  ...toSftWithToken(metadata, mint, token),\n  model: 'nft',\n  edition,\n});\n"],"names":["isNft","value","model","assertNft","assert","toNft","metadata","mint","edition","toSft","isNftWithToken","assertNftWithToken","assertNftOrSftWithToken","isSftWithToken","toNftWithToken","token","toSftWithToken"],"mappings":";;;;;;;AAmCA;AACaA,MAAAA,KAAK,GAAIC,KAAU,IAC9B,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,KAAK,MAAK;;AAEpD;AACO,SAASC,SAAS,CAACF,KAAU,EAAwB;AAC1DG,EAAAA,iBAAM,CAACJ,KAAK,CAACC,KAAK,CAAC,EAAG,oBAAmB,CAAC,CAAA;AAC5C,CAAA;;AAEA;AACO,MAAMI,KAAK,GAAG,CACnBC,QAAkB,EAClBC,IAAU,EACVC,OAAmB,MACV;AACT,EAAA,GAAGC,SAAK,CAACH,QAAQ,EAAEC,IAAI,CAAC;AACxBL,EAAAA,KAAK,EAAE,KAAK;AACZM,EAAAA,OAAAA;AACF,CAAC,EAAC;;AAEF;;AAGA;AACaE,MAAAA,cAAc,GAAIT,KAAU,IACvCD,KAAK,CAACC,KAAK,CAAC,IAAI,OAAO,IAAIA,MAAK;;AAElC;AACO,SAASU,kBAAkB,CAACV,KAAU,EAAiC;AAC5EG,EAAAA,iBAAM,CAACM,cAAc,CAACT,KAAK,CAAC,EAAG,+BAA8B,CAAC,CAAA;AAChE,CAAA;;AAEA;AACO,SAASW,uBAAuB,CACrCX,KAAU,EACoC;AAC9CG,EAAAA,iBAAM,CACJM,cAAc,CAACT,KAAK,CAAC,IAAIY,kBAAc,CAACZ,KAAK,CAAC,EAC7C,CAAA,oCAAA,CAAqC,CACvC,CAAA;AACH,CAAA;;AAEA;AACO,MAAMa,cAAc,GAAG,CAC5BR,QAAkB,EAClBC,IAAU,EACVC,OAAmB,EACnBO,KAAY,MACM;AAClB,EAAA,GAAGC,kBAAc,CAACV,QAAQ,EAAEC,IAAI,EAAEQ,KAAK,CAAC;AACxCb,EAAAA,KAAK,EAAE,KAAK;AACZM,EAAAA,OAAAA;AACF,CAAC;;;;;;;;;;"}