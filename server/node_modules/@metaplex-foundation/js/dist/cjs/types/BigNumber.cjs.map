{"version":3,"file":"BigNumber.cjs","sources":["../../../src/types/BigNumber.ts"],"sourcesContent":["import type { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport { default as assert } from '@/utils/assert';\nimport type { Opaque, Option } from '@/utils';\n\nexport type BigNumber = Opaque<BN, 'BigNumber'>;\nexport type BigNumberValues =\n  | number\n  | string\n  | number[]\n  | Uint8Array\n  | Buffer\n  | BN;\n\nexport const toBigNumber = (\n  value: BigNumberValues,\n  endian?: BN.Endianness\n): BigNumber => {\n  return new BN(value, endian) as BigNumber;\n};\n\nexport const toOptionBigNumber = (\n  value: Option<BigNumberValues>\n): Option<BigNumber> => {\n  return value === null ? null : toBigNumber(value);\n};\n\nexport const isBigNumber = (value: any): value is BigNumber => {\n  return value?.__opaque__ === 'BigNumber';\n};\n\nexport function assertBigNumber(value: any): asserts value is BigNumber {\n  assert(isBigNumber(value), 'Expected BigNumber type');\n}\n"],"names":["toBigNumber","value","endian","BN","toOptionBigNumber","isBigNumber","__opaque__","assertBigNumber","assert"],"mappings":";;;;;;;;;;;MAcaA,WAAW,GAAG,CACzBC,KAAsB,EACtBC,MAAsB,KACR;AACd,EAAA,OAAO,IAAIC,sBAAE,CAACF,KAAK,EAAEC,MAAM,CAAC,CAAA;AAC9B,EAAC;AAEYE,MAAAA,iBAAiB,GAC5BH,KAA8B,IACR;EACtB,OAAOA,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGD,WAAW,CAACC,KAAK,CAAC,CAAA;AACnD,EAAC;AAEYI,MAAAA,WAAW,GAAIJ,KAAU,IAAyB;AAC7D,EAAA,OAAOA,KAAK,EAAEK,UAAU,KAAK,WAAW,CAAA;AAC1C,EAAC;AAEM,SAASC,eAAe,CAACN,KAAU,EAA8B;AACtEO,EAAAA,iBAAM,CAACH,WAAW,CAACJ,KAAK,CAAC,EAAE,yBAAyB,CAAC,CAAA;AACvD;;;;;;;"}