{"version":3,"file":"findNftByToken.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByToken.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toTokenAccount } from '../../tokenModule';\nimport { NftWithToken, SftWithToken } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByTokenOperation' as const;\n\n/**\n * Finds an NFT or an SFT by its token address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByToken({ token };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftByTokenOperation =\n  useOperation<FindNftByTokenOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByTokenOperation = Operation<\n  typeof Key,\n  FindNftByTokenInput,\n  FindNftByTokenOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByTokenInput = {\n  /** The address of the token account. */\n  token: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByTokenOutput = NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByTokenOperationHandler: OperationHandler<FindNftByTokenOperation> =\n  {\n    handle: async (\n      operation: FindNftByTokenOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftByTokenOutput> => {\n      const token = toTokenAccount(\n        await metaplex.rpc().getAccount(operation.input.token)\n      );\n      scope.throwIfCanceled();\n\n      const asset = await metaplex.nfts().findByMint(\n        {\n          ...operation.input,\n          mintAddress: token.data.mint,\n          tokenAddress: operation.input.token,\n        },\n        scope\n      );\n\n      return asset as FindNftByTokenOutput;\n    },\n  };\n"],"names":["Key","findNftByTokenOperation","useOperation","findNftByTokenOperationHandler","handle","operation","metaplex","scope","token","toTokenAccount","rpc","getAccount","input","throwIfCanceled","asset","nfts","findByMint","mintAddress","data","mint","tokenAddress"],"mappings":";;;;;;;AAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,yBAAkC,CAAA;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,uBAAuB,GAClCC,sBAAY,CAA0BF,GAAG,EAAC;;AAE5C;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACO,MAAMG,8BAAyE,GACpF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAkC,EAClCC,QAAkB,EAClBC,KAAqB,KACa;AAClC,IAAA,MAAMC,KAAK,GAAGC,uBAAc,CAC1B,MAAMH,QAAQ,CAACI,GAAG,EAAE,CAACC,UAAU,CAACN,SAAS,CAACO,KAAK,CAACJ,KAAK,CAAC,CACvD,CAAA;IACDD,KAAK,CAACM,eAAe,EAAE,CAAA;IAEvB,MAAMC,KAAK,GAAG,MAAMR,QAAQ,CAACS,IAAI,EAAE,CAACC,UAAU,CAC5C;MACE,GAAGX,SAAS,CAACO,KAAK;AAClBK,MAAAA,WAAW,EAAET,KAAK,CAACU,IAAI,CAACC,IAAI;AAC5BC,MAAAA,YAAY,EAAEf,SAAS,CAACO,KAAK,CAACJ,KAAAA;KAC/B,EACDD,KAAK,CACN,CAAA;AAED,IAAA,OAAOO,KAAK,CAAA;AACd,GAAA;AACF;;;;;"}