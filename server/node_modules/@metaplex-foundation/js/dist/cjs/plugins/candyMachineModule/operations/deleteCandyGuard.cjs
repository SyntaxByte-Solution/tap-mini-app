'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'DeleteCandyGuardOperation';

/**
 * Deletes a Candy Guard account by withdrawing its rent-exempt balance.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .deleteCandyGuard({
 *     candyGuard,
 *     authority,
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const deleteCandyGuardOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const deleteCandyGuardOperationHandler = {
  async handle(operation, metaplex, scope) {
    return deleteCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Deletes a Candy Guard account by withdrawing its rent-exempt balance.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .candyMachines()
 *   .builders()
 *   .deleteCandyGuard({
 *     candyGuard,
 *     authority,
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const deleteCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    authority = metaplex.identity()
  } = params;
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).add({
    instruction: mplCandyGuard.createWithdrawInstruction({
      candyGuard,
      authority: authority.publicKey
    }, candyGuardProgram.address),
    signers: [authority],
    key: params.deleteCandyGuardInstructionKey ?? 'deleteCandyGuard'
  });
};

exports.deleteCandyGuardBuilder = deleteCandyGuardBuilder;
exports.deleteCandyGuardOperation = deleteCandyGuardOperation;
exports.deleteCandyGuardOperationHandler = deleteCandyGuardOperationHandler;
//# sourceMappingURL=deleteCandyGuard.cjs.map
