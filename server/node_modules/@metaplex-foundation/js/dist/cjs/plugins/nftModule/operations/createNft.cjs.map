{"version":3,"file":"createNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/createNft.ts"],"sourcesContent":["import { TokenStandard, Uses } from '@metaplex-foundation/mpl-token-metadata';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { assertNftWithToken, NftWithToken } from '../models';\nimport {\n  createCompressedNftBuilder,\n  CreateCompressedNftBuilderParams,\n} from './createCompressedNft';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  CreatorInput,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  token,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateNftOperation' as const;\n\n/**\n * Creates a new NFT.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .nfts()\n *   .create({\n *     name: 'My NFT',\n *     uri: 'https://example.com/my-nft',\n *     sellerFeeBasisPoints: 250, // 2.5%\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createNftOperation = useOperation<CreateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateNftOperation = Operation<\n  typeof Key,\n  CreateNftInput,\n  CreateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateNftInput = {\n  /**\n   * The authority that will be able to make changes\n   * to the created NFT.\n   *\n   * This is required as a Signer because creating the master\n   * edition account requires the update authority to sign\n   * the transaction.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n\n  /**\n   * The authority that is currently allowed to mint new tokens\n   * for the provided mint account.\n   *\n   * Note that this is only relevant if the `useExistingMint` parameter\n   * if provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: Signer;\n\n  /**\n   * The address of the new mint account as a Signer.\n   * This is useful if you already have a generated Keypair\n   * for the mint account of the NFT to create.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  useNewMint?: Signer;\n\n  /**\n   * The address of the existing mint account that should be converted\n   * into an NFT. The account at this address should have the right\n   * requirements to become an NFT, e.g. its supply should contains\n   * exactly 1 token.\n   *\n   * @defaultValue Defaults to creating a new mint account with the\n   * right requirements.\n   */\n  useExistingMint?: PublicKey;\n\n  /**\n   * Whether or not we should mint one token for the new NFT.\n   *\n   * @defaultValue `true`\n   */\n  mintTokens?: boolean;\n\n  /**\n   * The owner of the NFT to create.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The token account linking the mint account and the token owner\n   * together. By default, the associated token account will be used.\n   *\n   * If the provided token account does not exist, it must be passed as\n   * a Signer as we will need to create it before creating the NFT.\n   *\n   * @defaultValue Defaults to creating a new associated token account\n   * using the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey | Signer;\n\n  /**\n   * Describes the asset class of the token.\n   * It can be one of the following:\n   * - `TokenStandard.NonFungible`: A traditional NFT (master edition).\n   * - `TokenStandard.FungibleAsset`: A fungible token with metadata that can also have attributes.\n   * - `TokenStandard.Fungible`: A fungible token with simple metadata.\n   * - `TokenStandard.NonFungibleEdition`: A limited edition NFT \"printed\" from a master edition.\n   * - `TokenStandard.ProgrammableNonFungible`: A master edition NFT with programmable configuration.\n   *\n   * @defaultValue `TokenStandard.NonFungible`\n   */\n  tokenStandard?: TokenStandard;\n\n  /** The URI that points to the JSON metadata of the asset. */\n  uri: string;\n\n  /** The on-chain name of the asset, e.g. \"My NFT #123\". */\n  name: string;\n\n  /**\n   * The royalties in percent basis point (i.e. 250 is 2.5%) that\n   * should be paid to the creators on each secondary sale.\n   */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * The on-chain symbol of the asset, stored in the Metadata account.\n   * E.g. \"MYNFT\".\n   *\n   * @defaultValue `\"\"`\n   */\n  symbol?: string;\n\n  /**\n   * {@inheritDoc CreatorInput}\n   * @defaultValue\n   * Defaults to using the provided `updateAuthority` as the only verified creator.\n   * ```ts\n   * [{\n   *   address: updateAuthority.publicKey,\n   *   authority: updateAuthority,\n   *   share: 100,\n   * }]\n   * ```\n   */\n  creators?: CreatorInput[];\n\n  /**\n   * Whether or not the NFT's metadata is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   *\n   * @defaultValue `true`\n   */\n  isMutable?: boolean;\n\n  /**\n   * Whether or not selling this asset is considered a primary sale.\n   * Once flipped from `false` to `true`, this field is immutable and\n   * all subsequent sales of this asset will be considered secondary.\n   *\n   * @defaultValue `false`\n   */\n  primarySaleHappened?: boolean;\n\n  /**\n   * The maximum supply of printed editions.\n   * When this is `null`, an unlimited amount of editions\n   * can be printed from the original edition.\n   *\n   * @defaultValue `toBigNumber(0)`\n   */\n  maxSupply?: Option<BigNumber>;\n\n  /**\n   * When this field is not `null`, it indicates that the NFT\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   *\n   * @defaultValue `null`\n   */\n  uses?: Option<Uses>;\n\n  /**\n   * Whether the created NFT is a Collection NFT.\n   * When set to `true`, the NFT will be created as a\n   * Sized Collection NFT with an initial size of 0.\n   *\n   * @defaultValue `false`\n   */\n  isCollection?: boolean;\n\n  /**\n   * The Collection NFT that this new NFT belongs to.\n   * When `null`, the created NFT will not be part of a collection.\n   *\n   * @defaultValue `null`\n   */\n  collection?: Option<PublicKey>;\n\n  /**\n   * The collection authority that should sign the created NFT\n   * to prove that it is part of the provided collection.\n   * When `null`, the provided `collection` will not be verified.\n   *\n   * @defaultValue `null`\n   */\n  collectionAuthority?: Option<Signer>;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  collectionAuthorityIsDelegated?: boolean;\n\n  /**\n   * Whether or not the provided `collection` is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  collectionIsSized?: boolean;\n\n  /**\n   * The ruleset account that should be used to configure the\n   * programmable NFT.\n   *\n   * This is only relevant for programmable NFTs, i.e. if the\n   * `tokenStandard` is set to `TokenStandard.ProgrammableNonFungible`.\n   *\n   * @defaultValue `null`\n   */\n  ruleSet?: Option<PublicKey>;\n\n  /**\n   * The Merkle tree used to store the NFT\n   */\n  tree?: Option<PublicKey>;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The newly created NFT and its associated token. */\n  nft: NftWithToken;\n\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the metadata account. */\n  metadataAddress: PublicKey;\n\n  /** The address of the master edition account. */\n  masterEditionAddress: PublicKey;\n\n  /** The address of the token account. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createNftOperationHandler: OperationHandler<CreateNftOperation> = {\n  handle: async (\n    operation: CreateNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) => {\n    const {\n      useNewMint = Keypair.generate(),\n      useExistingMint,\n      tokenOwner = metaplex.identity().publicKey,\n      tokenAddress: tokenSigner,\n    } = operation.input;\n\n    const mintAddress = useExistingMint ?? useNewMint.publicKey;\n    const tokenAddress = tokenSigner\n      ? toPublicKey(tokenSigner)\n      : metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: tokenOwner,\n          programs: scope.programs,\n        });\n    const tokenAccount = await metaplex.rpc().getAccount(tokenAddress);\n    const tokenExists = tokenAccount.exists;\n\n    const builder = await createNftBuilder(\n      metaplex,\n      {\n        ...operation.input,\n        useNewMint,\n        tokenOwner,\n        tokenExists,\n      },\n      scope\n    );\n    scope.throwIfCanceled();\n\n    const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n      metaplex,\n      scope.confirmOptions\n    );\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n\n    const nft = await metaplex.nfts().findByMint(\n      {\n        mintAddress: output.mintAddress,\n        tokenAddress: output.tokenAddress,\n      },\n      scope\n    );\n    scope.throwIfCanceled();\n\n    assertNftWithToken(nft);\n    return { ...output, nft };\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateNftBuilderParams = Omit<CreateNftInput, 'confirmOptions'> & {\n  /**\n   * Whether or not the provided token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  tokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the mint account. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the metadata account. */\n  createMetadataInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the master edition account. */\n  createMasterEditionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateNftBuilderContext = Omit<CreateNftOutput, 'response' | 'nft'>;\n\n/**\n * Creates a new NFT.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .nfts()\n *   .builders()\n *   .create({\n *     name: 'My NFT',\n *     uri: 'https://example.com/my-nft',\n *     sellerFeeBasisPoints: 250, // 2.5%\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createNftBuilder = async (\n  metaplex: Metaplex,\n  params: CreateNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateNftBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    useNewMint = Keypair.generate(),\n    updateAuthority = metaplex.identity(),\n    mintAuthority = metaplex.identity(),\n    tokenOwner = metaplex.identity().publicKey,\n    mintTokens = true,\n    tree,\n  } = params;\n\n  if (tree) {\n    // @ts-ignore\n    return createCompressedNftBuilder(\n      metaplex,\n      params as CreateCompressedNftBuilderParams,\n      options\n    );\n  }\n\n  const sftBuilder = await metaplex\n    .nfts()\n    .builders()\n    .createSft(\n      {\n        ...params,\n        tokenStandard: params.tokenStandard ?? TokenStandard.NonFungible,\n        updateAuthority,\n        mintAuthority,\n        useNewMint,\n        tokenOwner,\n        tokenAmount: mintTokens ? token(1) : undefined,\n        decimals: 0,\n      },\n      { programs, payer }\n    );\n\n  const { mintAddress, metadataAddress, tokenAddress } =\n    sftBuilder.getContext();\n  const masterEditionAddress = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make<CreateNftBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintAddress,\n        metadataAddress,\n        masterEditionAddress,\n        tokenAddress: tokenAddress as PublicKey,\n      })\n\n      // Create the mint, the token and the metadata.\n      .add(sftBuilder)\n  );\n};\n"],"names":["Key","createNftOperation","useOperation","createNftOperationHandler","handle","operation","metaplex","scope","useNewMint","Keypair","generate","useExistingMint","tokenOwner","identity","publicKey","tokenAddress","tokenSigner","input","mintAddress","toPublicKey","tokens","pdas","associatedTokenAccount","mint","owner","programs","tokenAccount","rpc","getAccount","tokenExists","exists","builder","createNftBuilder","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","nft","nfts","findByMint","assertNftWithToken","params","options","payer","getDefaultFeePayer","updateAuthority","mintAuthority","mintTokens","tree","createCompressedNftBuilder","sftBuilder","builders","createSft","tokenStandard","TokenStandard","NonFungible","tokenAmount","token","undefined","decimals","metadataAddress","getContext","masterEditionAddress","masterEdition","TransactionBuilder","make","setFeePayer","setContext","add"],"mappings":"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"}