{"version":3,"file":"WalletAdapterIdentityDriver.mjs","sources":["../../../../src/plugins/walletAdapterIdentity/WalletAdapterIdentityDriver.ts"],"sourcesContent":["import { PublicKey, Transaction } from '@solana/web3.js';\nimport { IdentityDriver } from '../identityModule';\nimport {\n  OperationNotSupportedByWalletAdapterError,\n  UninitializedWalletAdapterError,\n} from '@/errors';\n\nexport type WalletAdapter = {\n  publicKey: PublicKey | null;\n  signMessage?: (message: Uint8Array) => Promise<Uint8Array>;\n  signTransaction?: (transaction: Transaction) => Promise<Transaction>;\n  signAllTransactions?: (transactions: Transaction[]) => Promise<Transaction[]>;\n};\n\nexport class WalletAdapterIdentityDriver implements IdentityDriver {\n  public readonly walletAdapter: WalletAdapter;\n\n  constructor(walletAdapter: WalletAdapter) {\n    this.walletAdapter = walletAdapter;\n  }\n\n  get publicKey(): PublicKey {\n    if (!this.walletAdapter.publicKey) {\n      throw new UninitializedWalletAdapterError();\n    }\n\n    return this.walletAdapter.publicKey;\n  }\n\n  public async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    if (this.walletAdapter.signMessage === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signMessage');\n    }\n\n    return this.walletAdapter.signMessage(message);\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    if (this.walletAdapter.signTransaction === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError('signTransaction');\n    }\n\n    return this.walletAdapter.signTransaction(transaction);\n  }\n\n  public async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    if (this.walletAdapter.signAllTransactions === undefined) {\n      throw new OperationNotSupportedByWalletAdapterError(\n        'signAllTransactions'\n      );\n    }\n\n    return this.walletAdapter.signAllTransactions(transactions);\n  }\n}\n"],"names":["WalletAdapterIdentityDriver","constructor","walletAdapter","publicKey","UninitializedWalletAdapterError","signMessage","message","undefined","OperationNotSupportedByWalletAdapterError","signTransaction","transaction","signAllTransactions","transactions"],"mappings":";;AAcO,MAAMA,2BAA2B,CAA2B;EAGjEC,WAAW,CAACC,aAA4B,EAAE;IACxC,IAAI,CAACA,aAAa,GAAGA,aAAa,CAAA;AACpC,GAAA;AAEA,EAAA,IAAIC,SAAS,GAAc;AACzB,IAAA,IAAI,CAAC,IAAI,CAACD,aAAa,CAACC,SAAS,EAAE;MACjC,MAAM,IAAIC,+BAA+B,EAAE,CAAA;AAC7C,KAAA;AAEA,IAAA,OAAO,IAAI,CAACF,aAAa,CAACC,SAAS,CAAA;AACrC,GAAA;EAEA,MAAaE,WAAW,CAACC,OAAmB,EAAuB;AACjE,IAAA,IAAI,IAAI,CAACJ,aAAa,CAACG,WAAW,KAAKE,SAAS,EAAE;AAChD,MAAA,MAAM,IAAIC,yCAAyC,CAAC,aAAa,CAAC,CAAA;AACpE,KAAA;AAEA,IAAA,OAAO,IAAI,CAACN,aAAa,CAACG,WAAW,CAACC,OAAO,CAAC,CAAA;AAChD,GAAA;EAEA,MAAaG,eAAe,CAACC,WAAwB,EAAwB;AAC3E,IAAA,IAAI,IAAI,CAACR,aAAa,CAACO,eAAe,KAAKF,SAAS,EAAE;AACpD,MAAA,MAAM,IAAIC,yCAAyC,CAAC,iBAAiB,CAAC,CAAA;AACxE,KAAA;AAEA,IAAA,OAAO,IAAI,CAACN,aAAa,CAACO,eAAe,CAACC,WAAW,CAAC,CAAA;AACxD,GAAA;EAEA,MAAaC,mBAAmB,CAC9BC,YAA2B,EACH;AACxB,IAAA,IAAI,IAAI,CAACV,aAAa,CAACS,mBAAmB,KAAKJ,SAAS,EAAE;AACxD,MAAA,MAAM,IAAIC,yCAAyC,CACjD,qBAAqB,CACtB,CAAA;AACH,KAAA;AAEA,IAAA,OAAO,IAAI,CAACN,aAAa,CAACS,mBAAmB,CAACC,YAAY,CAAC,CAAA;AAC7D,GAAA;AACF;;;;"}