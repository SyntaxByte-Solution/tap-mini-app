{"version":3,"file":"findNftsByUpdateAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByUpdateAuthority.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByUpdateAuthorityOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given update authority.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByUpdateAuthority({ updateAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByUpdateAuthorityOperation =\n  useOperation<FindNftsByUpdateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByUpdateAuthorityOperation = Operation<\n  typeof Key,\n  FindNftsByUpdateAuthorityInput,\n  FindNftsByUpdateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByUpdateAuthorityInput = {\n  /** The address of the update authority. */\n  updateAuthority: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByUpdateAuthorityOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByUpdateAuthorityOperationHandler: OperationHandler<FindNftsByUpdateAuthorityOperation> =\n  {\n    handle: async (\n      operation: FindNftsByUpdateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByUpdateAuthorityOutput> => {\n      const { updateAuthority } = operation.input;\n\n      const gpaBuilder = new MetadataV1GpaBuilder(\n        metaplex,\n        metaplex.programs().getTokenMetadata(scope.programs).address\n      );\n\n      const nfts = await gpaBuilder.whereUpdateAuthority(updateAuthority).get();\n      scope.throwIfCanceled();\n\n      return nfts\n        .map<Metadata | null>((account) => {\n          if (account == null) {\n            return null;\n          }\n\n          try {\n            return toMetadata(toMetadataAccount(account));\n          } catch (error) {\n            return null;\n          }\n        })\n        .filter((nft): nft is Metadata => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByUpdateAuthorityOperation","useOperation","findNftsByUpdateAuthorityOperationHandler","handle","operation","metaplex","scope","updateAuthority","input","gpaBuilder","MetadataV1GpaBuilder","programs","getTokenMetadata","address","nfts","whereUpdateAuthority","get","throwIfCanceled","map","account","toMetadata","toMetadataAccount","error","filter","nft"],"mappings":";;;;;AAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAA6C,CAAA;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,kCAAkC,GAC7CC,YAAY,CAAqCF,GAAG,EAAC;;AAEvD;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,yCAA+F,GAC1G;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA6C,EAC7CC,QAAkB,EAClBC,KAAqB,KACwB;IAC7C,MAAM;AAAEC,MAAAA,eAAAA;KAAiB,GAAGH,SAAS,CAACI,KAAK,CAAA;IAE3C,MAAMC,UAAU,GAAG,IAAIC,oBAAoB,CACzCL,QAAQ,EACRA,QAAQ,CAACM,QAAQ,EAAE,CAACC,gBAAgB,CAACN,KAAK,CAACK,QAAQ,CAAC,CAACE,OAAO,CAC7D,CAAA;IAED,MAAMC,IAAI,GAAG,MAAML,UAAU,CAACM,oBAAoB,CAACR,eAAe,CAAC,CAACS,GAAG,EAAE,CAAA;IACzEV,KAAK,CAACW,eAAe,EAAE,CAAA;AAEvB,IAAA,OAAOH,IAAI,CACRI,GAAG,CAAmBC,OAAO,IAAK;MACjC,IAAIA,OAAO,IAAI,IAAI,EAAE;AACnB,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;MAEA,IAAI;AACF,QAAA,OAAOC,UAAU,CAACC,iBAAiB,CAACF,OAAO,CAAC,CAAC,CAAA;OAC9C,CAAC,OAAOG,KAAK,EAAE;AACd,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;KACD,CAAC,CACDC,MAAM,CAAEC,GAAG,IAAsBA,GAAG,KAAK,IAAI,CAAC,CAAA;AACnD,GAAA;AACF;;;;"}