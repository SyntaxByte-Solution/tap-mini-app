{"version":3,"file":"findNftsByMintList.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByMintList.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { GmaBuilder } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByMintListOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given list of mint addresses.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByMintList({ mints: [...] };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByMintListOperation =\n  useOperation<FindNftsByMintListOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByMintListOperation = Operation<\n  typeof Key,\n  FindNftsByMintListInput,\n  FindNftsByMintListOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByMintListInput = {\n  /** The addresses of all mint accounts we want to fetch. */\n  mints: PublicKey[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByMintListOutput = (Metadata | Nft | Sft | null)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByMintListOperationHandler: OperationHandler<FindNftsByMintListOperation> =\n  {\n    handle: async (\n      operation: FindNftsByMintListOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByMintListOutput> => {\n      const { commitment, programs } = scope;\n      const { mints } = operation.input;\n      const nftPdas = metaplex.nfts().pdas();\n      const metadataPdas = mints.map((mint) =>\n        nftPdas.metadata({ mint, programs })\n      );\n      const metadataInfos = await GmaBuilder.make(metaplex, metadataPdas, {\n        commitment,\n      }).get();\n      scope.throwIfCanceled();\n\n      return metadataInfos.map<Metadata | null>((account) => {\n        if (!account.exists) {\n          return null;\n        }\n\n        try {\n          return toMetadata(toMetadataAccount(account));\n        } catch (error) {\n          return null;\n        }\n      });\n    },\n  };\n"],"names":["Key","findNftsByMintListOperation","useOperation","findNftsByMintListOperationHandler","handle","operation","metaplex","scope","commitment","programs","mints","input","nftPdas","nfts","pdas","metadataPdas","map","mint","metadata","metadataInfos","GmaBuilder","make","get","throwIfCanceled","account","exists","toMetadata","toMetadataAccount","error"],"mappings":";;;;;AAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAsC,CAAA;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAAG,EAAC;;AAEhD;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAsC,EACtCC,QAAkB,EAClBC,KAAqB,KACiB;IACtC,MAAM;MAAEC,UAAU;AAAEC,MAAAA,QAAAA;AAAS,KAAC,GAAGF,KAAK,CAAA;IACtC,MAAM;AAAEG,MAAAA,KAAAA;KAAO,GAAGL,SAAS,CAACM,KAAK,CAAA;IACjC,MAAMC,OAAO,GAAGN,QAAQ,CAACO,IAAI,EAAE,CAACC,IAAI,EAAE,CAAA;IACtC,MAAMC,YAAY,GAAGL,KAAK,CAACM,GAAG,CAAEC,IAAI,IAClCL,OAAO,CAACM,QAAQ,CAAC;MAAED,IAAI;AAAER,MAAAA,QAAAA;AAAS,KAAC,CAAC,CACrC,CAAA;IACD,MAAMU,aAAa,GAAG,MAAMC,UAAU,CAACC,IAAI,CAACf,QAAQ,EAAES,YAAY,EAAE;AAClEP,MAAAA,UAAAA;KACD,CAAC,CAACc,GAAG,EAAE,CAAA;IACRf,KAAK,CAACgB,eAAe,EAAE,CAAA;AAEvB,IAAA,OAAOJ,aAAa,CAACH,GAAG,CAAmBQ,OAAO,IAAK;AACrD,MAAA,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;AACnB,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;MAEA,IAAI;AACF,QAAA,OAAOC,UAAU,CAACC,iBAAiB,CAACH,OAAO,CAAC,CAAC,CAAA;OAC9C,CAAC,OAAOI,KAAK,EAAE;AACd,QAAA,OAAO,IAAI,CAAA;AACb,OAAA;AACF,KAAC,CAAC,CAAA;AACJ,GAAA;AACF;;;;"}