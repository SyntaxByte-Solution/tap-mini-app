{"version":3,"file":"ProgramError.mjs","sources":["../../../src/errors/ProgramError.ts"],"sourcesContent":["import { MetaplexError } from './MetaplexError';\nimport { Program } from '@/types';\n\n/** @group Errors */\nexport class ProgramError extends MetaplexError {\n  readonly name: string = 'ProgramError';\n  readonly program: Program;\n  readonly logs?: string[];\n\n  constructor(\n    message: string,\n    program: Program,\n    cause?: Error,\n    logs?: string[]\n  ) {\n    super(\n      message,\n      'program',\n      `${program.name} [${program.address.toString()}]`,\n      cause\n    );\n    this.program = program;\n    this.logs = logs;\n    if (logs) {\n      this.message =\n        this.message +\n        `\\nProgram Logs:\\n${logs.map((log) => '| ' + log).join('\\n')}\\n`;\n    }\n  }\n}\n\ntype UnderlyingProgramError = Error & { code?: number; logs?: string[] };\n\n/** @group Errors */\nexport class ParsedProgramError extends ProgramError {\n  readonly name: string = 'ParsedProgramError';\n  constructor(program: Program, cause: UnderlyingProgramError, logs: string[]) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message =\n      `The program [${program.name}] ` +\n      `at address [${program.address.toString()}] ` +\n      `raised an error${ofCode} ` +\n      `that translates to \"${cause.message}\".`;\n    super(message, program, cause, logs);\n  }\n}\n\n/** @group Errors */\nexport class UnknownProgramError extends ProgramError {\n  readonly name: string = 'UnknownProgramError';\n  constructor(program: Program, cause: UnderlyingProgramError) {\n    const ofCode = cause.code ? ` of code [${cause.code}]` : '';\n    const message =\n      `The program [${program.name}] ` +\n      `at address [${program.address.toString()}] ` +\n      `raised an error${ofCode} ` +\n      `that is not recognized by the programs registered on the SDK. ` +\n      `Please check the underlying program error below for more details.`;\n    super(message, program, cause, cause.logs);\n  }\n}\n"],"names":["ProgramError","MetaplexError","constructor","message","program","cause","logs","name","address","toString","map","log","join","ParsedProgramError","ofCode","code","UnknownProgramError"],"mappings":";;;AAGA;AACO,MAAMA,YAAY,SAASC,aAAa,CAAC;EAK9CC,WAAW,CACTC,OAAe,EACfC,OAAgB,EAChBC,KAAa,EACbC,IAAe,EACf;AACA,IAAA,KAAK,CACHH,OAAO,EACP,SAAS,EACR,CAAA,EAAEC,OAAO,CAACG,IAAK,KAAIH,OAAO,CAACI,OAAO,CAACC,QAAQ,EAAG,CAAE,CAAA,CAAA,EACjDJ,KAAK,CACN,CAAA;AAAC,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAfoB,cAAc,CAAA,CAAA;IAgBpC,IAAI,CAACD,OAAO,GAAGA,OAAO,CAAA;IACtB,IAAI,CAACE,IAAI,GAAGA,IAAI,CAAA;AAChB,IAAA,IAAIA,IAAI,EAAE;MACR,IAAI,CAACH,OAAO,GACV,IAAI,CAACA,OAAO,GACX,CAAmBG,iBAAAA,EAAAA,IAAI,CAACI,GAAG,CAAEC,GAAG,IAAK,IAAI,GAAGA,GAAG,CAAC,CAACC,IAAI,CAAC,IAAI,CAAE,CAAG,EAAA,CAAA,CAAA;AACpE,KAAA;AACF,GAAA;AACF,CAAA;AAIA;AACO,MAAMC,kBAAkB,SAASb,YAAY,CAAC;AAEnDE,EAAAA,WAAW,CAACE,OAAgB,EAAEC,KAA6B,EAAEC,IAAc,EAAE;AAC3E,IAAA,MAAMQ,MAAM,GAAGT,KAAK,CAACU,IAAI,GAAI,CAAYV,UAAAA,EAAAA,KAAK,CAACU,IAAK,CAAE,CAAA,CAAA,GAAG,EAAE,CAAA;IAC3D,MAAMZ,OAAO,GACV,CAAA,aAAA,EAAeC,OAAO,CAACG,IAAK,CAAG,EAAA,CAAA,GAC/B,CAAcH,YAAAA,EAAAA,OAAO,CAACI,OAAO,CAACC,QAAQ,EAAG,CAAG,EAAA,CAAA,GAC5C,CAAiBK,eAAAA,EAAAA,MAAO,CAAE,CAAA,CAAA,GAC1B,CAAsBT,oBAAAA,EAAAA,KAAK,CAACF,OAAQ,CAAG,EAAA,CAAA,CAAA;IAC1C,KAAK,CAACA,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,CAAC,CAAA;AAAC,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EARf,oBAAoB,CAAA,CAAA;AAS5C,GAAA;AACF,CAAA;;AAEA;AACO,MAAMU,mBAAmB,SAAShB,YAAY,CAAC;AAEpDE,EAAAA,WAAW,CAACE,OAAgB,EAAEC,KAA6B,EAAE;AAC3D,IAAA,MAAMS,MAAM,GAAGT,KAAK,CAACU,IAAI,GAAI,CAAYV,UAAAA,EAAAA,KAAK,CAACU,IAAK,CAAE,CAAA,CAAA,GAAG,EAAE,CAAA;IAC3D,MAAMZ,OAAO,GACV,CAAeC,aAAAA,EAAAA,OAAO,CAACG,IAAK,CAAA,EAAA,CAAG,GAC/B,CAAA,YAAA,EAAcH,OAAO,CAACI,OAAO,CAACC,QAAQ,EAAG,CAAA,EAAA,CAAG,GAC5C,CAAA,eAAA,EAAiBK,MAAO,CAAE,CAAA,CAAA,GAC1B,CAA+D,8DAAA,CAAA,GAC/D,CAAkE,iEAAA,CAAA,CAAA;IACrE,KAAK,CAACX,OAAO,EAAEC,OAAO,EAAEC,KAAK,EAAEA,KAAK,CAACC,IAAI,CAAC,CAAA;AAAC,IAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EATrB,qBAAqB,CAAA,CAAA;AAU7C,GAAA;AACF;;;;"}