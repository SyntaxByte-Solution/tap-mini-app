{"version":3,"file":"uploadMetadata.mjs","sources":["../../../../../src/plugins/nftModule/operations/uploadMetadata.ts"],"sourcesContent":["import cloneDeep from 'lodash.clonedeep';\nimport { isMetaplexFile, MetaplexFile } from '../../storageModule';\nimport { JsonMetadata } from '../models';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { walk } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UploadMetadataOperation' as const;\n\n/**\n * Uploads a JSON Metadata object to the current storage provider.\n *\n * ```ts\n * const { uri } = await metaplex\n *   .nfts()\n *   .uploadMetadata({\n *     name: \"My NFT\",\n *     description: \"My description\",\n *     image: \"https://arweave.net/123\",\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const uploadMetadataOperation =\n  useOperation<UploadMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UploadMetadataOperation = Operation<\n  typeof Key,\n  UploadMetadataInput,\n  UploadMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UploadMetadataInput = JsonMetadata<MetaplexFile | string>;\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UploadMetadataOutput = {\n  /** The uploaded JSON metadata. */\n  metadata: JsonMetadata;\n\n  /**\n   * The URIs of all assets that were uploaded\n   * within the provided metadata.\n   */\n  assetUris: string[];\n\n  /** The URI of the uploaded JSON metadata. */\n  uri: string;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const uploadMetadataOperationHandler: OperationHandler<UploadMetadataOperation> =\n  {\n    handle: async (\n      operation: UploadMetadataOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UploadMetadataOutput> => {\n      const rawMetadata = operation.input;\n      const files = getAssetsFromJsonMetadata(rawMetadata);\n      const assetUris = await metaplex.storage().uploadAll(files);\n      scope.throwIfCanceled();\n\n      const metadata = replaceAssetsWithUris(rawMetadata, assetUris);\n      const uri = await metaplex.storage().uploadJson(metadata);\n\n      return { uri, metadata, assetUris };\n    },\n  };\n\nexport const getAssetsFromJsonMetadata = (\n  input: UploadMetadataInput\n): MetaplexFile[] => {\n  const files: MetaplexFile[] = [];\n\n  walk(input, (next, value) => {\n    if (isMetaplexFile(value)) {\n      files.push(value);\n    } else {\n      next(value);\n    }\n  });\n\n  return files;\n};\n\nexport const replaceAssetsWithUris = (\n  input: UploadMetadataInput,\n  replacements: string[]\n): JsonMetadata => {\n  const clone = cloneDeep(input);\n  let index = 0;\n\n  walk(clone, (next, value, key, parent) => {\n    if (isMetaplexFile(value)) {\n      if (index < replacements.length) {\n        parent[key] = replacements[index++];\n      }\n    } else {\n      next(value);\n    }\n  });\n\n  return clone as JsonMetadata;\n};\n"],"names":["Key","uploadMetadataOperation","useOperation","uploadMetadataOperationHandler","handle","operation","metaplex","scope","rawMetadata","input","files","getAssetsFromJsonMetadata","assetUris","storage","uploadAll","throwIfCanceled","metadata","replaceAssetsWithUris","uri","uploadJson","walk","next","value","isMetaplexFile","push","replacements","clone","cloneDeep","index","key","parent","length"],"mappings":";;;;;AAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,yBAAkC,CAAA;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,uBAAuB,GAClCC,YAAY,CAA0BF,GAAG,EAAC;;AAE5C;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,8BAAyE,GACpF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAkC,EAClCC,QAAkB,EAClBC,KAAqB,KACa;AAClC,IAAA,MAAMC,WAAW,GAAGH,SAAS,CAACI,KAAK,CAAA;AACnC,IAAA,MAAMC,KAAK,GAAGC,yBAAyB,CAACH,WAAW,CAAC,CAAA;IACpD,MAAMI,SAAS,GAAG,MAAMN,QAAQ,CAACO,OAAO,EAAE,CAACC,SAAS,CAACJ,KAAK,CAAC,CAAA;IAC3DH,KAAK,CAACQ,eAAe,EAAE,CAAA;AAEvB,IAAA,MAAMC,QAAQ,GAAGC,qBAAqB,CAACT,WAAW,EAAEI,SAAS,CAAC,CAAA;IAC9D,MAAMM,GAAG,GAAG,MAAMZ,QAAQ,CAACO,OAAO,EAAE,CAACM,UAAU,CAACH,QAAQ,CAAC,CAAA;IAEzD,OAAO;MAAEE,GAAG;MAAEF,QAAQ;AAAEJ,MAAAA,SAAAA;KAAW,CAAA;AACrC,GAAA;AACF,EAAC;AAEUD,MAAAA,yBAAyB,GACpCF,KAA0B,IACP;EACnB,MAAMC,KAAqB,GAAG,EAAE,CAAA;AAEhCU,EAAAA,IAAI,CAACX,KAAK,EAAE,CAACY,IAAI,EAAEC,KAAK,KAAK;AAC3B,IAAA,IAAIC,cAAc,CAACD,KAAK,CAAC,EAAE;AACzBZ,MAAAA,KAAK,CAACc,IAAI,CAACF,KAAK,CAAC,CAAA;AACnB,KAAC,MAAM;MACLD,IAAI,CAACC,KAAK,CAAC,CAAA;AACb,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOZ,KAAK,CAAA;AACd,EAAC;MAEYO,qBAAqB,GAAG,CACnCR,KAA0B,EAC1BgB,YAAsB,KACL;AACjB,EAAA,MAAMC,KAAK,GAAGC,SAAS,CAAClB,KAAK,CAAC,CAAA;EAC9B,IAAImB,KAAK,GAAG,CAAC,CAAA;EAEbR,IAAI,CAACM,KAAK,EAAE,CAACL,IAAI,EAAEC,KAAK,EAAEO,GAAG,EAAEC,MAAM,KAAK;AACxC,IAAA,IAAIP,cAAc,CAACD,KAAK,CAAC,EAAE;AACzB,MAAA,IAAIM,KAAK,GAAGH,YAAY,CAACM,MAAM,EAAE;QAC/BD,MAAM,CAACD,GAAG,CAAC,GAAGJ,YAAY,CAACG,KAAK,EAAE,CAAC,CAAA;AACrC,OAAA;AACF,KAAC,MAAM;MACLP,IAAI,CAACC,KAAK,CAAC,CAAA;AACb,KAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OAAOI,KAAK,CAAA;AACd;;;;"}