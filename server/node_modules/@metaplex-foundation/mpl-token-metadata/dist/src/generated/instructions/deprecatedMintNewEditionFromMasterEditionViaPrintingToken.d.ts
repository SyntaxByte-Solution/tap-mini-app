/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts = {
    /** New Metadata key (pda of ['metadata', program id, mint id]) */
    metadata?: PublicKey | Pda;
    /** New Edition V1 (pda of ['metadata', program id, mint id, 'edition']) */
    edition?: PublicKey | Pda;
    /** Master Record Edition V1 (pda of ['metadata', program id, master metadata mint id, 'edition']) */
    masterEdition?: PublicKey | Pda;
    /** Mint of new token - THIS WILL TRANSFER AUTHORITY AWAY FROM THIS KEY */
    mint: PublicKey | Pda;
    /** Mint authority of new mint */
    mintAuthority: Signer;
    /** Printing Mint of master record edition */
    printingMint: PublicKey | Pda;
    /** Token account containing Printing mint token to be transferred */
    masterTokenAccount: PublicKey | Pda;
    /** Edition pda to mark creation - will be checked for pre-existence. (pda of ['metadata', program id, master mint id, edition_number]) */
    editionMarker?: PublicKey | Pda;
    /** Burn authority for this token */
    burnAuthority: Signer;
    /** payer */
    payer?: Signer;
    /** update authority info for new metadata account */
    masterUpdateAuthority: PublicKey | Pda;
    /** Master record metadata account */
    masterMetadata: PublicKey | Pda;
    /** Token program */
    tokenProgram?: PublicKey | Pda;
    /** System program */
    systemProgram?: PublicKey | Pda;
    /** Rent info */
    rent?: PublicKey | Pda;
    /** Reservation List - If present, and you are on this list, you can get an edition number given by your position on the list. */
    reservationList?: PublicKey | Pda;
};
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData = {
    discriminator: number;
};
export type DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs = {};
export declare function getDeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataSerializer(): Serializer<DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionDataArgs, DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionData>;
export declare function deprecatedMintNewEditionFromMasterEditionViaPrintingToken(context: Pick<Context, 'eddsa' | 'payer' | 'programs'>, input: DeprecatedMintNewEditionFromMasterEditionViaPrintingTokenInstructionAccounts): TransactionBuilder;
