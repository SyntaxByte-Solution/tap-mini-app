'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
var MetaplexError = require('./MetaplexError.cjs');

/** @group Errors */
class RpcError extends MetaplexError.MetaplexError {
  constructor(message, cause) {
    super(message, 'rpc', undefined, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'RpcError');
  }
}

/** @group Errors */
class FailedToSendTransactionError extends RpcError {
  constructor(cause) {
    const message = 'The transaction could not be sent successfully to the network. ' + 'Please check the underlying error below for more details.';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToSendTransactionError');
    if (this.errorLogs.length > 0) {
      this.message = this.message + `\nProgram Logs:\n${this.errorLogs.map(log => '| ' + log).join('\n')}\n`;
    }
  }
  asSendTransactionError() {
    return this.cause;
  }
  get error() {
    return this.asSendTransactionError().message;
  }
  get errorLogs() {
    return this.asSendTransactionError().logs ?? [];
  }
}

/** @group Errors */
class FailedToConfirmTransactionError extends RpcError {
  constructor(cause) {
    const message = 'The transaction could not be confirmed. ' + 'Please check the underlying error below for more details.';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToConfirmTransactionError');
  }
}

/** @group Errors */
class FailedToConfirmTransactionWithResponseError extends FailedToConfirmTransactionError {
  constructor(response) {
    const getMessage = error => {
      if (!error) return 'Unknown error';
      if (typeof error === 'string') return error;
      try {
        return JSON.stringify(error);
      } catch (error) {
        return 'Unknown error';
      }
    };
    super(new Error(getMessage(response.value.err)));
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToConfirmTransactionWithResponseError');
    this.response = response;
  }
  get error() {
    return this.response.value.err ?? 'Unknown error';
  }
}

exports.FailedToConfirmTransactionError = FailedToConfirmTransactionError;
exports.FailedToConfirmTransactionWithResponseError = FailedToConfirmTransactionWithResponseError;
exports.FailedToSendTransactionError = FailedToSendTransactionError;
exports.RpcError = RpcError;
//# sourceMappingURL=RpcError.cjs.map
