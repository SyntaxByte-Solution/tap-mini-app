{"version":3,"file":"directSell.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/directSell.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Token } from '../../tokenModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport {\n  AuctionHouse,\n  isPrivateBid,\n  Listing,\n  PrivateBid,\n  PublicBid,\n  Purchase,\n} from '../models';\nimport { CreateListingBuilderContext } from './createListing';\nimport { ExecuteSaleBuilderContext } from './executeSale';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DirectSellOperation' as const;\n\n/**\n * Creates a listing on a given asset and then executes a sell on the created bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .sell({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const directSellOperation = useOperation<DirectSellOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DirectSellOperation = Operation<\n  typeof Key,\n  DirectSellInput,\n  DirectSellOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DirectSellInput = {\n  /** The Auction House in which to create a Listing and execute a Sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auction House authority.\n   * If this is Signer the transaction fee\n   * will be paid from the Auction House Fee Account\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * Creator of a listing.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  seller?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n} & (\n  | {\n      /**\n       * The Token Account of an asset to sell.\n       * Public Bid doesn't contain a token, so it must be provided externally via this parameter.\n       */\n      sellerToken: Token;\n\n      /**\n       * The Public Bid that is used in the sale.\n       * We only need a subset of the `Bid` model but we\n       * need enough information regarding its settings to know how\n       * to execute the sale.\n       *\n       * This includes its auction house address, buyer, receipt address, etc.\n       */\n      bid: Omit<\n        PublicBid,\n        'bookkeeperAddress' | 'purchaseReceiptAddress' | 'createdAt'\n      >;\n    }\n  | {\n      /**\n       * The Token Account of an asset to sell.\n       * Not needed for private bid.\n       */\n      sellerToken?: null;\n\n      /**\n       * The Private Bid that is used in the sale.\n       * We only need a subset of the `Bid` model but we\n       * need enough information regarding its settings to know how\n       * to execute the sale.\n       *\n       * This includes its asset, auction house address, buyer, receipt address, etc.\n       */\n      bid: Omit<\n        PrivateBid,\n        'bookkeeperAddress' | 'purchaseReceiptAddress' | 'createdAt'\n      >;\n    }\n);\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DirectSellOutput = {\n  /** A model that keeps information about the Listing. */\n  listing: Listing;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const directSellOperationHandler: OperationHandler<DirectSellOperation> =\n  {\n    handle: async (\n      operation: DirectSellOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const builder = await directSellBuilder(metaplex, operation.input, scope);\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DirectSellBuilderParams = Omit<\n  DirectSellInput,\n  'confirmOptions'\n> & {\n  createListingInstructionKey?: string;\n  executeSaleInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DirectSellBuilderContext = Omit<DirectSellOutput, 'response'>;\n\n/**\n * Creates a listing on a given asset and executes a sale on the created listing and given bid.\n *\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .sell({ auctionHouse, bid, seller })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const directSellBuilder = async (\n  metaplex: Metaplex,\n  params: DirectSellBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<DirectSellBuilderContext>> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    bid,\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n    bookkeeper = metaplex.identity(),\n    createListingInstructionKey,\n    executeSaleInstructionKey,\n  } = params;\n  const { hasAuctioneer } = auctionHouse;\n  const { tokens, price, buyerAddress } = bid;\n\n  const printReceipt =\n    (params.printReceipt ?? true) && Boolean(bid.receiptAddress);\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const asset = isPrivateBid(bid)\n    ? bid.asset\n    : { ...bid.asset, token: params.sellerToken as Token };\n\n  const listingBuilder: TransactionBuilder<CreateListingBuilderContext> =\n    metaplex.auctionHouse().builders().list(\n      {\n        mintAccount: asset.mint.address,\n        price,\n        auctionHouse,\n        auctioneerAuthority,\n        seller,\n        authority,\n        tokenAccount: asset.token.address,\n        tokens,\n        printReceipt,\n        bookkeeper,\n        instructionKey: createListingInstructionKey,\n      },\n      { programs, payer }\n    );\n  const { receipt, sellerTradeState } = listingBuilder.getContext();\n\n  const listing: Listing = {\n    model: 'listing',\n    lazy: false,\n    auctionHouse,\n    asset,\n    tradeStateAddress: sellerTradeState,\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    sellerAddress: toPublicKey(seller),\n    receiptAddress: receipt,\n    purchaseReceiptAddress: null,\n    price,\n    tokens,\n    createdAt: now(),\n    canceledAt: null,\n  };\n\n  const saleBuilder: TransactionBuilder<ExecuteSaleBuilderContext> = metaplex\n    .auctionHouse()\n    .builders()\n    .executeSale(\n      {\n        auctionHouse,\n        auctioneerAuthority,\n        bid,\n        listing,\n        printReceipt,\n        bookkeeper,\n        instructionKey: executeSaleInstructionKey,\n      },\n      { programs, payer }\n    );\n  const { receipt: receiptAddress } = saleBuilder.getContext();\n\n  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: asset.address,\n    owner: buyerAddress,\n    programs,\n  });\n  const purchasedAsset = {\n    ...asset,\n    token: {\n      ...asset.token,\n      address: buyerTokenAccount,\n      ownerAddress: buyerAddress,\n    },\n  };\n\n  const purchase: Purchase = {\n    auctionHouse,\n    model: 'purchase',\n    lazy: false,\n    asset: purchasedAsset,\n    buyerAddress,\n    sellerAddress: toPublicKey(seller),\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    receiptAddress,\n    price: bid.price,\n    tokens,\n    createdAt: now(),\n  };\n\n  return TransactionBuilder.make<DirectSellBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      listing,\n      purchase,\n    })\n    .add(listingBuilder)\n    .add(saleBuilder);\n};\n"],"names":["Key","directSellOperation","useOperation","directSellOperationHandler","handle","operation","metaplex","scope","builder","directSellBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","bid","seller","identity","authority","authorityAddress","bookkeeper","createListingInstructionKey","executeSaleInstructionKey","hasAuctioneer","tokens","price","buyerAddress","printReceipt","Boolean","receiptAddress","AuctioneerAuthorityRequiredError","asset","isPrivateBid","token","sellerToken","listingBuilder","builders","list","mintAccount","mint","address","tokenAccount","instructionKey","receipt","sellerTradeState","getContext","listing","model","lazy","tradeStateAddress","bookkeeperAddress","toPublicKey","sellerAddress","purchaseReceiptAddress","createdAt","now","canceledAt","saleBuilder","executeSale","buyerTokenAccount","pdas","associatedTokenAccount","owner","purchasedAsset","ownerAddress","purchase","TransactionBuilder","make","setFeePayer","setContext","add"],"mappings":"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"}