'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var constants = require('../constants.cjs');
var Model = require('../../../types/Model.cjs');
var Serializer = require('../../../types/Serializer.cjs');
var Account = require('../../../types/Account.cjs');
var Pda = require('../../../types/Pda.cjs');

/** @group Model Helpers */
const isCandyGuard = value => Model.isModel('candyGuard', value);

/** @group Model Helpers */
function assertCandyGuard(value) {
  Model.assertModel(isCandyGuard(value), `Expected CandyGuard model`);
}

/** @group Model Helpers */
const toCandyGuard = (account, metaplex) => {
  const candyGuardSerializer = Serializer.createSerializerFromSolitaType(mplCandyGuard.CandyGuard, mplCandyGuard.candyGuardBeet.description);
  const parsedCandyGuard = Serializer.deserializeAccount(account, candyGuardSerializer);
  const {
    guards,
    groups
  } = metaplex.candyMachines().guards().deserializeSettings(account.data.slice(constants.CANDY_GUARD_DATA), account.owner);
  return {
    model: 'candyGuard',
    address: new Pda.Pda(parsedCandyGuard.publicKey, parsedCandyGuard.data.bump),
    accountInfo: Account.toAccountInfo(account),
    baseAddress: parsedCandyGuard.data.base,
    authorityAddress: parsedCandyGuard.data.authority,
    guards,
    groups
  };
};

exports.assertCandyGuard = assertCandyGuard;
exports.isCandyGuard = isCandyGuard;
exports.toCandyGuard = toCandyGuard;
//# sourceMappingURL=CandyGuard.cjs.map
