{"version":3,"file":"SignerPlugins.cjs","sources":["../../src/SignerPlugins.ts"],"sourcesContent":["import { createSignerFromKeypair, generateSigner, Keypair } from './Keypair';\nimport type { UmiPlugin } from './UmiPlugin';\nimport type { Signer } from './Signer';\n\n/**\n * Umi plugin that sets the identity and the payer to the given signer.\n * @category Signers and PublicKeys\n */\nexport const signerIdentity = (signer: Signer, setPayer = true): UmiPlugin => ({\n  install(umi) {\n    umi.identity = signer;\n    if (setPayer) {\n      umi.payer = signer;\n    }\n  },\n});\n\n/**\n * Umi plugin that only sets the payer to the given signer.\n * @category Signers and PublicKeys\n */\nexport const signerPayer = (signer: Signer): UmiPlugin => ({\n  install(umi) {\n    umi.payer = signer;\n  },\n});\n\n/**\n * Umi plugin that sets the identity and the payer to a randomly generated signer.\n * @category Signers and PublicKeys\n */\nexport const generatedSignerIdentity = (setPayer = true): UmiPlugin => ({\n  install(umi) {\n    const signer = generateSigner(umi);\n    umi.use(signerIdentity(signer, setPayer));\n  },\n});\n\n/**\n * Umi plugin that only sets the payer to a randomly generated signer.\n * @category Signers and PublicKeys\n */\nexport const generatedSignerPayer = (): UmiPlugin => ({\n  install(umi) {\n    const signer = generateSigner(umi);\n    umi.use(signerPayer(signer));\n  },\n});\n\n/**\n * Umi plugin that sets the identity and the payer to a provided keypair.\n * @category Signers and PublicKeys\n */\nexport const keypairIdentity = (\n  keypair: Keypair,\n  setPayer = true\n): UmiPlugin => ({\n  install(umi) {\n    const signer = createSignerFromKeypair(umi, keypair);\n    umi.use(signerIdentity(signer, setPayer));\n  },\n});\n\n/**\n * Umi plugin that only sets the payer to a provided keypair.\n * @category Signers and PublicKeys\n */\nexport const keypairPayer = (keypair: Keypair): UmiPlugin => ({\n  install(umi) {\n    const signer = createSignerFromKeypair(umi, keypair);\n    umi.use(signerPayer(signer));\n  },\n});\n"],"names":["signerIdentity","signer","setPayer","install","umi","identity","payer","signerPayer","generatedSignerIdentity","generateSigner","use","generatedSignerPayer","keypairIdentity","keypair","createSignerFromKeypair","keypairPayer"],"mappings":";;;;;;AAIA;AACA;AACA;AACA;AACO,MAAMA,cAAc,GAAG,CAACC,MAAc,EAAEC,QAAQ,GAAG,IAAI,MAAiB;EAC7EC,OAAO,CAACC,GAAG,EAAE;IACXA,GAAG,CAACC,QAAQ,GAAGJ,MAAM,CAAA;AACrB,IAAA,IAAIC,QAAQ,EAAE;MACZE,GAAG,CAACE,KAAK,GAAGL,MAAM,CAAA;AACpB,KAAA;AACF,GAAA;AACF,CAAC,EAAC;;AAEF;AACA;AACA;AACA;AACaM,MAAAA,WAAW,GAAIN,MAAc,KAAiB;EACzDE,OAAO,CAACC,GAAG,EAAE;IACXA,GAAG,CAACE,KAAK,GAAGL,MAAM,CAAA;AACpB,GAAA;AACF,CAAC,EAAC;;AAEF;AACA;AACA;AACA;MACaO,uBAAuB,GAAG,CAACN,QAAQ,GAAG,IAAI,MAAiB;EACtEC,OAAO,CAACC,GAAG,EAAE;AACX,IAAA,MAAMH,MAAM,GAAGQ,sBAAc,CAACL,GAAG,CAAC,CAAA;IAClCA,GAAG,CAACM,GAAG,CAACV,cAAc,CAACC,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAA;AAC3C,GAAA;AACF,CAAC,EAAC;;AAEF;AACA;AACA;AACA;AACO,MAAMS,oBAAoB,GAAG,OAAkB;EACpDR,OAAO,CAACC,GAAG,EAAE;AACX,IAAA,MAAMH,MAAM,GAAGQ,sBAAc,CAACL,GAAG,CAAC,CAAA;AAClCA,IAAAA,GAAG,CAACM,GAAG,CAACH,WAAW,CAACN,MAAM,CAAC,CAAC,CAAA;AAC9B,GAAA;AACF,CAAC,EAAC;;AAEF;AACA;AACA;AACA;AACO,MAAMW,eAAe,GAAG,CAC7BC,OAAgB,EAChBX,QAAQ,GAAG,IAAI,MACA;EACfC,OAAO,CAACC,GAAG,EAAE;AACX,IAAA,MAAMH,MAAM,GAAGa,+BAAuB,CAACV,GAAG,EAAES,OAAO,CAAC,CAAA;IACpDT,GAAG,CAACM,GAAG,CAACV,cAAc,CAACC,MAAM,EAAEC,QAAQ,CAAC,CAAC,CAAA;AAC3C,GAAA;AACF,CAAC,EAAC;;AAEF;AACA;AACA;AACA;AACaa,MAAAA,YAAY,GAAIF,OAAgB,KAAiB;EAC5DV,OAAO,CAACC,GAAG,EAAE;AACX,IAAA,MAAMH,MAAM,GAAGa,+BAAuB,CAACV,GAAG,EAAES,OAAO,CAAC,CAAA;AACpDT,IAAAA,GAAG,CAACM,GAAG,CAACH,WAAW,CAACN,MAAM,CAAC,CAAC,CAAA;AAC9B,GAAA;AACF,CAAC;;;;;;;;;"}