import { createBurnInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { getSignerFromTokenMetadataAuthority, parseTokenMetadataAuthorization } from '../Authorization.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { token } from '../../../types/Amount.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// -----------------
// Operation
// -----------------

const Key = 'DeleteNftOperation';

/**
 * Deletes an existing NFT.
 *
 * ```ts
 * await metaplex
 *   .nfts()
 *   .delete({ mintAddress };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const deleteNftOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const deleteNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return deleteNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Deletes an existing NFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .delete({ mintAddress });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const deleteNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    ownerTokenAccount,
    collection,
    parentEditionMint,
    parentEditionToken,
    editionMarker,
    amount = token(1)
  } = params;
  const authority = params.authority ?? params.owner ?? metaplex.identity();
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const owner = getSignerFromTokenMetadataAuthority(authority).publicKey;
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: mintAddress,
    programs
  });
  const tokenAddress = ownerTokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: mintAddress,
    owner,
    programs
  });

  // Auth.
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: mintAddress,
    authority: '__kind' in authority ? authority : {
      __kind: 'holder',
      owner: authority,
      token: tokenAddress
    },
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createBurnInstruction({
      authority: auth.accounts.authority,
      collectionMetadata: collection ? metaplex.nfts().pdas().metadata({
        mint: collection,
        programs
      }) : undefined,
      metadata,
      edition,
      mint: mintAddress,
      token: auth.accounts.token,
      masterEdition: parentEditionMint ? metaplex.nfts().pdas().metadata({
        mint: parentEditionMint,
        programs
      }) : undefined,
      masterEditionMint: parentEditionMint,
      masterEditionToken: parentEditionToken,
      editionMarker,
      tokenRecord: auth.accounts.delegateRecord,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address
    }, {
      burnArgs: {
        __kind: 'V1',
        amount: amount.basisPoints
      }
    }, tokenMetadataProgram.address),
    signers: auth.signers,
    key: params.instructionKey ?? 'deleteNft'
  });
};

export { deleteNftBuilder, deleteNftOperation, deleteNftOperationHandler };
//# sourceMappingURL=deleteNft.mjs.map
