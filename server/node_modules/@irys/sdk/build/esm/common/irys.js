import buildIrysTransaction from "./transaction.js";
import Utils from "./utils.js";
import { withdrawBalance } from "./withdrawal.js";
import Query from "@irys/query";
export default class Irys {
    api;
    utils;
    uploader;
    funder;
    address;
    token;
    tokenConfig;
    provenance;
    transactions;
    _readyPromise;
    url;
    arbundles;
    IrysTransaction;
    static VERSION = "0.0.2";
    constructor({ url, arbundles }) {
        this.url = url;
        this.arbundles = arbundles;
        this.IrysTransaction = buildIrysTransaction(this);
    }
    get signer() {
        return this.tokenConfig.getSigner();
    }
    get search() {
        const q = new Query({ url: new URL("/graphql", this.url) });
        return q.search.bind(q);
    }
    query(queryOpts) {
        return new Query(queryOpts ?? { url: this.url });
    }
    async withdrawBalance(amount) {
        return withdrawBalance(this.utils, this.api, amount);
    }
    /**
     * Gets the balance for the loaded wallet
     * @returns balance (in winston)
     */
    async getLoadedBalance() {
        if (!this.address)
            throw new Error("address is undefined");
        return this.utils.getBalance(this.address);
    }
    /**
     * Gets the balance for the specified address
     * @param address address to query for
     * @returns the balance (in winston)
     */
    async getBalance(address) {
        return this.utils.getBalance(address);
    }
    /**
     * Sends amount atomic units to the specified bundler
     * @param amount amount to send in atomic units
     * @returns details about the fund transaction
     */
    async fund(amount, multiplier) {
        return this.funder.fund(amount, multiplier);
    }
    /**
     * Calculates the price for [bytes] bytes for the loaded token and Irys node.
     * @param bytes
     * @returns
     */
    async getPrice(bytes) {
        return this.utils.getPrice(this.token, bytes);
    }
    async verifyReceipt(receipt) {
        return Utils.verifyReceipt(this.arbundles, receipt);
    }
    /**
     * Create a new IrysTransactions (flex token arbundles dataItem)
     * @param data
     * @param opts - dataItemCreateOptions
     * @returns - a new IrysTransaction instance
     */
    createTransaction(data, opts) {
        return new this.IrysTransaction(data, this, opts);
    }
    /**
     * Returns the signer for the loaded token
     */
    getSigner() {
        return this.tokenConfig.getSigner();
    }
    async upload(data, opts) {
        return this.uploader.uploadData(data, opts);
    }
    async uploadWithReceipt(data, opts) {
        return this.uploader.uploadData(data, { ...opts, upload: { getReceiptSignature: true } });
    }
    async ready() {
        this.tokenConfig.ready ? await this.tokenConfig.ready() : true;
        this.address = this.tokenConfig.address;
        return this;
    }
    // eslint-disable-next-line @typescript-eslint/explicit-function-return-type
    get transaction() {
        // eslint-disable-next-line @typescript-eslint/no-this-alias
        const oThis = this;
        return {
            fromRaw(rawTransaction) {
                return new oThis.IrysTransaction(rawTransaction, oThis, { dataIsRawTransaction: true });
            },
        };
    }
}
//# sourceMappingURL=irys.js.map