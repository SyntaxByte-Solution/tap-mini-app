'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var CandyMachinesV2BuildersClient = require('./CandyMachinesV2BuildersClient.cjs');
var createCandyMachineV2 = require('./operations/createCandyMachineV2.cjs');
var deleteCandyMachineV2 = require('./operations/deleteCandyMachineV2.cjs');
var findCandyMachinesV2ByPublicKeyField = require('./operations/findCandyMachinesV2ByPublicKeyField.cjs');
var findCandyMachineV2ByAddress = require('./operations/findCandyMachineV2ByAddress.cjs');
var findMintedNftsByCandyMachineV2 = require('./operations/findMintedNftsByCandyMachineV2.cjs');
var insertItemsToCandyMachineV2 = require('./operations/insertItemsToCandyMachineV2.cjs');
var mintCandyMachineV2 = require('./operations/mintCandyMachineV2.cjs');
var updateCandyMachineV2 = require('./operations/updateCandyMachineV2.cjs');
var PublicKey = require('../../types/PublicKey.cjs');

/**
 * This is a client for the Candy Machine module.
 *
 * It enables us to interact with the Candy Machine program in order to
 * create, update and delete Candy Machines as well as mint from them.
 *
 * You may access this client via the `candyMachinesV2()` method of your `Metaplex` instance.
 *
 * ```ts
 * const candyMachineV2Client = metaplex.candyMachinesV2();
 * ```
 *
 * @example
 * You can create a new Candy Machine with minimum input like so.
 * By default, the current identity of the Metaplex instance will be
 * the authority of the Candy Machine.
 *
 * ```ts
 * const { candyMachine } = await metaplex
 *   .candyMachinesV2()
 *   .create({
 *     sellerFeeBasisPoints: 500, // 5% royalties
 *     price: sol(1.3), // 1.3 SOL
 *     itemsAvailable: toBigNumber(1000), // 1000 items available
 *   };
 * ```
 *
 * @see {@link CandyMachine} The `CandyMachine` model
 * @group Modules
 */
class CandyMachinesV2Client {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  /**
   * You may use the `builders()` client to access the
   * underlying Transaction Builders of this module.
   *
   * ```ts
   * const buildersClient = metaplex.candyMachinesV2().builders();
   * ```
   */
  builders() {
    return new CandyMachinesV2BuildersClient.CandyMachinesV2BuildersClient(this.metaplex);
  }

  /** {@inheritDoc createCandyMachineV2Operation} */
  create(input, options) {
    return this.metaplex.operations().execute(createCandyMachineV2.createCandyMachineV2Operation(input), options);
  }

  /** {@inheritDoc deleteCandyMachineV2Operation} */
  delete(input, options) {
    return this.metaplex.operations().execute(deleteCandyMachineV2.deleteCandyMachineV2Operation(input), options);
  }

  /** {@inheritDoc findCandyMachinesV2ByPublicKeyFieldOperation} */
  findAllBy(input, options) {
    return this.metaplex.operations().execute(findCandyMachinesV2ByPublicKeyField.findCandyMachinesV2ByPublicKeyFieldOperation(input), options);
  }

  /** {@inheritDoc findCandyMachineV2ByAddressOperation} */
  findByAddress(input, options) {
    return this.metaplex.operations().execute(findCandyMachineV2ByAddress.findCandyMachineV2ByAddressOperation(input), options);
  }

  /** {@inheritDoc findMintedNftsByCandyMachineV2Operation} */
  findMintedNfts(input, options) {
    return this.metaplex.operations().execute(findMintedNftsByCandyMachineV2.findMintedNftsByCandyMachineV2Operation(input), options);
  }

  /** {@inheritDoc insertItemsToCandyMachineV2Operation} */
  insertItems(input, options) {
    return this.metaplex.operations().execute(insertItemsToCandyMachineV2.insertItemsToCandyMachineV2Operation(input), options);
  }

  /** {@inheritDoc mintCandyMachineV2Operation} */
  mint(input, options) {
    return this.metaplex.operations().execute(mintCandyMachineV2.mintCandyMachineV2Operation(input), options);
  }

  /**
   * Helper method that refetches a given Candy Machine.
   *
   * ```ts
   * const candyMachine = await metaplex.candyMachinesV2().refresh(candyMachine);
   * ```
   */
  refresh(candyMachine, options) {
    return this.findByAddress({
      address: PublicKey.toPublicKey(candyMachine)
    }, options);
  }

  /** {@inheritDoc updateCandyMachineV2Operation} */
  update(input, options) {
    return this.metaplex.operations().execute(updateCandyMachineV2.updateCandyMachineV2Operation(input), options);
  }
}

exports.CandyMachinesV2Client = CandyMachinesV2Client;
//# sourceMappingURL=CandyMachinesV2Client.cjs.map
