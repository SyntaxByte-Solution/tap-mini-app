{"version":3,"file":"CandyMachineV2.mjs","sources":["../../../../../src/plugins/candyMachineV2Module/models/CandyMachineV2.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  EndSettingType,\n  WhitelistMintMode,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  countCandyMachineV2Items,\n  getCandyMachineV2UuidFromAddress,\n  parseCandyMachineV2Items,\n} from '../helpers';\nimport {\n  CandyMachineV2Account,\n  MaybeCandyMachineV2CollectionAccount,\n} from '../accounts';\nimport { CandyMachineV2Program } from '../program';\nimport {\n  amount,\n  Amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  SOL,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n  UnparsedAccount,\n  Creator,\n} from '@/types';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport { Mint } from '@/plugins/tokenModule';\n\n// -----------------\n// Model\n// -----------------\n\n/**\n * This model contains all the relevant information about a Candy Machine.\n * This includes its settings but also all of the items (a.k.a. config lines)\n * loaded inside the Candy Machine along with some statistics about the items.\n *\n * @group Models\n */\nexport type CandyMachineV2 = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'candyMachineV2';\n\n  /** The address of the Candy Machine account. */\n  readonly address: PublicKey;\n\n  /** The address of program that owns the Candy Machine account. */\n  readonly programAddress: PublicKey;\n\n  /** Whether this Candy Machine was created from v1 or v2. */\n  readonly version: 1 | 2;\n\n  /** The address of the authority that is allowed to manage this Candy Machine. */\n  readonly authorityAddress: PublicKey;\n\n  /**\n   * The address of the wallet receiving the payments for minting NFTs.\n   * If the Candy Machine accepts payments in SOL, this is the SOL treasury account.\n   * Otherwise, this is the token account associated with the treasury Mint.\n   */\n  readonly walletAddress: PublicKey;\n\n  /**\n   * The address of the Mint account of the SPL Token that should be used\n   * to accept payments for minting NFTs. When `null`, it means the\n   * Candy Machine account accepts payments in SOL.\n   */\n  readonly tokenMintAddress: Option<PublicKey>;\n\n  /**\n   * The mint address of the collection NFT that should be associated with\n   * minting NFTs. When `null`, it means NFTs will not be part of a\n   * collection when minted.\n   */\n  readonly collectionMintAddress: Option<PublicKey>;\n\n  /**\n   * A 6-character long unique identifier for the Candy Machine.\n   * This usually is the first 6 characters of the address.\n   * This is more of an internal field used by the program\n   * and you typically shouldn't need it.\n   */\n  readonly uuid: string;\n\n  /**\n   * The price of minting an NFT.\n   *\n   * If the Candy Machine uses no treasury mint (i.e. the `tokenMintAddress`\n   * is `null`), this amount will be in SOL. Otherwise, its currency will\n   * match the currency of the treasury mint.\n   */\n  readonly price: Amount;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   */\n  readonly symbol: string;\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points\n   * (i.e. 250 is 2.5%).\n   */\n  readonly sellerFeeBasisPoints: number;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   */\n  readonly isMutable: boolean;\n\n  /**\n   * Wheter the minted NFTs should use the Candy Machine authority\n   * as their update authority.\n   *\n   * We strongly recommend setting this to `true` unless you have a\n   * specific reason. When set to `false`, the update authority will\n   * be given to the address that minted the NFT and you will no longer\n   * be able to update the minted NFTs in the future.\n   */\n  readonly retainAuthority: boolean;\n\n  /**\n   * The timestamp of when the Candy Machine will be live.\n   *\n   * If this is `null` or if the timestamp refers to a time in the\n   * future, no one will be able to mint NFTs from the Candy Machine\n   * (except its authority that can bypass this live date).\n   */\n  readonly goLiveDate: Option<DateTime>;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   */\n  readonly maxEditionSupply: BigNumber;\n\n  /**\n   * The parsed items that are loaded in the Candy Machine.\n   *\n   * If the Candy Machine is using hidden settings,\n   * this will be an empty array.\n   */\n  readonly items: CandyMachineV2Item[];\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   */\n  readonly itemsAvailable: BigNumber;\n\n  /**\n   * The number of items that have been minted on this Candy Machine so far.\n   */\n  readonly itemsMinted: BigNumber;\n\n  /**\n   * The number of remaining items in the Candy Machine that can still be minted.\n   */\n  readonly itemsRemaining: BigNumber;\n\n  /**\n   * The number of items that have been inserted in the Candy Machine by\n   * its authority. If this number if lower than the number of items\n   * available, the Candy Machine is not ready and cannot be minted from.\n   *\n   * This field is irrelevant if the Candy Machine is using hidden settings.\n   */\n  readonly itemsLoaded: BigNumber;\n\n  /**\n   * Whether all items in the Candy Machine have been inserted by\n   * its authority.\n   *\n   * This field is irrelevant if the Candy Machine is using hidden settings.\n   */\n  readonly isFullyLoaded: boolean;\n\n  /**\n   * An optional constraint defining when the Candy Machine will end.\n   * If this is `null`, the Candy Machine will end when there are\n   * no more items to mint from (i.e. `itemsRemaining` is `0`).\n   */\n  readonly endSettings: Option<CandyMachineV2EndSettings>;\n\n  /** {@inheritDoc CandyMachineV2HiddenSettings} */\n  readonly hiddenSettings: Option<CandyMachineV2HiddenSettings>;\n\n  /** {@inheritDoc CandyMachineV2WhitelistMintSettings} */\n  readonly whitelistMintSettings: Option<CandyMachineV2WhitelistMintSettings>;\n\n  /** {@inheritDoc CandyMachineV2Gatekeeper} */\n  readonly gatekeeper: Option<CandyMachineV2Gatekeeper>;\n\n  /** {@inheritDoc Creator} */\n  readonly creators: Creator[];\n};\n\n/**\n * Represent an item inside a Candy Machine that has been or\n * will eventually be minted into an NFT.\n *\n * It only contains the name and the URI of the NFT to be as\n * the rest of the day will be shared by all NFTs and lives\n * in the Candy Machine configurations (e.g. `symbol`, `creators`, etc).\n *\n * @group Models\n */\nexport type CandyMachineV2Item = {\n  /** The name of the NFT to be. */\n  readonly name: string;\n\n  /**\n   * The URI of the NFT to be,\n   * pointing to some off-chain JSON Metadata.\n   */\n  readonly uri: string;\n};\n\n/**\n * End Settings provides a mechanism to stop the mint if a certain condition is\n * met without interaction.\n *\n * This type is a union type differentiated by the `endSettingType` field.\n * It can have one of the following values:\n *\n * - {@link CandyMachineV2EndSettingsAmount} if `endSettingType` is `EndSettingType.Amount`. \\\n *   It ends a Candy Machine after a certain amount of items have been minted.\n * - {@link CandyMachineV2EndSettingsDate} if `endSettingType` is `EndSettingType.Date`. \\\n *   It ends a Candy Machine after a certain date.\n *\n * @group Models\n */\nexport type CandyMachineV2EndSettings =\n  | CandyMachineV2EndSettingsAmount\n  | CandyMachineV2EndSettingsDate;\n\n/**\n * The \"Amount\" end setting allows us to end a Candy Machine\n * after a certain amount of items have been minted.\n *\n * @group Models\n */\nexport type CandyMachineV2EndSettingsAmount = {\n  /** Differentiates the types of end settings. */\n  readonly endSettingType: EndSettingType.Amount;\n\n  /** The maximum number of items to mint. */\n  readonly number: BigNumber;\n};\n\n/**\n * The \"Date\" end setting allows us to end a Candy Machine\n * after a given date and time.\n *\n * @group Models\n */\nexport type CandyMachineV2EndSettingsDate = {\n  /** Differentiates the types of end settings. */\n  readonly endSettingType: EndSettingType.Date;\n\n  /** The date after which the Candy Machine is closed. */\n  readonly date: DateTime;\n};\n\n/**\n * An optional setting that makes items in the Candy Machine hidden by\n * providing a single URI for all minted NFTs and the hash of a file that\n * maps mint number to actual NFT URIs.\n *\n * Hidden settings serve two purposes.\n * - First, it allows the creation of larger drops (20k+), since\n *   the JSON metadata URIs are not stored on-chain for each item.\n * - In turn, this also allows the creation of hide-and-reveal drops,\n *   where users discover which items they minted after the mint is complete.\n *\n * Once hidden settings are enabled, every minted NFT will have the same URI and the\n * name will be created by appending the mint number (e.g., “#45”) to the specified\n * name. The hash is expected to be a 32 character string corresponding to\n * the hash of a cache file that has the mapping between a mint number and the\n * actual metadata URI. This allows the order of the mint to be verified by\n * others after the mint is complete.\n *\n * Since the metadata URIs are not on-chain, it is possible to create very large\n * drops. The only caveat is that there is a need for an off-chain process to\n * update the metadata for each item. This is important otherwise all items\n * will have the same metadata.\n *\n * @group Models\n */\nexport type CandyMachineV2HiddenSettings = {\n  /**\n   * The base name for all minted NFTs.\n   * The number of the mint will be appended to this name.\n   */\n  readonly name: string;\n\n  /**\n   * The URI shared by all minted NFTs.\n   */\n  readonly uri: string;\n\n  /**\n   * A 32-character hash. In most cases this is the hash of the\n   * cache file with the mapping between mint numbers and metadata URIs\n   * so that the order can be verified when the mint is complete.\n   */\n  readonly hash: number[];\n};\n\n/**\n * Whitelist settings provide a variety of different use cases and revolve\n * around the idea of using custom SPL tokens to offer special rights to token\n * holders. How these SPL tokens are distributed is up to you.\n *\n * For example, you can offer a discount to token holders, you can allow token\n * holders to mint NFTs before everyone else, or a combination of both.\n *\n * @group Models\n */\nexport type CandyMachineV2WhitelistMintSettings = {\n  /**\n   * Determines how the whitelist token is used.\n   * - `WhitelistMintMode.BurnEveryTime`: a whitelist token is burned every time an NFT is mint.\n   * - `WhitelistMintMode.NeverBurn`: whitelist tokens are kept after minting.\n   */\n  readonly mode: WhitelistMintMode;\n\n  /** The mint address of the whitelist token. */\n  readonly mint: PublicKey;\n\n  /** Indicates whether whitelist token holders can mint before the live date. */\n  readonly presale: boolean;\n\n  /**\n   * The updated price for whitelist token holders.\n   * When provided, this `discountPrice` will be used instead of the original `price`\n   * for whitelist token holders only. When `null`, everybody will pay the original `price`.\n   */\n  readonly discountPrice: Option<Amount>;\n};\n\n/**\n * Gatekeeper settings allow us to protect ourselves against malicious actors such as bots.\n * Whilst the Candy Machine program itself has some protection mechanisms against bots,\n * you may want to add extra protection to ensure only humand can mint from your project.\n *\n * To enable gatekeeper settings, you must provide the address of a Gatekeeper Network\n * which usually encapsulates multiple gatekeeper providers and is responsible for\n * validating the legitimacy of the minting actor.\n *\n * @group Models\n */\nexport type CandyMachineV2Gatekeeper = {\n  /** The address of your desired Gatekeeper Network. */\n  readonly network: PublicKey;\n\n  /** Whether or not a new challenge should be required after each use. */\n  readonly expireOnUse: boolean;\n};\n\n// -----------------\n// Program to Model\n// -----------------\n\n/** @group Model Helpers */\nexport const isCandyMachineV2 = (value: any): value is CandyMachineV2 =>\n  typeof value === 'object' && value.model === 'candyMachineV2';\n\n/** @group Model Helpers */\nexport function assertCandyMachineV2(\n  value: any\n): asserts value is CandyMachineV2 {\n  assert(isCandyMachineV2(value), 'Expected CandyMachineV2 type');\n}\n\n/** @group Model Helpers */\nexport const toCandyMachineV2 = (\n  account: CandyMachineV2Account,\n  unparsedAccount: UnparsedAccount,\n  collectionAccount: MaybeCandyMachineV2CollectionAccount | null,\n  mint: Mint | null\n): CandyMachineV2 => {\n  assert(\n    mint === null ||\n      (account.data.tokenMint !== null &&\n        mint.address.equals(account.data.tokenMint))\n  );\n\n  const itemsAvailable = toBigNumber(account.data.data.itemsAvailable);\n  const itemsMinted = toBigNumber(account.data.itemsRedeemed);\n\n  const { endSettings } = account.data.data;\n  const { hiddenSettings } = account.data.data;\n  const { whitelistMintSettings } = account.data.data;\n  const { gatekeeper } = account.data.data;\n\n  const rawData = unparsedAccount.data;\n  const itemsLoaded = hiddenSettings\n    ? toBigNumber(0)\n    : countCandyMachineV2Items(rawData);\n  const items = hiddenSettings ? [] : parseCandyMachineV2Items(rawData);\n\n  return {\n    model: 'candyMachineV2',\n    address: account.publicKey,\n    programAddress: account.owner,\n    version: account.owner.equals(CandyMachineV2Program.publicKey) ? 2 : 1,\n    authorityAddress: account.data.authority,\n    walletAddress: account.data.wallet,\n    tokenMintAddress: account.data.tokenMint,\n    collectionMintAddress:\n      collectionAccount && collectionAccount.exists\n        ? collectionAccount.data.mint\n        : null,\n    uuid: account.data.data.uuid,\n\n    price: amount(account.data.data.price, mint ? mint.currency : SOL),\n    symbol: removeEmptyChars(account.data.data.symbol),\n    sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n    isMutable: account.data.data.isMutable,\n    retainAuthority: account.data.data.retainAuthority,\n    goLiveDate: toOptionDateTime(account.data.data.goLiveDate),\n    maxEditionSupply: toBigNumber(account.data.data.maxSupply),\n    items,\n    itemsAvailable,\n    itemsMinted,\n    itemsRemaining: toBigNumber(itemsAvailable.sub(itemsMinted)),\n    itemsLoaded,\n    isFullyLoaded: itemsAvailable.lte(itemsLoaded),\n    // eslint-disable-next-line no-nested-ternary\n    endSettings: endSettings\n      ? endSettings.endSettingType === EndSettingType.Date\n        ? {\n            endSettingType: EndSettingType.Date,\n            date: toDateTime(endSettings.number),\n          }\n        : {\n            endSettingType: EndSettingType.Amount,\n            number: toBigNumber(endSettings.number),\n          }\n      : null,\n    hiddenSettings,\n    whitelistMintSettings: whitelistMintSettings\n      ? {\n          ...whitelistMintSettings,\n          discountPrice: whitelistMintSettings.discountPrice\n            ? lamports(whitelistMintSettings.discountPrice)\n            : null,\n        }\n      : null,\n    gatekeeper: gatekeeper\n      ? {\n          ...gatekeeper,\n          network: gatekeeper.gatekeeperNetwork,\n        }\n      : null,\n    creators: account.data.data.creators,\n  };\n};\n\n// -----------------\n// Model to Configs\n// -----------------\n\n/**\n * This object provides a common interface for the configurations required\n * to create or update Candy Machines.\n *\n * @group Models\n */\nexport type CandyMachineV2Configs = {\n  /**\n   * The address of the wallet receiving the payments for minting NFTs.\n   * If the Candy Machine accepts payments in SOL, this is the SOL treasury account.\n   * Otherwise, this is the token account associated with the treasury Mint.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  wallet: PublicKey;\n\n  /**\n   * The address of the Mint account of the SPL Token that should be used\n   * to accept payments for minting NFTs. When `null`, it means the\n   * Candy Machine account accepts payments in SOL.\n   */\n  tokenMint: Option<PublicKey>;\n\n  /**\n   * The price of minting an NFT.\n   *\n   * If the Candy Machine uses no treasury mint (i.e. the `tokenMintAddress`\n   * is `null`), this amount will be in SOL. Otherwise, its currency will\n   * match the currency of the treasury mint.\n   *\n   * @example\n   * ```ts\n   * { price: sol(1.5) } // For 1.5 SOL.\n   * { price: token(320, 2, MYTOKEN) } // For 3.2 MYTOKEN which is a 2-decimal token.\n   * ```\n   */\n  price: Amount;\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points\n   *\n   * @example\n   * ```ts\n   * { sellerFeeBasisPoints: 250 } // For 2.5% royalties.\n   * ```\n   */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @example\n   * ```ts\n   * { itemsAvailable: toBigNumber(1000) } // For 1000 items.\n   * ```\n   */\n  itemsAvailable: BigNumber;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue `\"\"`\n   */\n  symbol: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue `toBigNumber(0)`\n   */\n  maxEditionSupply: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue `true`\n   */\n  isMutable: boolean;\n\n  /**\n   * Wheter the minted NFTs should use the Candy Machine authority\n   * as their update authority.\n   *\n   * We strongly recommend setting this to `true` unless you have a\n   * specific reason. When set to `false`, the update authority will\n   * be given to the address that minted the NFT and you will no longer\n   * be able to update the minted NFTs in the future.\n   *\n   * @defaultValue `true`\n   */\n  retainAuthority: boolean;\n\n  /**\n   * The timestamp of when the Candy Machine will be live.\n   *\n   * If this is `null` or if the timestamp refers to a time in the\n   * future, no one will be able to mint NFTs from the Candy Machine\n   * (except its authority that can bypass this live date).\n   *\n   * @defaultValue `null`\n   */\n  goLiveDate: Option<DateTime>;\n\n  /**\n   * An optional constraint defining when the Candy Machine will end.\n   * If this is `null`, the Candy Machine will end when there are\n   * no more items to mint from (i.e. `itemsRemaining` is `0`).\n   *\n   * @defaultValue `null`\n   */\n  endSettings: Option<CandyMachineV2EndSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineHiddenSettings}\n   * @defaultValue `null`\n   */\n  hiddenSettings: Option<CandyMachineV2HiddenSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineWhitelistMintSettings}\n   * @defaultValue `null`\n   */\n  whitelistMintSettings: Option<CandyMachineV2WhitelistMintSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineGatekeeper}\n   * @defaultValue `null`\n   */\n  gatekeeper: Option<CandyMachineV2Gatekeeper>;\n\n  /**\n   * {@inheritDoc Creator}\n   * @defaultValue\n   * ```ts\n   * [{\n   *   address: metaplex.identity().publicKey,\n   *   share: 100,\n   *   verified: false,\n   * }]\n   * ```\n   */\n  creators: Creator[];\n};\n\n/** @group Model Helpers */\nexport const toCandyMachineV2Configs = (\n  candyMachine: CandyMachineV2\n): CandyMachineV2Configs => {\n  return {\n    wallet: candyMachine.walletAddress,\n    tokenMint: candyMachine.tokenMintAddress,\n    ...candyMachine,\n  };\n};\n\n// -----------------\n// Configs to Program\n// -----------------\n\n/** @group Models */\nexport type CandyMachineV2InstructionData = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  data: CandyMachineData;\n};\n\n/** @group Model Helpers */\nexport const toCandyMachineV2InstructionData = (\n  address: PublicKey,\n  configs: CandyMachineV2Configs\n): CandyMachineV2InstructionData => {\n  const { endSettings } = configs;\n  const { whitelistMintSettings } = configs;\n  const { gatekeeper } = configs;\n\n  return {\n    wallet: configs.wallet,\n    tokenMint: configs.tokenMint,\n    data: {\n      ...configs,\n      uuid: getCandyMachineV2UuidFromAddress(address),\n      price: configs.price.basisPoints,\n      maxSupply: configs.maxEditionSupply,\n      endSettings: endSettings\n        ? {\n            ...endSettings,\n            number:\n              endSettings.endSettingType === EndSettingType.Date\n                ? endSettings.date\n                : endSettings.number,\n          }\n        : null,\n      whitelistMintSettings: whitelistMintSettings\n        ? {\n            ...whitelistMintSettings,\n            discountPrice:\n              whitelistMintSettings.discountPrice?.basisPoints ?? null,\n          }\n        : null,\n      gatekeeper: gatekeeper\n        ? {\n            ...gatekeeper,\n            gatekeeperNetwork: gatekeeper.network,\n          }\n        : null,\n    },\n  };\n};\n"],"names":["isCandyMachineV2","value","model","assertCandyMachineV2","assert","toCandyMachineV2","account","unparsedAccount","collectionAccount","mint","data","tokenMint","address","equals","itemsAvailable","toBigNumber","itemsMinted","itemsRedeemed","endSettings","hiddenSettings","whitelistMintSettings","gatekeeper","rawData","itemsLoaded","countCandyMachineV2Items","items","parseCandyMachineV2Items","publicKey","programAddress","owner","version","CandyMachineV2Program","authorityAddress","authority","walletAddress","wallet","tokenMintAddress","collectionMintAddress","exists","uuid","price","amount","currency","SOL","symbol","removeEmptyChars","sellerFeeBasisPoints","isMutable","retainAuthority","goLiveDate","toOptionDateTime","maxEditionSupply","maxSupply","itemsRemaining","sub","isFullyLoaded","lte","endSettingType","EndSettingType","Date","date","toDateTime","number","Amount","discountPrice","lamports","network","gatekeeperNetwork","creators","toCandyMachineV2Configs","candyMachine","toCandyMachineV2InstructionData","configs","getCandyMachineV2UuidFromAddress","basisPoints"],"mappings":"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"}