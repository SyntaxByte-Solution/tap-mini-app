'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var buffer = require('buffer');
var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var Serializer = require('../../../types/Serializer.cjs');
var Amount = require('../../../types/Amount.cjs');

/**
 * The solPayment guard is used to charge an
 * amount in SOL for the minted NFT.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 */

/** @internal */
const solPaymentGuardManifest = {
  name: 'solPayment',
  settingsBytes: 40,
  settingsSerializer: Serializer.mapSerializer(Serializer.createSerializerFromBeet(mplCandyGuard.solPaymentBeet), settings => ({
    ...settings,
    amount: Amount.lamports(settings.lamports)
  }), settings => ({
    ...settings,
    lamports: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    settings
  }) => {
    return {
      arguments: buffer.Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: settings.destination,
        isWritable: true
      }]
    };
  }
};

exports.solPaymentGuardManifest = solPaymentGuardManifest;
//# sourceMappingURL=solPayment.cjs.map
