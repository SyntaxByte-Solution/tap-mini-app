/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type ApproveCollectionAuthorityInstructionAccounts = {
    /** Collection Authority Record PDA */
    collectionAuthorityRecord: PublicKey | Pda;
    /** A Collection Authority */
    newCollectionAuthority: PublicKey | Pda;
    /** Update Authority of Collection NFT */
    updateAuthority?: Signer;
    /** Payer */
    payer?: Signer;
    /** Collection Metadata account */
    metadata?: PublicKey | Pda;
    /** Mint of Collection Metadata */
    mint: PublicKey | Pda;
    /** System program */
    systemProgram?: PublicKey | Pda;
    /** Rent info */
    rent?: PublicKey | Pda;
};
export type ApproveCollectionAuthorityInstructionData = {
    discriminator: number;
};
export type ApproveCollectionAuthorityInstructionDataArgs = {};
export declare function getApproveCollectionAuthorityInstructionDataSerializer(): Serializer<ApproveCollectionAuthorityInstructionDataArgs, ApproveCollectionAuthorityInstructionData>;
export declare function approveCollectionAuthority(context: Pick<Context, 'eddsa' | 'identity' | 'payer' | 'programs'>, input: ApproveCollectionAuthorityInstructionAccounts): TransactionBuilder;
