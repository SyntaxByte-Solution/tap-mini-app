import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';
import { MetaplexError } from '../../errors/MetaplexError.mjs';

/** @group Errors */
class CandyMachineV3Error extends MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Candy Machine V3', cause);
    _defineProperty(this, "name", 'CandyMachineV3Error');
  }
}

/** @group Errors */
class UnregisteredCandyGuardError extends CandyMachineV3Error {
  constructor(name) {
    const message = `The SDK is trying to access a custom Candy Guard named [${name}] ` + `but that guard was not registered in the SDK ` + 'Register your custom guard by calling the `metaplex.candyMachines().guards().register()` method.';
    super(message);
    _defineProperty(this, "name", 'UnregisteredCandyGuardError');
  }
}

/** @group Errors */
class CandyMachineIsFullError extends CandyMachineV3Error {
  constructor(index, itemsAvailable) {
    const message = `You are trying to add an item at index ${index} to a Candy Machine that ` + `can only hold a maximum of ${itemsAvailable} items. ` + 'Limit number of items you are adding or create a Candy Machine that can hold more of them.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineIsFullError');
  }
}

/** @group Errors */
class CandyMachineCannotAddAmountError extends CandyMachineV3Error {
  constructor(index, amount, itemsAvailable) {
    const message = `You are trying to add ${amount} items to candy machine starting at index ${index} ` + ` but it can only hold a maximum of ${itemsAvailable} items. ` + 'Limit number of assets you are adding or create a Candy Machine that can hold more of them.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineCannotAddAmountError');
  }
}

/** @group Errors */
class CandyMachineItemTextTooLongError extends CandyMachineV3Error {
  constructor(index, type, text, limit) {
    const message = `You are trying to add an item to a Candy Machine but its ${type} is too long. ` + `The item settings define the ${type} limit as ${limit} characters but the following ` + `content was provided [${text}] for the item at index ${index} ` + `Reduce the size of the ${type} for the item at index ${index}.`;
    super(message);
    _defineProperty(this, "name", 'CandyMachineItemTextTooLongError');
  }
}

/** @group Errors */
class CandyMachineBotTaxError extends CandyMachineV3Error {
  constructor(explorerLink, cause) {
    const message = `The NFT couldn't be fetched after being minted. ` + `This is most likely due to a bot tax that occured during minting. ` + `When someone tries to mint an NFT from a Candy Machine which cannot be minted from, ` + `the program will succeed and charge a small tax to fight against bots. ` + `Ensure you can mint from the Candy Machine. ` + `You may want to check the transaction logs for more details: [${explorerLink}].`;
    super(message, cause);
    _defineProperty(this, "name", 'CandyMachineBotTaxError');
  }
}

/** @group Errors */
class GuardGroupRequiredError extends CandyMachineV3Error {
  constructor(availableGroups) {
    const message = 'The provided Candy Machine defines groups of guards but no' + 'group label was provided to identity which group we should select. ' + 'Please provide the label of the group you wish to select from via the `group` parameter. ' + `The available groups are [${availableGroups.join(', ')}]`;
    super(message);
    _defineProperty(this, "name", 'GuardGroupRequiredError');
  }
}

/** @group Errors */
class SelectedGuardGroupDoesNotExistError extends CandyMachineV3Error {
  constructor(selectedGroup, availableGroups) {
    const message = `You're trying to select the guard group [${selectedGroup}] from a ` + 'Candy Machine but this group does not exists on this Candy Machine. ' + (availableGroups.length > 0 ? 'Please provide the label of a group that exists on the Candy Machine. ' + `The available groups are [${availableGroups.join(', ')}]` : 'There are no guard groups defined on the Candy Machine. ' + 'Please set the `group` parameter to `null` or remove it altogether.');
    super(message);
    _defineProperty(this, "name", 'SelectedGuardGroupDoesNotExistError');
  }
}

/** @group Errors */
class GuardMintSettingsMissingError extends CandyMachineV3Error {
  constructor(guardName) {
    const message = `The Candy Machine you are trying to mint from has the [${guardName}] guard enabled. ` + 'This guard requires you to provide some additional settings when minting which you did not provide. ' + `Please provide some minting settings for the [${guardName}] guard ` + `via the \`guards\` parameter like so: \`guards.${guardName} = {...}\`.`;
    super(message);
    _defineProperty(this, "name", 'GuardMintSettingsMissingError');
  }
}

/** @group Errors */
class GuardRouteNotSupportedError extends CandyMachineV3Error {
  constructor(guardName) {
    const message = `You are trying to call the route instruction of the [${guardName}] guard ` + 'but this guard does not support this feature or did not register it on the SDK. ' + 'Please select a guard that support the route instruction feature. ' + 'If you are using a custom guard, make sure you registered the route instruction ' + 'feature by implementing the `routeSettingsParser` method on the guard manifest.';
    super(message);
    _defineProperty(this, "name", 'GuardRouteNotSupportedError');
  }
}

/** @group Errors */
class CandyGuardRequiredOnCandyMachineError extends CandyMachineV3Error {
  constructor() {
    const message = `The provided Candy Machine does not have a Candy Guard associated with ` + `it yet, it is required for the operation you are trying to execute. ` + 'Please provide a Candy Machine with an associated Candy Guard account.';
    super(message);
    _defineProperty(this, "name", 'CandyGuardRequiredOnCandyMachineError');
  }
}

/** @group Errors */
class GuardNotEnabledError extends CandyMachineV3Error {
  constructor(guard, group) {
    const message = (group ? `The guard [${guard}] is not enabled on the group [${group}] of the Candy Machine.` : `The guard [${guard}] is not enabled on the Candy Machine. `) + 'Please provide a different guard or select a different group ' + 'such that the provided guard is enabled on the selected group.';
    super(message);
    _defineProperty(this, "name", 'GuardNotEnabledError');
  }
}

/** @group Errors */
class GuardGroupLabelTooLongError extends CandyMachineV3Error {
  constructor(label, maxLength) {
    const message = `The provided group label [${label}] is too long. ` + `Group labels cannot be longer than ${maxLength} characters. ` + 'Please provide a shorter group label.';
    super(message);
    _defineProperty(this, "name", 'GuardGroupLabelTooLongError');
  }
}

/** @group Errors */
class UnrecognizePathForRouteInstructionError extends CandyMachineV3Error {
  constructor(guard, path) {
    const message = `The provided path [${path}] does not exist on the route instruction of the [${guard}] guard. ` + 'Please provide a recognized path.';
    super(message);
    _defineProperty(this, "name", 'UnrecognizePathForRouteInstructionError');
  }
}

/** @group Errors */
class MintOwnerMustBeMintPayerError extends CandyMachineV3Error {
  constructor(guard) {
    const message = `The payer must be the owner when using the [${guard}] guard. ` + 'Please remove the `owner` attribute from the mint input so they can be the same.';
    super(message);
    _defineProperty(this, "name", 'MintOwnerMustBeMintPayerError');
  }
}

/** @group Errors */
class MaximumOfFiveAdditionalProgramsError extends CandyMachineV3Error {
  constructor() {
    const message = `There is a maximum of five additional programs when using the [programGate] guard. ` + 'Please reduce the number of additional programs to <= 5.';
    super(message);
    _defineProperty(this, "name", 'MaximumOfFiveAdditionalProgramsError');
  }
}

export { CandyGuardRequiredOnCandyMachineError, CandyMachineBotTaxError, CandyMachineCannotAddAmountError, CandyMachineIsFullError, CandyMachineItemTextTooLongError, CandyMachineV3Error, GuardGroupLabelTooLongError, GuardGroupRequiredError, GuardMintSettingsMissingError, GuardNotEnabledError, GuardRouteNotSupportedError, MaximumOfFiveAdditionalProgramsError, MintOwnerMustBeMintPayerError, SelectedGuardGroupDoesNotExistError, UnrecognizePathForRouteInstructionError, UnregisteredCandyGuardError };
//# sourceMappingURL=errors.mjs.map
