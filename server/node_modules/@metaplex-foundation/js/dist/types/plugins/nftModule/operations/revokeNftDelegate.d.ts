import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityHolder, TokenMetadataAuthorityMetadata, TokenMetadataAuthorizationDetails } from '../Authorization';
import { DelegateInput } from '../DelegateInput';
import { Sft } from '../models';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler, Signer } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "RevokeNftDelegateOperation";
/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const revokeNftDelegateOperation: import("../../../types").OperationConstructor<RevokeNftDelegateOperation, "RevokeNftDelegateOperation", RevokeNftDelegateInput, RevokeNftDelegateOutput>;
/**
 * @group Operations
 * @category Types
 */
export type RevokeNftDelegateOperation = Operation<typeof Key, RevokeNftDelegateInput, RevokeNftDelegateOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type RevokeNftDelegateInput = {
    /**
     * The NFT or SFT for which we want to revoke a delegate.
     * We only need its address and token standard.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to revoke a new delegate authority.
     *
     * Note that Delegate authorities are not supported for this
     * instruction as delegates cannot revoke other delegates.
     *
     * If a `Signer` is provided directly, it will be either
     * used as the update authority or as the token holder
     * based on the delegate type, i.g. `delegate.type`.
     *
     * If a `{ __kind: 'self'; delegate: Signer }` is
     * provided, it will assume the delegate
     * authority is trying to revoke itself.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority?: Signer | {
        __kind: 'self';
        delegate: Signer;
    } | TokenMetadataAuthorityMetadata | TokenMetadataAuthorityHolder;
    /**
     * The authorization rules and data to use
     * when revoking the delegate authority.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    /**
     * The role, address and approver of the delegate to revoke.
     */
    delegate: DelegateInput;
};
/**
 * @group Operations
 * @category Outputs
 */
export type RevokeNftDelegateOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const revokeNftDelegateOperationHandler: OperationHandler<RevokeNftDelegateOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type RevokeNftDelegateBuilderParams = Omit<RevokeNftDelegateInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const revokeNftDelegateBuilder: (metaplex: Metaplex, params: RevokeNftDelegateBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
