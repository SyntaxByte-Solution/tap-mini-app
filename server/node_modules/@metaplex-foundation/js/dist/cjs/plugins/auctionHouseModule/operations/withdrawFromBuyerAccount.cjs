'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplAuctionHouse = require('@metaplex-foundation/mpl-auction-house');
var errors = require('../errors.cjs');
var Operation = require('../../../types/Operation.cjs');
var Signer = require('../../../types/Signer.cjs');
var PublicKey = require('../../../types/PublicKey.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'WithdrawFromBuyerAccountOperation';

/**
 * Withdraws funds from the user's buyer escrow account for the given auction house.
 *
 * ```ts
 * await metaplex
 *   .auctionHouse()
 *   .withdrawFromBuyerAccount({ auctionHouse, buyer, amount };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const withdrawFromBuyerAccountOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const withdrawFromBuyerAccountOperationHandler = {
  handle: async (operation, metaplex, scope) => withdrawFromBuyerAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Withdraws funds from the user's buyer escrow account to the given auction house.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .auctionHouse()
 *   .builders()
 *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const withdrawFromBuyerAccountBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    amount
  } = params;
  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {
    throw new errors.AuctioneerAuthorityRequiredError();
  }
  const amountBasisPoint = amount.basisPoints;
  const buyer = params.buyer ?? metaplex.identity();
  const authority = params.authority ?? auctionHouse.authorityAddress;
  if (!Signer.isSigner(buyer) && !Signer.isSigner(authority)) {
    throw new errors.WithdrawFromBuyerAccountRequiresSignerError();
  }
  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({
    auctionHouse: auctionHouse.address,
    buyer: PublicKey.toPublicKey(buyer),
    programs
  });

  // Accounts,
  const accounts = {
    wallet: PublicKey.toPublicKey(buyer),
    receiptAccount: PublicKey.toPublicKey(buyer),
    escrowPaymentAccount: escrowPayment,
    treasuryMint: auctionHouse.treasuryMint.address,
    authority: PublicKey.toPublicKey(authority),
    auctionHouse: auctionHouse.address,
    auctionHouseFeeAccount: auctionHouse.feeAccountAddress
  };

  // Args.
  const args = {
    escrowPaymentBump: escrowPayment.bump,
    amount: amountBasisPoint
  };

  // Withdraw Instruction.
  let withdrawInstruction = mplAuctionHouse.createWithdrawInstruction(accounts, args);
  if (auctioneerAuthority) {
    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({
      auctionHouse: auctionHouse.address,
      auctioneerAuthority: auctioneerAuthority.publicKey,
      programs
    });
    const accountsWithAuctioneer = {
      ...accounts,
      auctioneerAuthority: auctioneerAuthority.publicKey,
      ahAuctioneerPda
    };
    withdrawInstruction = mplAuctionHouse.createAuctioneerWithdrawInstruction(accountsWithAuctioneer, args);
  }

  // Signers.
  const signer = Signer.isSigner(buyer) ? buyer : authority;
  const withdrawSigners = [signer, params.auctioneerAuthority].filter(Signer.isSigner);

  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.
  const signerKeyIndex = withdrawInstruction.keys.findIndex(key => key.pubkey.equals(signer.publicKey));
  withdrawInstruction.keys[signerKeyIndex].isSigner = true;
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Withdraw.
  .add({
    instruction: withdrawInstruction,
    signers: withdrawSigners,
    key: params.instructionKey ?? 'withdrawFromBuyerAccount'
  });
};

exports.withdrawFromBuyerAccountBuilder = withdrawFromBuyerAccountBuilder;
exports.withdrawFromBuyerAccountOperation = withdrawFromBuyerAccountOperation;
exports.withdrawFromBuyerAccountOperationHandler = withdrawFromBuyerAccountOperationHandler;
//# sourceMappingURL=withdrawFromBuyerAccount.cjs.map
