import { PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityMetadata, TokenMetadataAuthorizationDetails } from '../Authorization';
import { Sft } from '../models';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler, Signer, SplTokenAmount } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "MintNftOperation";
/**
 * Mint token(s) for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().mint({
 *   nftOrSft,
 *   toOwner,
 *   amount: token(5),
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const mintNftOperation: import("../../../types").OperationConstructor<MintNftOperation, "MintNftOperation", MintNftInput, MintNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type MintNftOperation = Operation<typeof Key, MintNftInput, MintNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type MintNftInput = {
    /**
     * The NFT or SFT to mint from.
     * We only need its address and token standard.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to mint the asset.
     *
     * This must be the update authority for Non-Fungible assets
     * and the mint authority for Semi-Fungible assets.
     *
     * Note that Delegate and Holder authorities
     * are not supported for this instruction.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority?: Signer | TokenMetadataAuthorityMetadata;
    /**
     * The authorization rules and data to use for the mint.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    /**
     * The owner of the destination token account.
     *
     * @defaultValue `metaplex.identity().publicKey`
     */
    toOwner?: PublicKey;
    /**
     * The address of the destination token account.
     *
     * This may be a regular token account or an associated token account.
     * If the token account does not exist, then it will be created but
     * only if it is an associated token account.
     *
     * @defaultValue Defaults to using the associated token account
     * from the `nftOrSft.address` and `toOwner` parameters.
     */
    toToken?: PublicKey;
    /**
     * The amount of tokens to mint.
     *
     * @defaultValue `token(1)`
     */
    amount?: SplTokenAmount;
};
/**
 * @group Operations
 * @category Outputs
 */
export type MintNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const mintNftOperationHandler: OperationHandler<MintNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type MintNftBuilderParams = Omit<MintNftInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Mint token(s) for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .mint({
 *     nftOrSft,
 *     toOwner,
 *     amount: token(5),
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const mintNftBuilder: (metaplex: Metaplex, params: MintNftBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
