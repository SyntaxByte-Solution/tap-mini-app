import { TokenGpaBuilder } from '../../tokenModule/gpaBuilders.mjs';
import { useOperation } from '../../../types/Operation.mjs';

// -----------------
// Operation
// -----------------

const Key = 'FindNftsByOwnerOperation';

/**
 * Finds multiple NFTs and SFTs by a given owner.
 *
 * ```ts
 * const nfts = await metaplex
 *   .nfts()
 *   .findAllByOwner({ owner };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findNftsByOwnerOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findNftsByOwnerOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      programs
    } = scope;
    const {
      owner
    } = operation.input;
    const tokenProgram = metaplex.programs().getToken(programs);
    const mints = await new TokenGpaBuilder(metaplex, tokenProgram.address).selectMint().whereOwner(owner).whereAmount(1).getDataAsPublicKeys();
    scope.throwIfCanceled();
    const nfts = await metaplex.nfts().findAllByMintList({
      mints
    }, scope);
    scope.throwIfCanceled();
    return nfts.filter(nft => nft !== null);
  }
};

export { findNftsByOwnerOperation, findNftsByOwnerOperationHandler };
//# sourceMappingURL=findNftsByOwner.mjs.map
