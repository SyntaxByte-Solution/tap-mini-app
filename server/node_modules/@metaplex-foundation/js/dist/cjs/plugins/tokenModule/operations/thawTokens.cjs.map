{"version":3,"file":"thawTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/thawTokens.ts"],"sourcesContent":["import { createThawAccountInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawTokensOperation' as const;\n\n/**\n * Thaws a token account.\n *\n * ```ts\n * await metaplex.tokens().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const thawTokensOperation = useOperation<ThawTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawTokensOperation = Operation<\n  typeof Key,\n  ThawTokensInput,\n  ThawTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The freeze authority as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   */\n  freezeAuthority: PublicKey | Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the freeze authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawTokensOperationHandler: OperationHandler<ThawTokensOperation> =\n  {\n    async handle(\n      operation: ThawTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ThawTokensOutput> {\n      return thawTokensBuilder(metaplex, operation.input, scope).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawTokensBuilderParams = Omit<\n  ThawTokensInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that thaws the token account. */\n  instructionKey?: string;\n};\n\n/**\n * Thaws a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex.tokens().builders().thaw({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawTokensBuilder = (\n  metaplex: Metaplex,\n  params: ThawTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority,\n  } = params;\n\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority)\n    ? [freezeAuthority.publicKey, [freezeAuthority]]\n    : [freezeAuthority, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: tokenOwner,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createThawAccountInstruction(\n        tokenAddressOrAta,\n        mintAddress,\n        authorityPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'thawTokens',\n    });\n};\n"],"names":["Key","thawTokensOperation","useOperation","thawTokensOperationHandler","handle","operation","metaplex","scope","thawTokensBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","tokenOwner","identity","publicKey","tokenAddress","multiSigners","freezeAuthority","authorityPublicKey","signers","isSigner","tokenProgram","getToken","tokenAddressOrAta","tokens","pdas","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","add","instruction","createThawAccountInstruction","address","key","instructionKey"],"mappings":";;;;;;;;;AAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,qBAA8B,CAAA;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,mBAAmB,GAAGC,sBAAY,CAAsBF,GAAG,EAAC;;AAEzE;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;AACO,MAAMG,0BAAiE,GAC5E;AACE,EAAA,MAAMC,MAAM,CACVC,SAA8B,EAC9BC,QAAkB,EAClBC,KAAqB,EACM;AAC3B,IAAA,OAAOC,iBAAiB,CAACF,QAAQ,EAAED,SAAS,CAACI,KAAK,EAAEF,KAAK,CAAC,CAACG,cAAc,CACvEJ,QAAQ,EACRC,KAAK,CAACI,cAAc,CACrB,CAAA;AACH,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,iBAAiB,GAAG,CAC/BF,QAAkB,EAClBM,MAA+B,EAC/BC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;AACXC,IAAAA,UAAU,GAAGb,QAAQ,CAACc,QAAQ,EAAE,CAACC,SAAS;IAC1CC,YAAY;AACZC,IAAAA,YAAY,GAAG,EAAE;AACjBC,IAAAA,eAAAA;AACF,GAAC,GAAGZ,MAAM,CAAA;EAEV,MAAM,CAACa,kBAAkB,EAAEC,OAAO,CAAC,GAAGC,eAAQ,CAACH,eAAe,CAAC,GAC3D,CAACA,eAAe,CAACH,SAAS,EAAE,CAACG,eAAe,CAAC,CAAC,GAC9C,CAACA,eAAe,EAAED,YAAY,CAAC,CAAA;EAEnC,MAAMK,YAAY,GAAGtB,QAAQ,CAACQ,QAAQ,EAAE,CAACe,QAAQ,CAACf,QAAQ,CAAC,CAAA;AAC3D,EAAA,MAAMgB,iBAAiB,GACrBR,YAAY,IACZhB,QAAQ,CAACyB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;AAC9CC,IAAAA,IAAI,EAAEhB,WAAW;AACjBiB,IAAAA,KAAK,EAAEhB,UAAU;AACjBL,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEJ,OAAOsB,qCAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACvB,KAAK,CAAC,CAClBwB,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEC,qCAA4B,CACvCX,iBAAiB,EACjBZ,WAAW,EACXO,kBAAkB,EAClBF,YAAY,EACZK,YAAY,CAACc,OAAO,CACrB;IACDhB,OAAO;AACPiB,IAAAA,GAAG,EAAE/B,MAAM,CAACgC,cAAc,IAAI,YAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}