'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var buffer = require('buffer');
var common = require('../../utils/common.cjs');
var SdkError = require('../../errors/SdkError.cjs');

const toMetaplexFile = (content, fileName, options = {}) => ({
  buffer: parseMetaplexFileContent(content),
  fileName,
  displayName: options.displayName ?? fileName,
  uniqueName: options.uniqueName ?? common.randomStr(),
  contentType: options.contentType ?? common.getContentType(fileName),
  extension: options.extension ?? common.getExtension(fileName),
  tags: options.tags ?? []
});
const toMetaplexFileFromBrowser = async (file, options = {}) => {
  const buffer = await file.arrayBuffer();
  return toMetaplexFile(buffer, file.name, options);
};
const toMetaplexFileFromJson = (json, fileName = 'inline.json', options = {}) => {
  let jsonString;
  try {
    jsonString = JSON.stringify(json);
  } catch (error) {
    throw new SdkError.InvalidJsonVariableError(error);
  }
  return toMetaplexFile(jsonString, fileName, options);
};
const parseMetaplexFileContent = content => {
  if (content instanceof ArrayBuffer) {
    return buffer.Buffer.from(new Uint8Array(content));
  }
  return buffer.Buffer.from(content);
};
const getBytesFromMetaplexFiles = (...files) => files.reduce((acc, file) => acc + file.buffer.byteLength, 0);
const getBrowserFileFromMetaplexFile = file => new File([file.buffer], file.fileName);
const isMetaplexFile = metaplexFile => {
  return metaplexFile != null && typeof metaplexFile === 'object' && 'buffer' in metaplexFile && 'fileName' in metaplexFile && 'displayName' in metaplexFile && 'uniqueName' in metaplexFile && 'contentType' in metaplexFile && 'extension' in metaplexFile && 'tags' in metaplexFile;
};

exports.getBrowserFileFromMetaplexFile = getBrowserFileFromMetaplexFile;
exports.getBytesFromMetaplexFiles = getBytesFromMetaplexFiles;
exports.isMetaplexFile = isMetaplexFile;
exports.parseMetaplexFileContent = parseMetaplexFileContent;
exports.toMetaplexFile = toMetaplexFile;
exports.toMetaplexFileFromBrowser = toMetaplexFileFromBrowser;
exports.toMetaplexFileFromJson = toMetaplexFileFromJson;
//# sourceMappingURL=MetaplexFile.cjs.map
