import { isSigner } from '../../types/Signer.mjs';

const parseTokenMetadataDelegateInput = (metaplex, mint, input, programs) => {
  if ('updateAuthority' in input) {
    return {
      isTokenDelegate: false,
      delegate: input.delegate,
      approver: input.updateAuthority,
      delegateRecord: metaplex.nfts().pdas().metadataDelegateRecord({
        mint,
        type: input.type,
        updateAuthority: input.updateAuthority,
        delegate: isSigner(input.delegate) ? input.delegate.publicKey : input.delegate,
        programs
      })
    };
  }
  const tokenAccount = input.token ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint,
    owner: input.owner,
    programs
  });
  return {
    isTokenDelegate: true,
    delegate: input.delegate,
    approver: input.owner,
    delegateRecord: metaplex.nfts().pdas().tokenRecord({
      mint,
      token: tokenAccount,
      programs
    }),
    tokenAccount
  };
};

export { parseTokenMetadataDelegateInput };
//# sourceMappingURL=DelegateInput.mjs.map
