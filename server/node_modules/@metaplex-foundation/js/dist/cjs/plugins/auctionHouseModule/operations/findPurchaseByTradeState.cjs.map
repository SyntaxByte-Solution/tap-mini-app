{"version":3,"file":"findPurchaseByTradeState.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchaseByTradeState.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { AuctionHouse, Purchase } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByTradeStateOperation' as const;\n\n/**\n * Finds a Purchase by its trade state address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByTradeState({ sellerTradeState, buyerTradeState, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchaseByTradeStateOperation =\n  useOperation<FindPurchaseByTradeStateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchaseByTradeStateOperation = Operation<\n  typeof Key,\n  FindPurchaseByTradeStateInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchaseByTradeStateInput = {\n  /** Seller trade state PDA account encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Buyer trade state PDA account encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** A model of the Auction House related to this purchase. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchaseByTradeStateOperationHandler: OperationHandler<FindPurchaseByTradeStateOperation> =\n  {\n    handle: async (\n      operation: FindPurchaseByTradeStateOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { sellerTradeState, buyerTradeState } = operation.input;\n      const receiptAddress = metaplex.auctionHouse().pdas().purchaseReceipt({\n        listingTradeState: sellerTradeState,\n        bidTradeState: buyerTradeState,\n        programs: scope.programs,\n      });\n\n      return metaplex\n        .auctionHouse()\n        .findPurchaseByReceipt({ receiptAddress, ...operation.input }, scope);\n    },\n  };\n"],"names":["Key","findPurchaseByTradeStateOperation","useOperation","findPurchaseByTradeStateOperationHandler","handle","operation","metaplex","scope","sellerTradeState","buyerTradeState","input","receiptAddress","auctionHouse","pdas","purchaseReceipt","listingTradeState","bidTradeState","programs","findPurchaseByReceipt"],"mappings":";;;;;;AAUA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,mCAA4C,CAAA;;AAExD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,iCAAiC,GAC5CC,sBAAY,CAAoCF,GAAG,EAAC;;AAEtD;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACO,MAAMG,wCAA6F,GACxG;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA4C,EAC5CC,QAAkB,EAClBC,KAAqB,KAClB;IACH,MAAM;MAAEC,gBAAgB;AAAEC,MAAAA,eAAAA;KAAiB,GAAGJ,SAAS,CAACK,KAAK,CAAA;IAC7D,MAAMC,cAAc,GAAGL,QAAQ,CAACM,YAAY,EAAE,CAACC,IAAI,EAAE,CAACC,eAAe,CAAC;AACpEC,MAAAA,iBAAiB,EAAEP,gBAAgB;AACnCQ,MAAAA,aAAa,EAAEP,eAAe;MAC9BQ,QAAQ,EAAEV,KAAK,CAACU,QAAAA;AAClB,KAAC,CAAC,CAAA;AAEF,IAAA,OAAOX,QAAQ,CACZM,YAAY,EAAE,CACdM,qBAAqB,CAAC;MAAEP,cAAc;AAAE,MAAA,GAAGN,SAAS,CAACK,KAAAA;KAAO,EAAEH,KAAK,CAAC,CAAA;AACzE,GAAA;AACF;;;;;"}