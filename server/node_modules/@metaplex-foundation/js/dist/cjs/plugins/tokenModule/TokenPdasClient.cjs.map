{"version":3,"file":"TokenPdasClient.cjs","sources":["../../../../src/plugins/tokenModule/TokenPdasClient.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Pda, Program, PublicKey } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the Token module.\n *\n * @see {@link TokenClient}\n * @group Module Pdas\n */\nexport class TokenPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the address of the Associated Token Account. */\n  associatedTokenAccount({\n    mint,\n    owner,\n    programs,\n  }: {\n    /** The address of the mint account. */\n    mint: PublicKey;\n    /** The address of the owner account. */\n    owner: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const tokenProgram = this.metaplex.programs().getToken(programs);\n    const associatedTokenProgram = this.metaplex\n      .programs()\n      .getAssociatedToken(programs);\n    return Pda.find(associatedTokenProgram.address, [\n      owner.toBuffer(),\n      tokenProgram.address.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n}\n"],"names":["TokenPdasClient","constructor","metaplex","associatedTokenAccount","mint","owner","programs","tokenProgram","getToken","associatedTokenProgram","getAssociatedToken","Pda","find","address","toBuffer"],"mappings":";;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,eAAe,CAAC;EAC3BC,WAAW,CAAoBC,QAAkB,EAAE;IAAA,IAApBA,CAAAA,QAAkB,GAAlBA,QAAkB,CAAA;AAAG,GAAA;;AAEpD;AACAC,EAAAA,sBAAsB,CAAC;IACrBC,IAAI;IACJC,KAAK;AACLC,IAAAA,QAAAA;AAQF,GAAC,EAAO;AACN,IAAA,MAAMC,YAAY,GAAG,IAAI,CAACL,QAAQ,CAACI,QAAQ,EAAE,CAACE,QAAQ,CAACF,QAAQ,CAAC,CAAA;AAChE,IAAA,MAAMG,sBAAsB,GAAG,IAAI,CAACP,QAAQ,CACzCI,QAAQ,EAAE,CACVI,kBAAkB,CAACJ,QAAQ,CAAC,CAAA;IAC/B,OAAOK,OAAG,CAACC,IAAI,CAACH,sBAAsB,CAACI,OAAO,EAAE,CAC9CR,KAAK,CAACS,QAAQ,EAAE,EAChBP,YAAY,CAACM,OAAO,CAACC,QAAQ,EAAE,EAC/BV,IAAI,CAACU,QAAQ,EAAE,CAChB,CAAC,CAAA;AACJ,GAAA;AACF;;;;"}