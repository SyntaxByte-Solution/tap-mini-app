import { Uses } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { Nft } from '../models';
import { Option, TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { CreatorInput, Operation, OperationHandler, Signer } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "CreateCompressedNftOperation";
/**
 * Creates a new compressed NFT.
 *
 * ```ts
 * const { nft } = await metaplex
 *   .nfts()
 *   .createNft({
 *     name: 'My SFT',
 *     uri: 'https://example.com/my-nft',
 *     sellerFeeBasisPoints: 250, // 2.5%
 *     tree: merkleTreeAccount
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const createCompressedNftOperation: import("../../../types").OperationConstructor<CreateCompressedNftOperation, "CreateCompressedNftOperation", CreateCompressedNftInput, CreateCompressedNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type CreateCompressedNftOperation = Operation<typeof Key, CreateCompressedNftInput, CreateCompressedNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type CreateCompressedNftInput = {
    /**
     * The authority that will be able to make changes
     * to the created SFT.
     *
     * This is required as a Signer because creating the
     * metadata account requires the update authority to be part
     * of the creators array as a verified creator.
     *
     * @defaultValue `metaplex.identity()`
     */
    updateAuthority?: Signer;
    /**
     * The address corresponding to the merkle tree where this
     * compressed NFT will be stored.
     *
     * Must be created ahead of time.
     *
     * @defaultValue `metaplex.identity()`
     */
    tree: PublicKey;
    /**
     * The owner of a token account associated with the SFT to create.
     *
     * This is completely optional as creating an SFT does not require
     * the existence of a token account. When provided, an associated
     * token account will be created from the given owner.
     *
     * You may alternatively pass the `tokenAddress` parameter instead.
     *
     * @defaultValue Defaults to not creating and/or minting
     * any token account.
     */
    tokenOwner?: PublicKey;
    /** The URI that points to the JSON metadata of the asset. */
    uri: string;
    /** The on-chain name of the asset, e.g. "My SFT". */
    name: string;
    /**
     * The royalties in percent basis point (i.e. 250 is 2.5%) that
     * should be paid to the creators on each secondary sale.
     */
    sellerFeeBasisPoints: number;
    /**
     * The on-chain symbol of the asset, stored in the Metadata account.
     * E.g. "MYSFT".
     *
     * @defaultValue `""`
     */
    symbol?: string;
    /**
     * {@inheritDoc CreatorInput}
     * @defaultValue
     * Defaults to using the provided `updateAuthority` as the only verified creator.
     * ```ts
     * [{
     *   address: updateAuthority.publicKey,
     *   authority: updateAuthority,
     *   share: 100,
     * }]
     * ```
     */
    creators?: CreatorInput[];
    /**
     * Whether or not the SFT's metadata is mutable.
     * When set to `false` no one can update the Metadata account,
     * not even the update authority.
     *
     * @defaultValue `true`
     */
    isMutable?: boolean;
    /**
     * When this field is not `null`, it indicates that the SFT
     * can be "used" by its owner or any approved "use authorities".
     *
     * @defaultValue `null`
     */
    uses?: Option<Uses>;
    /**
     * The Collection NFT that this new SFT belongs to.
     * When `null`, the created SFT will not be part of a collection.
     *
     * @defaultValue `null`
     */
    collection?: Option<PublicKey>;
    /**
     * The collection authority that should sign the created SFT
     * to prove that it is part of the provided collection.
     * When `null`, the provided `collection` will not be verified.
     *
     * @defaultValue `null`
     */
    collectionAuthority?: Option<Signer>;
    /**
     * Whether or not the provided `collectionAuthority` is a delegated
     * collection authority, i.e. it was approved by the update authority
     * using `metaplex.nfts().approveCollectionAuthority()`.
     *
     * @defaultValue `false`
     */
    collectionAuthorityIsDelegated?: boolean;
};
/**
 * @group Operations
 * @category Outputs
 */
export type CreateCompressedNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
    /** The newly created NFT and, potentially, its associated token. */
    nft: Nft;
    /** The mint address is the compressed NFT's assetId. */
    mintAddress: PublicKey;
    /** The metadata address is the compressed NFT's assetId. */
    metadataAddress: PublicKey;
    /** The master edition address is the compressed NFT's assetId. */
    masterEditionAddress: PublicKey;
    /** The token address is the compressed NFT's assetId. */
    tokenAddress: PublicKey;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const createCompressedNftOperationHandler: OperationHandler<CreateCompressedNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type CreateCompressedNftBuilderParams = Omit<CreateCompressedNftInput, 'confirmOptions' | 'tokenAddress' | 'metadataAddress' | 'masterEditionAddress'> & {
    /**
     * Whether or not the provided token account already exists.
     * If `false`, we'll add another instruction to create it.
     *
     * @defaultValue `true`
     */
    tokenExists?: boolean;
    /** A key to distinguish the instruction that creates the mint account. */
    createMintAccountInstructionKey?: string;
    /** A key to distinguish the instruction that initializes the mint account. */
    initializeMintInstructionKey?: string;
    /** A key to distinguish the instruction that creates the associated token account. */
    createAssociatedTokenAccountInstructionKey?: string;
    /** A key to distinguish the instruction that creates the token account. */
    createTokenAccountInstructionKey?: string;
    /** A key to distinguish the instruction that initializes the token account. */
    initializeTokenInstructionKey?: string;
    /** A key to distinguish the instruction that mints tokens. */
    mintTokensInstructionKey?: string;
    /** A key to distinguish the instruction that creates the metadata account. */
    createMetadataInstructionKey?: string;
};
/**
 * @group Transaction Builders
 * @category Contexts
 */
export type CreateCompressedNftBuilderContext = Omit<CreateCompressedNftOutput, 'response' | 'nft'>;
/**
 * Creates a new compressed NFT.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .nfts()
 *   .builders()
 *   .createCompressedNft({
 *     name: 'My SFT',
 *     uri: 'https://example.com/my-nft',
 *     sellerFeeBasisPoints: 250, // 2.5%
 *     tree: merkleTreeAccount
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const createCompressedNftBuilder: (metaplex: Metaplex, params: CreateCompressedNftBuilderParams, options?: TransactionBuilderOptions) => Promise<TransactionBuilder<CreateCompressedNftBuilderContext>>;
export {};
