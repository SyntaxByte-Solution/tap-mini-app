{"version":3,"file":"revokeNftCollectionAuthority.cjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftCollectionAuthority.ts"],"sourcesContent":["import { createRevokeCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftCollectionAuthorityOperation' as const;\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityOperation =\n  useOperation<RevokeNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftCollectionAuthorityInput,\n  RevokeNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to revoke. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * An authority that can revoke this collection authority.\n   *\n   * This can either be the collection's update authority or the delegated\n   * collection authority itself (i.e. revoking its own rights).\n   */\n  revokeAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftCollectionAuthorityOperationHandler: OperationHandler<RevokeNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftCollectionAuthorityOutput> => {\n      return revokeNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityBuilderParams = Omit<\n  RevokeNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    revokeAuthority = metaplex.identity(),\n  } = params;\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  const instruction = createRevokeCollectionAuthorityInstruction(\n    {\n      collectionAuthorityRecord,\n      delegateAuthority: collectionAuthority,\n      revokeAuthority: revokeAuthority.publicKey,\n      metadata,\n      mint: mintAddress,\n    },\n    tokenMetadataProgram.address\n  );\n\n  // Temporary fix. The Shank macro wrongfully ask for the delegateAuthority to be a signer.\n  // https://github.com/metaplex-foundation/metaplex-program-library/pull/639\n  instruction.keys[1].isSigner = false;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the collection authority.\n      .add({\n        instruction,\n        signers: [revokeAuthority],\n        key: params.instructionKey ?? 'revokeCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftCollectionAuthorityOperation","useOperation","revokeNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","revokeAuthority","identity","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","instruction","createRevokeCollectionAuthorityInstruction","delegateAuthority","publicKey","address","keys","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAgD,CAAA;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,qCAAqC,GAChDC,sBAAY,CAAwCF,GAAG,EAAC;;AAE1D;AACA;AACA;AACA;;AAoCA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAgD,EAChDC,QAAkB,EAClBC,KAAqB,KAC2B;AAChD,IAAA,OAAOC,mCAAmC,CACxCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,mCAAmC,GAAG,CACjDF,QAAkB,EAClBM,MAAiD,EACjDC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;IACXC,mBAAmB;IACnBC,eAAe,GAAGd,QAAQ,CAACe,QAAQ,EAAA;AACrC,GAAC,GAAGT,MAAM,CAAA;EAEV,MAAMU,oBAAoB,GAAGhB,QAAQ,CAACQ,QAAQ,EAAE,CAACS,gBAAgB,CAACT,QAAQ,CAAC,CAAA;EAC3E,MAAMU,QAAQ,GAAGlB,QAAQ,CAACmB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;AAC/CG,IAAAA,IAAI,EAAET,WAAW;AACjBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMc,yBAAyB,GAAGtB,QAAQ,CACvCmB,IAAI,EAAE,CACNC,IAAI,EAAE,CACNE,yBAAyB,CAAC;AACzBD,IAAAA,IAAI,EAAET,WAAW;IACjBC,mBAAmB;AACnBL,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEJ,MAAMe,WAAW,GAAGC,2DAA0C,CAC5D;IACEF,yBAAyB;AACzBG,IAAAA,iBAAiB,EAAEZ,mBAAmB;IACtCC,eAAe,EAAEA,eAAe,CAACY,SAAS;IAC1CR,QAAQ;AACRG,IAAAA,IAAI,EAAET,WAAAA;AACR,GAAC,EACDI,oBAAoB,CAACW,OAAO,CAC7B,CAAA;;AAED;AACA;EACAJ,WAAW,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,QAAQ,GAAG,KAAK,CAAA;AAEpC,EAAA,OACEC,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACvB,KAAK,CAAA;;AAElB;AAAA,GACCwB,GAAG,CAAC;IACHV,WAAW;IACXW,OAAO,EAAE,CAACpB,eAAe,CAAC;AAC1BqB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAc,IAAI,2BAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;;;"}