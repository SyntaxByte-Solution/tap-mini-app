export class Transaction {
    irys;
    constructor(irys) {
        this.irys = irys;
    }
    async getById(id) {
        const res = (await this.query({ ids: [id], limit: 1 })).at(0);
        if (!res)
            throw new Error(`Unable to locate tx with id ${id}`);
        return res;
    }
    async getByOwner(owner) {
        const res = (await this.query({ owners: [owner], limit: 1 })).at(0);
        if (!res)
            throw new Error(`Unable to locate tx with owner ${owner}`);
        return res;
    }
    async getByTag(name, value) {
        const res = (await this.query({ tags: [{ name, values: [value] }], limit: 1 })).at(0);
        if (!res)
            throw new Error(`Unable to locate tx with tag ${name}:${value}`);
        return res;
    }
    async query(parameters) {
        // full bundler node GQL query
        const query = `
    query ($ids: [String!], $after: String, $currency: String, $owners: [String!], $limit: Int, $order: SortOrder, $hasTags: Boolean, $tags: [TagFilter!]) {
      transactions(ids: $ids, after: $after, currency: $currency, owners: $owners, limit: $limit, order: $order, hasTags: $hasTags, tags: $tags) {
        edges {
          cursor
          node {
            address
            currency
            id
            receipt {
              deadlineHeight
              signature
              timestamp
              version
            }
            signature
            tags {
              name
              value
            }
            timestamp
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
    }
    `;
        const txs = [];
        let endCursor = null;
        do {
            const gqlRes = await this.irys.api.post("/graphql", {
                query,
                variables: { ...parameters, after: endCursor ?? parameters.after },
            }, undefined);
            endCursor = gqlRes.data.data.transactions?.pageInfo?.hasNextPage ? gqlRes.data.data.transactions.pageInfo.endCursor : null;
            txs.push(...gqlRes.data.data.transactions.edges.map((t) => t.node));
        } while (endCursor);
        return txs;
    }
}
//# sourceMappingURL=transactions.js.map