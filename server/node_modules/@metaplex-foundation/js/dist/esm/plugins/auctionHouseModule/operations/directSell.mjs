import { AuctioneerAuthorityRequiredError } from '../errors.mjs';
import { isPrivateBid } from '../models/Bid.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { toPublicKey } from '../../../types/PublicKey.mjs';
import { now } from '../../../types/DateTime.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// -----------------
// Operation
// -----------------

const Key = 'DirectSellOperation';

/**
 * Creates a listing on a given asset and then executes a sell on the created bid and listing.
 *
 * ```ts
 * await metaplex
 *   .auctionHouse()
 *   .sell({ auctionHouse, bid };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const directSellOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const directSellOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const builder = await directSellBuilder(metaplex, operation.input, scope);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Creates a listing on a given asset and executes a sale on the created listing and given bid.
 *
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .auctionHouse()
 *   .builders()
 *   .sell({ auctionHouse, bid, seller })
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const directSellBuilder = async (metaplex, params, options = {}) => {
  // Data.
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    bid,
    seller = metaplex.identity(),
    authority = auctionHouse.authorityAddress,
    bookkeeper = metaplex.identity(),
    createListingInstructionKey,
    executeSaleInstructionKey
  } = params;
  const {
    hasAuctioneer
  } = auctionHouse;
  const {
    tokens,
    price,
    buyerAddress
  } = bid;
  const printReceipt = (params.printReceipt ?? true) && Boolean(bid.receiptAddress);
  if (hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const asset = isPrivateBid(bid) ? bid.asset : {
    ...bid.asset,
    token: params.sellerToken
  };
  const listingBuilder = metaplex.auctionHouse().builders().list({
    mintAccount: asset.mint.address,
    price,
    auctionHouse,
    auctioneerAuthority,
    seller,
    authority,
    tokenAccount: asset.token.address,
    tokens,
    printReceipt,
    bookkeeper,
    instructionKey: createListingInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt,
    sellerTradeState
  } = listingBuilder.getContext();
  const listing = {
    model: 'listing',
    lazy: false,
    auctionHouse,
    asset,
    tradeStateAddress: sellerTradeState,
    bookkeeperAddress: toPublicKey(bookkeeper),
    sellerAddress: toPublicKey(seller),
    receiptAddress: receipt,
    purchaseReceiptAddress: null,
    price,
    tokens,
    createdAt: now(),
    canceledAt: null
  };
  const saleBuilder = metaplex.auctionHouse().builders().executeSale({
    auctionHouse,
    auctioneerAuthority,
    bid,
    listing,
    printReceipt,
    bookkeeper,
    instructionKey: executeSaleInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt: receiptAddress
  } = saleBuilder.getContext();
  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.address,
    owner: buyerAddress,
    programs
  });
  const purchasedAsset = {
    ...asset,
    token: {
      ...asset.token,
      address: buyerTokenAccount,
      ownerAddress: buyerAddress
    }
  };
  const purchase = {
    auctionHouse,
    model: 'purchase',
    lazy: false,
    asset: purchasedAsset,
    buyerAddress,
    sellerAddress: toPublicKey(seller),
    bookkeeperAddress: toPublicKey(bookkeeper),
    receiptAddress,
    price: bid.price,
    tokens,
    createdAt: now()
  };
  return TransactionBuilder.make().setFeePayer(payer).setContext({
    listing,
    purchase
  }).add(listingBuilder).add(saleBuilder);
};

export { directSellBuilder, directSellOperation, directSellOperationHandler };
//# sourceMappingURL=directSell.mjs.map
