{"version":3,"file":"Sft.cjs","sources":["../../../../../src/plugins/nftModule/models/Sft.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport type { Mint, Token } from '../../tokenModule';\nimport type { Metadata } from './Metadata';\nimport { assert } from '@/utils';\nimport { amount, Pda } from '@/types';\n\n/** @group Models */\nexport type Sft = Omit<Metadata, 'model' | 'address' | 'mintAddress'> &\n  Readonly<{\n    model: 'sft';\n\n    /** The mint address of the SFT. */\n    address: PublicKey;\n\n    /** The metadata address of the SFT. */\n    metadataAddress: Pda;\n\n    /** The mint account of the SFT. */\n    mint: Mint;\n  }>;\n\n/** @group Model Helpers */\nexport const isSft = (value: any): value is Sft =>\n  typeof value === 'object' && value.model === 'sft';\n\n/** @group Model Helpers */\nexport function assertSft(value: any): asserts value is Sft {\n  assert(isSft(value), `Expected Sft model`);\n}\n\n/** @group Model Helpers */\nexport const toSft = (metadata: Metadata, mint: Mint): Sft => {\n  const { address, mintAddress, ...shared } = metadata;\n  assert(\n    mintAddress.equals(mint.address),\n    'The provided mint does not match the mint address in the metadata'\n  );\n\n  const currency = {\n    ...mint.currency,\n    symbol: metadata.symbol || 'Token',\n  };\n\n  return {\n    ...shared,\n    model: 'sft',\n    address: mintAddress,\n    metadataAddress: address,\n    mint: {\n      ...mint,\n      currency,\n      supply: amount(mint.supply.basisPoints, currency),\n    },\n  };\n};\n\n/** @group Models */\nexport type SftWithToken = Sft & { token: Token };\n\n/** @group Model Helpers */\nexport const isSftWithToken = (value: any): value is SftWithToken =>\n  isSft(value) && 'token' in value;\n\n/** @group Model Helpers */\nexport function assertSftWithToken(value: any): asserts value is SftWithToken {\n  assert(isSftWithToken(value), `Expected Sft model with token`);\n}\n\n/** @group Model Helpers */\nexport const toSftWithToken = (\n  metadata: Metadata,\n  mint: Mint,\n  token: Token\n): SftWithToken => {\n  const sft = toSft(metadata, mint);\n  const { currency } = sft.mint;\n  return {\n    ...sft,\n    token: {\n      ...token,\n      amount: amount(token.amount.basisPoints, currency),\n      delegateAmount: amount(token.delegateAmount.basisPoints, currency),\n    },\n  };\n};\n"],"names":["isSft","value","model","assertSft","assert","toSft","metadata","mint","address","mintAddress","shared","equals","currency","symbol","metadataAddress","supply","amount","basisPoints","isSftWithToken","assertSftWithToken","toSftWithToken","token","sft","delegateAmount"],"mappings":";;;;;;;AAMA;;AAeA;AACaA,MAAAA,KAAK,GAAIC,KAAU,IAC9B,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,KAAK,MAAK;;AAEpD;AACO,SAASC,SAAS,CAACF,KAAU,EAAwB;AAC1DG,EAAAA,iBAAM,CAACJ,KAAK,CAACC,KAAK,CAAC,EAAG,oBAAmB,CAAC,CAAA;AAC5C,CAAA;;AAEA;MACaI,KAAK,GAAG,CAACC,QAAkB,EAAEC,IAAU,KAAU;EAC5D,MAAM;IAAEC,OAAO;IAAEC,WAAW;IAAE,GAAGC,MAAAA;AAAO,GAAC,GAAGJ,QAAQ,CAAA;EACpDF,iBAAM,CACJK,WAAW,CAACE,MAAM,CAACJ,IAAI,CAACC,OAAO,CAAC,EAChC,mEAAmE,CACpE,CAAA;AAED,EAAA,MAAMI,QAAQ,GAAG;IACf,GAAGL,IAAI,CAACK,QAAQ;AAChBC,IAAAA,MAAM,EAAEP,QAAQ,CAACO,MAAM,IAAI,OAAA;GAC5B,CAAA;EAED,OAAO;AACL,IAAA,GAAGH,MAAM;AACTR,IAAAA,KAAK,EAAE,KAAK;AACZM,IAAAA,OAAO,EAAEC,WAAW;AACpBK,IAAAA,eAAe,EAAEN,OAAO;AACxBD,IAAAA,IAAI,EAAE;AACJ,MAAA,GAAGA,IAAI;MACPK,QAAQ;MACRG,MAAM,EAAEC,aAAM,CAACT,IAAI,CAACQ,MAAM,CAACE,WAAW,EAAEL,QAAQ,CAAA;AAClD,KAAA;GACD,CAAA;AACH,EAAC;;AAED;;AAGA;AACaM,MAAAA,cAAc,GAAIjB,KAAU,IACvCD,KAAK,CAACC,KAAK,CAAC,IAAI,OAAO,IAAIA,MAAK;;AAElC;AACO,SAASkB,kBAAkB,CAAClB,KAAU,EAAiC;AAC5EG,EAAAA,iBAAM,CAACc,cAAc,CAACjB,KAAK,CAAC,EAAG,+BAA8B,CAAC,CAAA;AAChE,CAAA;;AAEA;AACO,MAAMmB,cAAc,GAAG,CAC5Bd,QAAkB,EAClBC,IAAU,EACVc,KAAY,KACK;AACjB,EAAA,MAAMC,GAAG,GAAGjB,KAAK,CAACC,QAAQ,EAAEC,IAAI,CAAC,CAAA;EACjC,MAAM;AAAEK,IAAAA,QAAAA;GAAU,GAAGU,GAAG,CAACf,IAAI,CAAA;EAC7B,OAAO;AACL,IAAA,GAAGe,GAAG;AACND,IAAAA,KAAK,EAAE;AACL,MAAA,GAAGA,KAAK;MACRL,MAAM,EAAEA,aAAM,CAACK,KAAK,CAACL,MAAM,CAACC,WAAW,EAAEL,QAAQ,CAAC;MAClDW,cAAc,EAAEP,aAAM,CAACK,KAAK,CAACE,cAAc,CAACN,WAAW,EAAEL,QAAQ,CAAA;AACnE,KAAA;GACD,CAAA;AACH;;;;;;;;;"}