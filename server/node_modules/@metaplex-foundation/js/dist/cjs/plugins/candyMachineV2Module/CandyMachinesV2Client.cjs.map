{"version":3,"file":"CandyMachinesV2Client.cjs","sources":["../../../../src/plugins/candyMachineV2Module/CandyMachinesV2Client.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { CandyMachinesV2BuildersClient } from './CandyMachinesV2BuildersClient';\nimport { CandyMachineV2 } from './models';\nimport {\n  CreateCandyMachineV2Input,\n  createCandyMachineV2Operation,\n  DeleteCandyMachineV2Input,\n  deleteCandyMachineV2Operation,\n  FindCandyMachineV2ByAddressInput,\n  findCandyMachineV2ByAddressOperation,\n  FindCandyMachinesV2ByPublicKeyFieldInput,\n  findCandyMachinesV2ByPublicKeyFieldOperation,\n  FindMintedNftsByCandyMachineV2Input,\n  findMintedNftsByCandyMachineV2Operation,\n  InsertItemsToCandyMachineV2Input,\n  insertItemsToCandyMachineV2Operation,\n  MintCandyMachineV2Input,\n  mintCandyMachineV2Operation,\n  UpdateCandyMachineV2Input,\n  updateCandyMachineV2Operation,\n} from './operations';\nimport { OperationOptions, toPublicKey } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This is a client for the Candy Machine module.\n *\n * It enables us to interact with the Candy Machine program in order to\n * create, update and delete Candy Machines as well as mint from them.\n *\n * You may access this client via the `candyMachinesV2()` method of your `Metaplex` instance.\n *\n * ```ts\n * const candyMachineV2Client = metaplex.candyMachinesV2();\n * ```\n *\n * @example\n * You can create a new Candy Machine with minimum input like so.\n * By default, the current identity of the Metaplex instance will be\n * the authority of the Candy Machine.\n *\n * ```ts\n * const { candyMachine } = await metaplex\n *   .candyMachinesV2()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   };\n * ```\n *\n * @see {@link CandyMachine} The `CandyMachine` model\n * @group Modules\n */\nexport class CandyMachinesV2Client {\n  constructor(readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.candyMachinesV2().builders();\n   * ```\n   */\n  builders() {\n    return new CandyMachinesV2BuildersClient(this.metaplex);\n  }\n\n  /** {@inheritDoc createCandyMachineV2Operation} */\n  create(input: CreateCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc deleteCandyMachineV2Operation} */\n  delete(input: DeleteCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(deleteCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc findCandyMachinesV2ByPublicKeyFieldOperation} */\n  findAllBy(\n    input: FindCandyMachinesV2ByPublicKeyFieldInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyMachinesV2ByPublicKeyFieldOperation(input), options);\n  }\n\n  /** {@inheritDoc findCandyMachineV2ByAddressOperation} */\n  findByAddress(\n    input: FindCandyMachineV2ByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyMachineV2ByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findMintedNftsByCandyMachineV2Operation} */\n  findMintedNfts(\n    input: FindMintedNftsByCandyMachineV2Input,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findMintedNftsByCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc insertItemsToCandyMachineV2Operation} */\n  insertItems(\n    input: InsertItemsToCandyMachineV2Input,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(insertItemsToCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc mintCandyMachineV2Operation} */\n  mint(input: MintCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(mintCandyMachineV2Operation(input), options);\n  }\n\n  /**\n   * Helper method that refetches a given Candy Machine.\n   *\n   * ```ts\n   * const candyMachine = await metaplex.candyMachinesV2().refresh(candyMachine);\n   * ```\n   */\n  refresh(\n    candyMachine: CandyMachineV2 | PublicKey,\n    options?: OperationOptions\n  ) {\n    return this.findByAddress({ address: toPublicKey(candyMachine) }, options);\n  }\n\n  /** {@inheritDoc updateCandyMachineV2Operation} */\n  update(input: UpdateCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(updateCandyMachineV2Operation(input), options);\n  }\n}\n"],"names":["CandyMachinesV2Client","constructor","metaplex","builders","CandyMachinesV2BuildersClient","create","input","options","operations","execute","createCandyMachineV2Operation","delete","deleteCandyMachineV2Operation","findAllBy","findCandyMachinesV2ByPublicKeyFieldOperation","findByAddress","findCandyMachineV2ByAddressOperation","findMintedNfts","findMintedNftsByCandyMachineV2Operation","insertItems","insertItemsToCandyMachineV2Operation","mint","mintCandyMachineV2Operation","refresh","candyMachine","address","toPublicKey","update","updateCandyMachineV2Operation"],"mappings":";;;;;;;;;;;;;;;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,qBAAqB,CAAC;EACjCC,WAAW,CAAUC,QAAkB,EAAE;IAAA,IAApBA,CAAAA,QAAkB,GAAlBA,QAAkB,CAAA;AAAG,GAAA;;AAE1C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,QAAQ,GAAG;AACT,IAAA,OAAO,IAAIC,2DAA6B,CAAC,IAAI,CAACF,QAAQ,CAAC,CAAA;AACzD,GAAA;;AAEA;AACAG,EAAAA,MAAM,CAACC,KAAgC,EAAEC,OAA0B,EAAE;AACnE,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACC,kDAA6B,CAACJ,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAC3D,GAAA;;AAEA;AACAI,EAAAA,MAAM,CAACL,KAAgC,EAAEC,OAA0B,EAAE;AACnE,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACG,kDAA6B,CAACN,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAC3D,GAAA;;AAEA;AACAM,EAAAA,SAAS,CACPP,KAA+C,EAC/CC,OAA0B,EAC1B;AACA,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACK,gFAA4C,CAACR,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAC1E,GAAA;;AAEA;AACAQ,EAAAA,aAAa,CACXT,KAAuC,EACvCC,OAA0B,EAC1B;AACA,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACO,gEAAoC,CAACV,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAClE,GAAA;;AAEA;AACAU,EAAAA,cAAc,CACZX,KAA0C,EAC1CC,OAA0B,EAC1B;AACA,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACS,sEAAuC,CAACZ,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AACrE,GAAA;;AAEA;AACAY,EAAAA,WAAW,CACTb,KAAuC,EACvCC,OAA0B,EAC1B;AACA,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACW,gEAAoC,CAACd,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAClE,GAAA;;AAEA;AACAc,EAAAA,IAAI,CAACf,KAA8B,EAAEC,OAA0B,EAAE;AAC/D,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACa,8CAA2B,CAAChB,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AACzD,GAAA;;AAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACEgB,EAAAA,OAAO,CACLC,YAAwC,EACxCjB,OAA0B,EAC1B;IACA,OAAO,IAAI,CAACQ,aAAa,CAAC;MAAEU,OAAO,EAAEC,qBAAW,CAACF,YAAY,CAAA;KAAG,EAAEjB,OAAO,CAAC,CAAA;AAC5E,GAAA;;AAEA;AACAoB,EAAAA,MAAM,CAACrB,KAAgC,EAAEC,OAA0B,EAAE;AACnE,IAAA,OAAO,IAAI,CAACL,QAAQ,CACjBM,UAAU,EAAE,CACZC,OAAO,CAACmB,kDAA6B,CAACtB,KAAK,CAAC,EAAEC,OAAO,CAAC,CAAA;AAC3D,GAAA;AACF;;;;"}