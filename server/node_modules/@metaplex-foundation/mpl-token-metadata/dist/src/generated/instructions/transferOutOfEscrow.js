"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.transferOutOfEscrow = exports.getTransferOutOfEscrowInstructionDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const shared_1 = require("../shared");
function getTransferOutOfEscrowInstructionDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['discriminator', (0, serializers_1.u8)()],
        ['amount', (0, serializers_1.u64)()],
    ], { description: 'TransferOutOfEscrowInstructionData' }), (value) => ({ ...value, discriminator: 40, amount: value.amount ?? 1 }));
}
exports.getTransferOutOfEscrowInstructionDataSerializer = getTransferOutOfEscrowInstructionDataSerializer;
// Instruction.
function transferOutOfEscrow(context, input) {
    // Program ID.
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    // Accounts.
    const resolvedAccounts = {
        escrow: {
            index: 0,
            isWritable: false,
            value: input.escrow ?? null,
        },
        metadata: {
            index: 1,
            isWritable: true,
            value: input.metadata ?? null,
        },
        payer: {
            index: 2,
            isWritable: true,
            value: input.payer ?? null,
        },
        attributeMint: {
            index: 3,
            isWritable: false,
            value: input.attributeMint ?? null,
        },
        attributeSrc: {
            index: 4,
            isWritable: true,
            value: input.attributeSrc ?? null,
        },
        attributeDst: {
            index: 5,
            isWritable: true,
            value: input.attributeDst ?? null,
        },
        escrowMint: {
            index: 6,
            isWritable: false,
            value: input.escrowMint ?? null,
        },
        escrowAccount: {
            index: 7,
            isWritable: false,
            value: input.escrowAccount ?? null,
        },
        systemProgram: {
            index: 8,
            isWritable: false,
            value: input.systemProgram ?? null,
        },
        ataProgram: {
            index: 9,
            isWritable: false,
            value: input.ataProgram ?? null,
        },
        tokenProgram: {
            index: 10,
            isWritable: false,
            value: input.tokenProgram ?? null,
        },
        sysvarInstructions: {
            index: 11,
            isWritable: false,
            value: input.sysvarInstructions ?? null,
        },
        authority: {
            index: 12,
            isWritable: false,
            value: input.authority ?? null,
        },
    };
    // Arguments.
    const resolvedArgs = { ...input };
    // Default values.
    if (!resolvedAccounts.payer.value) {
        resolvedAccounts.payer.value = context.payer;
    }
    if (!resolvedAccounts.systemProgram.value) {
        resolvedAccounts.systemProgram.value = context.programs.getPublicKey('splSystem', '11111111111111111111111111111111');
        resolvedAccounts.systemProgram.isWritable = false;
    }
    if (!resolvedAccounts.ataProgram.value) {
        resolvedAccounts.ataProgram.value = context.programs.getPublicKey('splAssociatedToken', 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
        resolvedAccounts.ataProgram.isWritable = false;
    }
    if (!resolvedAccounts.tokenProgram.value) {
        resolvedAccounts.tokenProgram.value = context.programs.getPublicKey('splToken', 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
        resolvedAccounts.tokenProgram.isWritable = false;
    }
    if (!resolvedAccounts.sysvarInstructions.value) {
        resolvedAccounts.sysvarInstructions.value = (0, umi_1.publicKey)('Sysvar1nstructions1111111111111111111111111');
    }
    // Accounts in order.
    const orderedAccounts = Object.values(resolvedAccounts).sort((a, b) => a.index - b.index);
    // Keys and Signers.
    const [keys, signers] = (0, shared_1.getAccountMetasAndSigners)(orderedAccounts, 'omitted', programId);
    // Data.
    const data = getTransferOutOfEscrowInstructionDataSerializer().serialize(resolvedArgs);
    // Bytes Created On Chain.
    const bytesCreatedOnChain = 0;
    return (0, umi_1.transactionBuilder)([
        { instruction: { keys, programId, data }, signers, bytesCreatedOnChain },
    ]);
}
exports.transferOutOfEscrow = transferOutOfEscrow;
//# sourceMappingURL=transferOutOfEscrow.js.map