{"version":3,"file":"mintCandyMachineV2.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/mintCandyMachineV2.ts"],"sourcesContent":["import {\n  createMintNftInstruction,\n  createSetCollectionDuringMintInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  Keypair,\n  PublicKey,\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n} from '@solana/web3.js';\nimport { NftWithToken } from '../../nftModule';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { parseCandyMachineV2CollectionAccount } from '../accounts';\nimport { assertCanMintCandyMachineV2 } from '../asserts';\nimport { CandyMachineV2BotTaxError } from '../errors';\nimport { CandyMachineV2 } from '../models';\nimport {\n  findCandyMachineV2CollectionPda,\n  findCandyMachineV2CreatorPda,\n} from '../pdas';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  assertAccountExists,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintCandyMachineV2Operation' as const;\n\n/**\n * Mint an NFT from an existing Candy Machine.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .candyMachinesV2()\n *   .mint({ candyMachine };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintCandyMachineV2Operation =\n  useOperation<MintCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintCandyMachineV2Operation = Operation<\n  typeof Key,\n  MintCandyMachineV2Input,\n  MintCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintCandyMachineV2Input = {\n  /**\n   * The Candy Machine to mint from.\n   * We only need a subset of the `CandyMachine` model but we\n   * need enough information regarding its settings to know how\n   * to mint from it.\n   *\n   * This includes, its wallet address, its item statistics, it live date,\n   * its whitelist settings, etc.\n   */\n  candyMachine: Pick<\n    CandyMachineV2,\n    | 'address'\n    | 'walletAddress'\n    | 'authorityAddress'\n    | 'tokenMintAddress'\n    | 'itemsRemaining'\n    | 'itemsAvailable'\n    | 'itemsMinted'\n    | 'whitelistMintSettings'\n    | 'goLiveDate'\n    | 'endSettings'\n  >;\n\n  /**\n   * The mint account to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  newMint?: Signer;\n\n  /**\n   * The owner of the minted NFT.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  newOwner?: PublicKey;\n\n  /**\n   * The new token account to create as a Signer.\n   *\n   * This property would typically be ignored as, by default, it will create a\n   * associated token account from the `newOwner` and `newMint` properties.\n   *\n   * When provided, the `newOwner` property will be ignored.\n   *\n   * @defaultValue associated token address of `newOwner` and `newMint`.\n   */\n  newToken?: Signer;\n\n  /**\n   * The token account that should pay for the minted NFT.\n   *\n   * This is only relevant when the Candy Machine uses a mint treasury\n   * (i.e. payments are made using SPL tokens and not SOL).\n   *\n   * @defaultValue associated token address of `payer` and\n   * `candyMachine.tokenMintAddress`.\n   */\n  payerToken?: PublicKey;\n\n  /**\n   * The token account that contains whitelist tokens.\n   *\n   * This is only relevant when the Candy Machine uses\n   * whitelist settings.\n   *\n   * @defaultValue associated token address of `payer` and\n   * `candyMachine.whitelistMintSettings.mint`.\n   */\n  whitelistToken?: PublicKey; // Defaults to associated token.\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The minted NFT. */\n  nft: NftWithToken;\n\n  /** The mint account of the minted NFT as a Signer. */\n  mintSigner: Signer;\n\n  /** The token account's address of the minted NFT. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintCandyMachineV2OperationHandler: OperationHandler<MintCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: MintCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MintCandyMachineV2Output> {\n      assertCanMintCandyMachineV2(operation.input.candyMachine, scope.payer);\n\n      const builder = await mintCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      let nft: NftWithToken;\n      try {\n        nft = (await metaplex.nfts().findByMint(\n          {\n            mintAddress: output.mintSigner.publicKey,\n            tokenAddress: output.tokenAddress,\n          },\n          scope\n        )) as NftWithToken;\n      } catch (error) {\n        throw new CandyMachineV2BotTaxError(\n          metaplex.rpc().getSolanaExporerUrl(output.response.signature),\n          error as Error\n        );\n      }\n\n      return { nft, ...output };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintCandyMachineV2BuilderParams = Omit<\n  MintCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the mint account of the NFT. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account of the NFT. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associated token account of the NFT. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account of the NFT. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account of the NFT. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints the one token. */\n  mintTokensInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints the NFT. */\n  mintNftInstructionKey?: string;\n\n  /** A key to distinguish the instruction that sets the collection on the minted NFT. */\n  setCollectionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type MintCandyMachineV2BuilderContext = Omit<\n  MintCandyMachineV2Output,\n  'response' | 'nft'\n>;\n\n/**\n * Mint an NFT from an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .mint({ candyMachine });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintCandyMachineV2Builder = async (\n  metaplex: Metaplex,\n  params: MintCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<MintCandyMachineV2BuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    newMint = Keypair.generate(),\n    newOwner = metaplex.identity().publicKey,\n    newToken,\n  } = params;\n\n  const tokenMetadataProgram = metaplex\n    .programs()\n    .getTokenMetadata(programs).address;\n\n  const newMetadata = metaplex.nfts().pdas().metadata({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const newEdition = metaplex.nfts().pdas().masterEdition({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const candyMachineCreator = findCandyMachineV2CreatorPda(\n    candyMachine.address\n  );\n  const candyMachineCollectionAddress = findCandyMachineV2CollectionPda(\n    candyMachine.address\n  );\n  const candyMachineCollectionAccount = parseCandyMachineV2CollectionAccount(\n    await metaplex.rpc().getAccount(candyMachineCollectionAddress)\n  );\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint(\n      {\n        decimals: 0,\n        initialSupply: token(1),\n        mint: newMint,\n        mintAuthority: payer,\n        freezeAuthority: payer.publicKey,\n        owner: newOwner,\n        token: newToken,\n        createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n        initializeMintInstructionKey: params.initializeMintInstructionKey,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey,\n        createTokenAccountInstructionKey:\n          params.createTokenAccountInstructionKey,\n        initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      },\n      { payer, programs }\n    );\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  const mintNftInstruction = createMintNftInstruction(\n    {\n      candyMachine: candyMachine.address,\n      candyMachineCreator,\n      payer: payer.publicKey,\n      wallet: candyMachine.walletAddress,\n      metadata: newMetadata,\n      mint: newMint.publicKey,\n      mintAuthority: payer.publicKey,\n      updateAuthority: payer.publicKey,\n      masterEdition: newEdition,\n      tokenMetadataProgram,\n      clock: SYSVAR_CLOCK_PUBKEY,\n      recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\n      instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY,\n    },\n    { creatorBump: candyMachineCreator.bump }\n  );\n\n  if (candyMachine.whitelistMintSettings) {\n    const whitelistToken =\n      params.whitelistToken ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: candyMachine.whitelistMintSettings.mint,\n        owner: payer.publicKey,\n      });\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: whitelistToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: candyMachine.whitelistMintSettings.mint,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  if (candyMachine.tokenMintAddress) {\n    const payerToken =\n      params.payerToken ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: candyMachine.tokenMintAddress,\n        owner: payer.publicKey,\n      });\n\n    mintNftInstruction.keys.push(\n      {\n        pubkey: payerToken,\n        isWritable: true,\n        isSigner: false,\n      },\n      {\n        pubkey: payer.publicKey,\n        isWritable: false,\n        isSigner: true,\n      }\n    );\n  }\n\n  return (\n    TransactionBuilder.make<MintCandyMachineV2BuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        tokenAddress,\n      })\n\n      // Create token and mint accounts.\n      .add(tokenWithMintBuilder)\n\n      // Create the new NFT.\n      .add({\n        instruction: mintNftInstruction,\n        signers: [payer, newMint],\n        key: params.mintNftInstructionKey ?? 'mintNft',\n      })\n\n      // Set the collection on the NFT.\n      .when(candyMachineCollectionAccount.exists, (builder) => {\n        assertAccountExists(candyMachineCollectionAccount);\n        const collectionMint = candyMachineCollectionAccount.data.mint;\n        const collectionMetadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: candyMachineCollectionAccount.publicKey,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createSetCollectionDuringMintInstruction({\n            candyMachine: candyMachine.address,\n            metadata: newMetadata,\n            payer: payer.publicKey,\n            collectionPda: candyMachineCollectionAccount.publicKey,\n            tokenMetadataProgram,\n            instructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            collectionMint: candyMachineCollectionAccount.data.mint,\n            collectionMetadata,\n            collectionMasterEdition,\n            authority: candyMachine.authorityAddress,\n            collectionAuthorityRecord,\n          }),\n          signers: [payer],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","mintCandyMachineV2Operation","useOperation","mintCandyMachineV2OperationHandler","handle","operation","metaplex","scope","assertCanMintCandyMachineV2","input","candyMachine","payer","builder","mintCandyMachineV2Builder","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","nft","nfts","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","error","CandyMachineV2BotTaxError","rpc","getSolanaExporerUrl","response","signature","params","options","programs","getDefaultFeePayer","newMint","Keypair","generate","newOwner","identity","newToken","tokenMetadataProgram","getTokenMetadata","address","newMetadata","pdas","metadata","mint","newEdition","masterEdition","candyMachineCreator","findCandyMachineV2CreatorPda","candyMachineCollectionAddress","findCandyMachineV2CollectionPda","candyMachineCollectionAccount","parseCandyMachineV2CollectionAccount","getAccount","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","mintNftInstruction","createMintNftInstruction","wallet","walletAddress","updateAuthority","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","creatorBump","bump","whitelistMintSettings","whitelistToken","associatedTokenAccount","keys","push","pubkey","isWritable","isSigner","tokenMintAddress","payerToken","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","key","mintNftInstructionKey","when","exists","assertAccountExists","collectionMint","data","collectionMetadata","collectionMasterEdition","collectionAuthorityRecord","collectionAuthority","createSetCollectionDuringMintInstruction","collectionPda","instructions","authority","authorityAddress","setCollectionInstructionKey"],"mappings":"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"}