'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.cjs');
var ed25519 = require('@noble/ed25519');
var SdkError = require('../../errors/SdkError.cjs');
var Signer = require('../../types/Signer.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var ed25519__namespace = /*#__PURE__*/_interopNamespace(ed25519);

/**
 * @group Modules
 */
class IdentityClient {
  constructor() {
    _rollupPluginBabelHelpers.defineProperty(this, "_driver", null);
  }
  driver() {
    if (!this._driver) {
      throw new SdkError.DriverNotProvidedError('IdentityDriver');
    }
    return this._driver;
  }
  setDriver(newDriver) {
    this._driver = newDriver;
  }
  get publicKey() {
    return this.driver().publicKey;
  }
  get secretKey() {
    return this.driver().secretKey;
  }
  signMessage(message) {
    return this.driver().signMessage(message);
  }
  signTransaction(transaction) {
    return this.driver().signTransaction(transaction);
  }
  signAllTransactions(transactions) {
    return this.driver().signAllTransactions(transactions);
  }
  verifyMessage(message, signature) {
    return ed25519__namespace.sync.verify(message, signature, this.publicKey.toBytes());
  }
  equals(that) {
    if (Signer.isSigner(that)) {
      that = that.publicKey;
    }
    return this.publicKey.equals(that);
  }
  hasSecretKey() {
    return this.secretKey != null;
  }
}

exports.IdentityClient = IdentityClient;
//# sourceMappingURL=IdentityClient.cjs.map
