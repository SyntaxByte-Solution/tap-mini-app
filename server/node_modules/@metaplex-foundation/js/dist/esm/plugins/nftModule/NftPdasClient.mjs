import { Buffer } from 'buffer';
import { getMetadataDelegateRoleSeed } from './DelegateType.mjs';
import { Pda } from '../../types/Pda.mjs';
import { toBigNumber } from '../../types/BigNumber.mjs';

/**
 * This client allows you to build PDAs related to the NFT module.
 *
 * @see {@link NftClient}
 * @group Module Pdas
 */
class NftPdasClient {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  /** Finds the Metadata PDA of a given mint address. */
  metadata({
    mint,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer()]);
  }

  /** Finds the Master Edition PDA of a given mint address. */
  masterEdition({
    mint,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8')]);
  }

  /** Finds the Edition PDA of a given mint address. */
  edition(input) {
    return this.masterEdition(input);
  }

  /** Finds the Edition Marker PDA of a given edition number. */
  editionMarker({
    mint,
    edition,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('edition', 'utf8'), Buffer.from(edition.div(toBigNumber(248)).toString())]);
  }

  /** Finds the collection authority PDA for a given NFT and authority. */
  collectionAuthorityRecord({
    mint,
    collectionAuthority,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('collection_authority', 'utf8'), collectionAuthority.toBuffer()]);
  }

  /** Finds the use authority PDA for a given NFT and user. */
  useAuthorityRecord({
    mint,
    useAuthority,
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), mint.toBuffer(), Buffer.from('user', 'utf8'), useAuthority.toBuffer()]);
  }

  /** Finds the burner PDA of the Token Metadata program. */
  burner({
    programs
  }) {
    const programId = this.programId(programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), Buffer.from('burn', 'utf8')]);
  }

  /** Finds the record PDA for a given NFT and delegate authority. */
  tokenRecord(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), input.mint.toBuffer(), Buffer.from('token_record', 'utf8'), input.token.toBuffer()]);
  }

  /** Finds the record PDA for a given NFT and delegate authority. */
  metadataDelegateRecord(input) {
    const programId = this.programId(input.programs);
    return Pda.find(programId, [Buffer.from('metadata', 'utf8'), programId.toBuffer(), input.mint.toBuffer(), Buffer.from(getMetadataDelegateRoleSeed(input.type), 'utf8'), input.updateAuthority.toBuffer(), input.delegate.toBuffer()]);
  }
  programId(programs) {
    return this.metaplex.programs().getTokenMetadata(programs).address;
  }
}

export { NftPdasClient };
//# sourceMappingURL=NftPdasClient.mjs.map
