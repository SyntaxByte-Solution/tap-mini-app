{"version":3,"file":"thirdPartySigner.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/thirdPartySigner.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { thirdPartySignerBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey, Signer } from '@/types';\n\n/**\n * The thirdPartySigner guard requires a predefined\n * address to sign the mint transaction. The signer will need\n * to be passed within the mint settings of this guard.\n *\n * This allows for more centralized mints where every single\n * mint transaction has to go through a specific signer.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link ThirdPartySignerGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type ThirdPartySignerGuardSettings = {\n  /**\n   * The address of the signer that will\n   * need to sign each mint transaction.\n   */\n  signerKey: PublicKey;\n};\n\n/**\n * The settings for the thirdPartySigner guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link ThirdPartySignerGuardSettings} for more\n * information on the thirdPartySigner guard itself.\n */\nexport type ThirdPartySignerGuardMintSettings = {\n  /** The required third party signer. */\n  signer: Signer;\n};\n\n/** @internal */\nexport const thirdPartySignerGuardManifest: CandyGuardManifest<\n  ThirdPartySignerGuardSettings,\n  ThirdPartySignerGuardMintSettings\n> = {\n  name: 'thirdPartySigner',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(thirdPartySignerBeet),\n  mintSettingsParser: ({ mintSettings }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('thirdPartySigner');\n    }\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: true,\n          address: mintSettings.signer,\n          isWritable: true,\n        },\n      ],\n    };\n  },\n};\n"],"names":["thirdPartySignerGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","thirdPartySignerBeet","mintSettingsParser","mintSettings","GuardMintSettingsMissingError","arguments","Buffer","from","remainingAccounts","isSigner","address","signer","isWritable"],"mappings":";;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAqBA;AACO,MAAMA,6BAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,kBAAkB;AACxBC,EAAAA,aAAa,EAAE,EAAE;AACjBC,EAAAA,kBAAkB,EAAEC,mCAAwB,CAACC,kCAAoB,CAAC;AAClEC,EAAAA,kBAAkB,EAAE,CAAC;AAAEC,IAAAA,YAAAA;AAAa,GAAC,KAAK;IACxC,IAAI,CAACA,YAAY,EAAE;AACjB,MAAA,MAAM,IAAIC,oCAA6B,CAAC,kBAAkB,CAAC,CAAA;AAC7D,KAAA;IAEA,OAAO;AACLC,MAAAA,SAAS,EAAEC,aAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,IAAI;QACdC,OAAO,EAAEP,YAAY,CAACQ,MAAM;AAC5BC,QAAAA,UAAU,EAAE,IAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}