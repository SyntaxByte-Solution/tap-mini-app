{"version":3,"file":"findCandyMachinesV2ByPublicKeyField.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/findCandyMachinesV2ByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineV2Account,\n  parseCandyMachineV2Account,\n  parseCandyMachineV2CollectionAccount,\n} from '../accounts';\nimport { CandyMachineV2GpaBuilder } from '../gpaBuilders';\nimport { CandyMachineV2, toCandyMachineV2 } from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { CandyMachineV2Program } from '../program';\nimport { zipMap } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Mint, toMint, toMintAccount } from '@/plugins/tokenModule';\nimport { Metaplex } from '@/Metaplex';\nimport { UnreachableCaseError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachinesV2ByPublicKeyOperation' as const;\n\n/**\n * Find all Candy Machines matching by a given `publicKey` or a given `type`.\n *\n * The following two types are supported.\n *\n * `authority`: Find Candy Machines whose authority is the given `publicKey`.\n * ```ts\n * const someAuthority = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachinesV2()\n *   .findAllBy({ type: 'authority', someAuthority });\n * ```\n *\n * `wallet`: Find Candy Machines whose wallet address is the given `publicKey`.\n * ```ts\n * const someWallet = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachinesV2()\n *   .findAllBy({ type: 'wallet', someWallet });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachinesV2ByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesV2ByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachinesV2ByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesV2ByPublicKeyFieldInput,\n  CandyMachineV2[]\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachinesV2ByPublicKeyFieldInput = {\n  /** Defines which type of account the `publicKey` field refers to.  */\n  type: 'authority' | 'wallet';\n\n  /** The publicKey to filter Candy Machine by. */\n  publicKey: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachinesV2ByPublicKeyFieldOperationHandler: OperationHandler<FindCandyMachinesV2ByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesV2ByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CandyMachineV2[]> => {\n      const { commitment } = scope;\n      const { type, publicKey } = operation.input;\n      const accounts = CandyMachineV2Program.accounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let candyMachineQuery: CandyMachineV2GpaBuilder;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const unparsedAccounts = await candyMachineQuery.get();\n      scope.throwIfCanceled();\n\n      const collectionPdas = unparsedAccounts.map((unparsedAccount) =>\n        findCandyMachineV2CollectionPda(unparsedAccount.publicKey)\n      );\n\n      // Find mint details for all unique SPL tokens used\n      // in candy machines that have non-null `tokenMint`\n\n      const parsedAccounts: Record<string, CandyMachineV2Account> =\n        Object.fromEntries(\n          unparsedAccounts.map((unparsedAccount) => [\n            unparsedAccount.publicKey.toString(),\n            parseCandyMachineV2Account(unparsedAccount),\n          ])\n        );\n\n      const tokenMints = [\n        ...new Set(\n          Object.values(parsedAccounts)\n            .map((account) => account.data.tokenMint?.toString())\n            .filter((tokenMint): tokenMint is string => tokenMint !== undefined)\n        ),\n      ].map((address) => new PublicKey(address));\n\n      const result = await metaplex\n        .rpc()\n        .getMultipleAccounts(tokenMints.concat(collectionPdas), commitment);\n      scope.throwIfCanceled();\n\n      const unparsedMintAccounts = result.slice(0, tokenMints.length);\n      const unparsedCollectionAccounts = result.slice(-collectionPdas.length);\n\n      const mints: Record<string, Mint> = Object.fromEntries(\n        unparsedMintAccounts.map((account) => [\n          account.publicKey.toString(),\n          toMint(toMintAccount(account)),\n        ])\n      );\n\n      return zipMap(\n        unparsedAccounts,\n        unparsedCollectionAccounts,\n        (unparsedAccount, unparsedCollectionAccount) => {\n          const parsedAccount =\n            parsedAccounts[unparsedAccount.publicKey.toString()];\n          const collectionAccount = unparsedCollectionAccount\n            ? parseCandyMachineV2CollectionAccount(unparsedCollectionAccount)\n            : null;\n          const tokenMintAddress = parsedAccount.data.tokenMint?.toString();\n\n          return toCandyMachineV2(\n            parsedAccount,\n            unparsedAccount,\n            collectionAccount,\n            tokenMintAddress ? mints[tokenMintAddress] : null\n          );\n        }\n      );\n    },\n  };\n"],"names":["Key","findCandyMachinesV2ByPublicKeyFieldOperation","useOperation","findCandyMachinesV2ByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","commitment","type","publicKey","input","accounts","CandyMachineV2Program","mergeConfig","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","unparsedAccounts","get","throwIfCanceled","collectionPdas","map","unparsedAccount","findCandyMachineV2CollectionPda","parsedAccounts","Object","fromEntries","toString","parseCandyMachineV2Account","tokenMints","Set","values","account","data","tokenMint","filter","undefined","address","PublicKey","result","rpc","getMultipleAccounts","concat","unparsedMintAccounts","slice","length","unparsedCollectionAccounts","mints","toMint","toMintAccount","zipMap","unparsedCollectionAccount","parsedAccount","collectionAccount","parseCandyMachineV2CollectionAccount","tokenMintAddress","toCandyMachineV2"],"mappings":"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"}