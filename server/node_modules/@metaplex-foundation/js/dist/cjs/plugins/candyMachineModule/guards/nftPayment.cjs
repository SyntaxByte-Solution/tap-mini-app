'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var errors = require('../errors.cjs');
var Serializer = require('../../../types/Serializer.cjs');

/**
 * The nftPayment guard allows minting by charging the
 * payer an NFT from a specified NFT collection.
 * The NFT will be transfered to a predefined destination.
 *
 * This means the mint address of the NFT to transfer must be
 * passed when minting. This guard alone does not limit how many
 * times a holder can mint. A holder can mint as many times
 * as they have NFTs from the required collection to pay with.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 *
 * @see {@link NftPaymentGuardMintSettings} for more
 * information on the mint settings of this guard.
 */

/** @internal */
const nftPaymentGuardManifest = {
  name: 'nftPayment',
  settingsBytes: 64,
  settingsSerializer: Serializer.createSerializerFromBeet(mplCandyGuard.nftPaymentBeet),
  mintSettingsParser: ({
    metaplex,
    settings,
    mintSettings,
    payer,
    programs
  }) => {
    if (!mintSettings) {
      throw new errors.GuardMintSettingsMissingError('nftPayment');
    }
    const associatedTokenProgram = metaplex.programs().getAssociatedToken(programs);
    const nftTokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: payer.publicKey,
      programs
    });
    const nftMetadata = metaplex.nfts().pdas().metadata({
      mint: mintSettings.mint,
      programs
    });
    const destinationAta = metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: settings.destination,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: nftTokenAccount,
        isWritable: true
      }, {
        isSigner: false,
        address: nftMetadata,
        isWritable: true
      }, {
        isSigner: false,
        address: mintSettings.mint,
        isWritable: false
      }, {
        isSigner: false,
        address: settings.destination,
        isWritable: false
      }, {
        isSigner: false,
        address: destinationAta,
        isWritable: true
      }, {
        isSigner: false,
        address: associatedTokenProgram.address,
        isWritable: false
      }]
    };
  }
};

exports.nftPaymentGuardManifest = nftPaymentGuardManifest;
//# sourceMappingURL=nftPayment.cjs.map
