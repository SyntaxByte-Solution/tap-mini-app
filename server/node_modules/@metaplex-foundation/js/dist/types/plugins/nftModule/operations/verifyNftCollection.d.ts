import { PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { Metaplex } from '../../../Metaplex';
import { Operation, OperationHandler, Signer } from '../../../types';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
declare const Key: "VerifyNftCollectionOperation";
/**
 * Verifies the collection of an NFT or SFT.
 *
 * ```ts
 * await metaplex
 *   .nfts()
 *   .verifyCollection({ mintAddress, collectionMintAddress };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const verifyNftCollectionOperation: import("../../../types").OperationConstructor<VerifyNftCollectionOperation, "VerifyNftCollectionOperation", VerifyNftCollectionInput, VerifyNftCollectionOutput>;
/**
 * @group Operations
 * @category Types
 */
export type VerifyNftCollectionOperation = Operation<typeof Key, VerifyNftCollectionInput, VerifyNftCollectionOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type VerifyNftCollectionInput = {
    /** The address of the mint account. */
    mintAddress: PublicKey;
    /** The mint address of the collection NFT. */
    collectionMintAddress: PublicKey;
    /**
     * An authority that can verify and unverify collection items
     * from the provided `collectionMintAddress`.
     *
     * @defaultValue `metaplex.identity()`
     */
    collectionAuthority?: Signer;
    /**
     * Whether or not the provided `collectionMintAddress` is a
     * sized collection (as opposed to a legacy collection).
     *
     * @defaultValue `true`
     */
    isSizedCollection?: boolean;
    /**
     * Whether or not the provided `collectionAuthority` is a delegated
     * collection authority, i.e. it was approved by the update authority.
     *
     * - `false` means the collection authority is the update authority of the collection.
     * - `legacyDelegate` means the collection authority is a delegate that was approved
     *  using the legacy `metaplex.nfts().approveCollectionAuthority()` operation.
     * - `metadataDelegate` means the collection authority is a delegate that was approved
     *  using the new `metaplex.nfts().delegate()` operation.
     * - `true` is equivalent to `legacyDelegate` for backwards compatibility.
     *
     * @defaultValue `false`
     */
    isDelegated?: boolean | 'legacyDelegate' | 'metadataDelegate';
    /**
     * The update authority of the Collection NFT.
     *
     * This is used to compute the metadata delegate record when
     * `isDelegated` is equal to `"metadataDelegate"`.
     *
     * @defaultValue `metaplex.identity().publicKey`
     */
    collectionUpdateAuthority?: PublicKey;
};
/**
 * @group Operations
 * @category Outputs
 */
export type VerifyNftCollectionOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const verifyNftCollectionOperationHandler: OperationHandler<VerifyNftCollectionOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type VerifyNftCollectionBuilderParams = Omit<VerifyNftCollectionInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that verifies the collection. */
    instructionKey?: string;
};
/**
 * Verifies the collection of an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .verifyCollection({ mintAddress, collectionMintAddress });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const verifyNftCollectionBuilder: (metaplex: Metaplex, params: VerifyNftCollectionBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
