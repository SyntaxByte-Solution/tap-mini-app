'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('../accounts.cjs');
var errors = require('../errors.cjs');
var PurchaseReceiptGpaBuilder = require('../gpaBuilders/PurchaseReceiptGpaBuilder.cjs');
var Operation = require('../../../types/Operation.cjs');
var Purchase = require('../models/Purchase.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindPurchasesOperation';

/**
 * Finds Purchases by multiple criteria.
 * You can use any combination of keys.
 * Supports only 3 criteria at the same time including
 * the required `auctionHouse` attribute.
 *
 * ```ts
 * // Find all purchases in an Auction House.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse });
 *
 * // Find purchases by buyer and mint.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, buyer, mint });
 *
 * // Find purchases by metadata.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, metadata });
 *
 * // Find purchases by seller and buyer.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, seller, buyer });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findPurchasesOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findPurchasesOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      programs,
      commitment
    } = scope;
    const {
      auctionHouse,
      buyer,
      seller,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let purchaseQuery = new PurchaseReceiptGpaBuilder.PurchaseReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (Object.keys(operation.input).length > 3) {
      throw new errors.FindAllSupportsOnlyThreeFiltersMaxError();
    }
    if (buyer) {
      purchaseQuery = purchaseQuery.whereBuyer(buyer);
    }
    if (seller) {
      purchaseQuery = purchaseQuery.whereSeller(seller);
    }
    if (metadata && !mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metadata);
    }
    if (mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return purchaseQuery.getAndMap(account => Purchase.toLazyPurchase(accounts.toPurchaseReceiptAccount(account), auctionHouse));
  }
};

exports.findPurchasesOperation = findPurchasesOperation;
exports.findPurchasesOperationHandler = findPurchasesOperationHandler;
//# sourceMappingURL=findPurchases.cjs.map
