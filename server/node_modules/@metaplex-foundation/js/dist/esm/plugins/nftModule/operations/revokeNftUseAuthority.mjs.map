{"version":3,"file":"revokeNftUseAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftUseAuthority.ts"],"sourcesContent":["import { createRevokeUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftUseAuthorityOperation' as const;\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftUseAuthorityOperation =\n  useOperation<RevokeNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftUseAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftUseAuthorityInput,\n  RevokeNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to revoke. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftUseAuthorityOperationHandler: OperationHandler<RevokeNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftUseAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftUseAuthorityOutput> => {\n      return revokeNftUseAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityBuilderParams = Omit<\n  RevokeNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftUseAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs,\n  });\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the use authority.\n      .add({\n        instruction: createRevokeUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            mint: mintAddress,\n            metadata,\n            tokenProgram: tokenProgram.address,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner],\n        key: params.instructionKey ?? 'revokeUseAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftUseAuthorityOperation","useOperation","revokeNftUseAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","user","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","useAuthorityRecord","useAuthority","ownerTokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeUseAuthorityInstruction","ownerTokenAccount","address","signers","key","instructionKey"],"mappings":";;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAyC,CAAA;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,8BAA8B,GACzCC,YAAY,CAAiCF,GAAG,EAAC;;AAEnD;AACA;AACA;AACA;;AA4CA;AACA;AACA;AACA;AACO,MAAMG,qCAAuF,GAClG;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAyC,EACzCC,QAAkB,EAClBC,KAAqB,KACoB;AACzC,IAAA,OAAOC,4BAA4B,CACjCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,4BAA4B,GAAG,CAC1CF,QAAkB,EAClBM,MAA0C,EAC1CC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IAAEK,WAAW;IAAEC,IAAI;IAAEC,KAAK,GAAGd,QAAQ,CAACe,QAAQ,EAAA;AAAG,GAAC,GAAGT,MAAM,CAAA;;AAEjE;EACA,MAAMU,aAAa,GAAGhB,QAAQ,CAACQ,QAAQ,EAAE,CAACS,SAAS,CAACT,QAAQ,CAAC,CAAA;EAC7D,MAAMU,YAAY,GAAGlB,QAAQ,CAACQ,QAAQ,EAAE,CAACW,QAAQ,CAACX,QAAQ,CAAC,CAAA;EAC3D,MAAMY,oBAAoB,GAAGpB,QAAQ,CAACQ,QAAQ,EAAE,CAACa,gBAAgB,CAACb,QAAQ,CAAC,CAAA;;AAE3E;EACA,MAAMc,QAAQ,GAAGtB,QAAQ,CAACuB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;AAC/CG,IAAAA,IAAI,EAAEb,WAAW;AACjBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMkB,kBAAkB,GAAG1B,QAAQ,CAACuB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACE,kBAAkB,CAAC;AACnED,IAAAA,IAAI,EAAEb,WAAW;AACjBe,IAAAA,YAAY,EAAEd,IAAI;AAClBL,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AACF,EAAA,MAAMoB,iBAAiB,GACrBtB,MAAM,CAACsB,iBAAiB,IACxB5B,QAAQ,CAAC6B,MAAM,EAAE,CAACL,IAAI,EAAE,CAACM,sBAAsB,CAAC;AAC9CL,IAAAA,IAAI,EAAEb,WAAW;IACjBE,KAAK,EAAEA,KAAK,CAACiB,SAAS;AACtBvB,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AAEJ,EAAA,OACEwB,kBAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACzB,KAAK,CAAA;;AAElB;AAAA,GACC0B,GAAG,CAAC;IACHC,WAAW,EAAEC,mCAAmC,CAC9C;MACEX,kBAAkB;MAClBZ,KAAK,EAAEA,KAAK,CAACiB,SAAS;MACtBlB,IAAI;AACJyB,MAAAA,iBAAiB,EAAEV,iBAAiB;AACpCH,MAAAA,IAAI,EAAEb,WAAW;MACjBU,QAAQ;MACRJ,YAAY,EAAEA,YAAY,CAACqB,OAAO;MAClCvB,aAAa,EAAEA,aAAa,CAACuB,OAAAA;AAC/B,KAAC,EACDnB,oBAAoB,CAACmB,OAAO,CAC7B;IACDC,OAAO,EAAE,CAAC1B,KAAK,CAAC;AAChB2B,IAAAA,GAAG,EAAEnC,MAAM,CAACoC,cAAc,IAAI,oBAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;"}