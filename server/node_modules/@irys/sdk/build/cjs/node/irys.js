"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeIrys = void 0;
require("../common/hack.js");
const transactions_1 = require("../common/transactions");
const api_1 = __importDefault(require("../common/api"));
const fund_1 = __importDefault(require("../common/fund"));
const irys_1 = __importDefault(require("../common/irys"));
const utils_1 = __importDefault(require("../common/utils"));
const index_1 = __importDefault(require("./tokens/index"));
const upload_1 = __importDefault(require("./upload"));
const arbundles = __importStar(require("./utils"));
const provenance_1 = require("./provenance");
class NodeIrys extends irys_1.default {
    /**
     * Constructs a new Irys instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param key - private key (in whatever form required)
     */
    constructor({ url, token, key, config }) {
        var _a;
        switch (url) {
            case undefined:
            case "node1":
                url = "https://node1.irys.xyz";
                break;
            case "node2":
                url = "https://node2.irys.xyz";
                break;
            case "devnet":
                url = "https://devnet.irys.xyz";
                break;
        }
        const parsed = new URL(url);
        super({ url: parsed, arbundles });
        if (parsed.host === "devnet.irys.xyz" && !(config === null || config === void 0 ? void 0 : config.providerUrl))
            throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.irys.xyz/developer-docs/using-devnet`);
        this.api = new api_1.default({
            url: parsed,
            timeout: (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : 100000,
            headers: config === null || config === void 0 ? void 0 : config.headers,
        });
        this.tokenConfig = (0, index_1.default)(this, token.toLowerCase(), key, parsed.toString(), config === null || config === void 0 ? void 0 : config.providerUrl, config === null || config === void 0 ? void 0 : config.contractAddress, config === null || config === void 0 ? void 0 : config.tokenOpts);
        this.token = this.tokenConfig.name;
        this.address = this.tokenConfig.address;
        this.utils = new utils_1.default(this.api, this.token, this.tokenConfig);
        this.funder = new fund_1.default(this.utils);
        this.uploader = new upload_1.default(this.api, this.utils, this.token, this.tokenConfig, this.IrysTransaction);
        this.provenance = new provenance_1.NodeProvenance(this);
        this.transactions = new transactions_1.Transaction(this);
        this._readyPromise = this.tokenConfig.ready ? this.tokenConfig.ready() : new Promise((r) => r());
    }
    /**
     * Upload a file at the specified path to the bundler
     * @param path path to the file to upload
     * @returns bundler response
     */
    uploadFile(path, opts) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.uploader.uploadFile(path, opts);
        });
    }
    /**
     * @param path - path to the folder to be uploaded
     * @param indexFile - path to the index file (i.e index.html)
     * @param batchSize - number of items to upload concurrently
     * @param interactivePreflight - whether to interactively prompt the user for confirmation of upload (CLI ONLY)
     * @param keepDeleted - Whether to keep previously uploaded (but now deleted) files in the manifest
     * @param logFunction - for handling logging from the uploader for UX
     * @param manifestTags - For allowing the caller to pass tags that will be added to the manifest transaction.
     * @returns
     */
    uploadFolder(path, { batchSize = 10, keepDeleted = true, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions, } = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.uploader.uploadFolder(path, { indexFile, batchSize, interactivePreflight, keepDeleted, logFunction, manifestTags, itemOptions });
        });
    }
    static init(opts) {
        return __awaiter(this, void 0, void 0, function* () {
            const { url, token, privateKey, publicKey, signingFunction, collectSignatures, providerUrl, timeout, contractAddress } = opts;
            const Irys = new NodeIrys({
                url,
                token,
                key: signingFunction ? publicKey : privateKey,
                config: {
                    providerUrl,
                    timeout,
                    contractAddress,
                    tokenOpts: { signingFunction, collectSignatures },
                },
            });
            yield Irys.ready();
            return Irys;
        });
    }
}
exports.NodeIrys = NodeIrys;
exports.default = NodeIrys;
//# sourceMappingURL=irys.js.map