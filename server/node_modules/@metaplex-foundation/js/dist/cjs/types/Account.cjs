'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Serializer = require('./Serializer.cjs');
var SdkError = require('../errors/SdkError.cjs');

function getAccountParsingFunction(parser) {
  function parse(account) {
    if ('exists' in account && !account.exists) {
      return account;
    }
    const serializer = Serializer.createSerializerFromSolitaType(parser);
    return Serializer.deserializeAccount(account, serializer);
  }
  return parse;
}
function getAccountParsingAndAssertingFunction(parser) {
  const parse = getAccountParsingFunction(parser);
  return (unparsedAccount, solution) => {
    if ('exists' in unparsedAccount) {
      assertAccountExists(unparsedAccount, parser.name, solution);
    }
    return parse(unparsedAccount);
  };
}
function assertAccountExists(account, name, solution) {
  if (!account.exists) {
    throw new SdkError.AccountNotFoundError(account.publicKey, name, solution);
  }
}
const toAccountInfo = account => {
  const {
    executable,
    owner,
    lamports,
    rentEpoch
  } = account;
  return {
    executable,
    owner,
    lamports,
    rentEpoch
  };
};

exports.assertAccountExists = assertAccountExists;
exports.getAccountParsingAndAssertingFunction = getAccountParsingAndAssertingFunction;
exports.getAccountParsingFunction = getAccountParsingFunction;
exports.toAccountInfo = toAccountInfo;
//# sourceMappingURL=Account.cjs.map
