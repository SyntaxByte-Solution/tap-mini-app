{"version":3,"file":"depositToBuyerAccount.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/depositToBuyerAccount.ts"],"sourcesContent":["import {\n  createAuctioneerDepositInstruction,\n  createDepositInstruction,\n  DepositInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DepositToBuyerAccountOperation' as const;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const depositToBuyerAccountOperation =\n  useOperation<DepositToBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DepositToBuyerAccountOperation = Operation<\n  typeof Key,\n  DepositToBuyerAccountInput,\n  DepositToBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DepositToBuyerAccountInput = {\n  /**\n   * The Auction House in which escrow buyer deposits funds.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to deposit funds.\n   *\n   * This includes, its address, authority address, treasury mint, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'isNative'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who deposits funds.\n   * This expects a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to deposit.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DepositToBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const depositToBuyerAccountOperationHandler: OperationHandler<DepositToBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: DepositToBuyerAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      depositToBuyerAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DepositToBuyerAccountBuilderParams = Omit<\n  DepositToBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DepositToBuyerAccountBuilderContext = Omit<\n  DepositToBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const depositToBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: DepositToBuyerAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<DepositToBuyerAccountBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount,\n    instructionKey,\n    buyer = metaplex.identity(),\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const paymentAccount = auctionHouse.isNative\n    ? toPublicKey(buyer)\n    : metaplex\n        .tokens()\n        .pdas()\n        .associatedTokenAccount({\n          mint: auctionHouse.treasuryMint.address,\n          owner: toPublicKey(buyer),\n          programs,\n        });\n  const escrowPayment = metaplex\n    .auctionHouse()\n    .pdas()\n    .buyerEscrow({\n      auctionHouse: auctionHouse.address,\n      buyer: toPublicKey(buyer),\n      programs,\n    });\n\n  const accounts: DepositInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amount.basisPoints,\n  };\n\n  // Deposit Instruction.\n  let depositInstruction = createDepositInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs,\n    });\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    depositInstruction = createAuctioneerDepositInstruction(\n      { ...accountsWithAuctioneer },\n      args\n    );\n  }\n\n  // Signers.\n  const depositSigners = [buyer, auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n      // Deposit.\n      .add({\n        instruction: depositInstruction,\n        signers: depositSigners,\n        key: instructionKey ?? 'depositToBuyerAccount',\n      })\n  );\n};\n"],"names":["Key","depositToBuyerAccountOperation","useOperation","depositToBuyerAccountOperationHandler","handle","operation","metaplex","scope","depositToBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","amount","instructionKey","buyer","identity","hasAuctioneer","AuctioneerAuthorityRequiredError","paymentAccount","isNative","toPublicKey","tokens","pdas","associatedTokenAccount","mint","treasuryMint","address","owner","escrowPayment","buyerEscrow","accounts","wallet","transferAuthority","escrowPaymentAccount","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","basisPoints","depositInstruction","createDepositInstruction","ahAuctioneerPda","auctioneer","publicKey","accountsWithAuctioneer","createAuctioneerDepositInstruction","depositSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;;;;;;;;;;AAsBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAyC,CAAA;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,8BAA8B,GACzCC,sBAAY,CAAiCF,GAAG,EAAC;;AAEnD;AACA;AACA;AACA;;AA8DA;AACA;AACA;AACA;AACO,MAAMG,qCAAuF,GAClG;EACEC,MAAM,EAAE,OACNC,SAAyC,EACzCC,QAAkB,EAClBC,KAAqB,KAErBC,4BAA4B,CAC1BF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAA;AACnD,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,4BAA4B,GAAG,CAC1CF,QAAkB,EAClBM,MAA0C,EAC1CC,OAAkC,GAAG,EAAE,KACqB;AAC5D;EACA,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,YAAY;IACZC,mBAAmB;IACnBC,MAAM;IACNC,cAAc;IACdC,KAAK,GAAGhB,QAAQ,CAACiB,QAAQ,EAAA;AAC3B,GAAC,GAAGX,MAAM,CAAA;AAEV,EAAA,IAAIM,YAAY,CAACM,aAAa,IAAI,CAACL,mBAAmB,EAAE;IACtD,MAAM,IAAIM,uCAAgC,EAAE,CAAA;AAC9C,GAAA;;AAEA;EACA,MAAMC,cAAc,GAAGR,YAAY,CAACS,QAAQ,GACxCC,qBAAW,CAACN,KAAK,CAAC,GAClBhB,QAAQ,CACLuB,MAAM,EAAE,CACRC,IAAI,EAAE,CACNC,sBAAsB,CAAC;AACtBC,IAAAA,IAAI,EAAEd,YAAY,CAACe,YAAY,CAACC,OAAO;AACvCC,IAAAA,KAAK,EAAEP,qBAAW,CAACN,KAAK,CAAC;AACzBR,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACR,MAAMsB,aAAa,GAAG9B,QAAQ,CAC3BY,YAAY,EAAE,CACdY,IAAI,EAAE,CACNO,WAAW,CAAC;IACXnB,YAAY,EAAEA,YAAY,CAACgB,OAAO;AAClCZ,IAAAA,KAAK,EAAEM,qBAAW,CAACN,KAAK,CAAC;AACzBR,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AAEJ,EAAA,MAAMwB,QAAoC,GAAG;AAC3CC,IAAAA,MAAM,EAAEX,qBAAW,CAACN,KAAK,CAAC;IAC1BI,cAAc;AACdc,IAAAA,iBAAiB,EAAEZ,qBAAW,CAACN,KAAK,CAAC;AACrCmB,IAAAA,oBAAoB,EAAEL,aAAa;AACnCH,IAAAA,YAAY,EAAEf,YAAY,CAACe,YAAY,CAACC,OAAO;IAC/CQ,SAAS,EAAExB,YAAY,CAACyB,gBAAgB;IACxCzB,YAAY,EAAEA,YAAY,CAACgB,OAAO;IAClCU,sBAAsB,EAAE1B,YAAY,CAAC2B,iBAAAA;GACtC,CAAA;;AAED;AACA,EAAA,MAAMC,IAAI,GAAG;IACXC,iBAAiB,EAAEX,aAAa,CAACY,IAAI;IACrC5B,MAAM,EAAEA,MAAM,CAAC6B,WAAAA;GAChB,CAAA;;AAED;AACA,EAAA,IAAIC,kBAAkB,GAAGC,wCAAwB,CAACb,QAAQ,EAAEQ,IAAI,CAAC,CAAA;AACjE,EAAA,IAAI3B,mBAAmB,EAAE;IACvB,MAAMiC,eAAe,GAAG9C,QAAQ,CAACY,YAAY,EAAE,CAACY,IAAI,EAAE,CAACuB,UAAU,CAAC;MAChEnC,YAAY,EAAEA,YAAY,CAACgB,OAAO;MAClCf,mBAAmB,EAAEA,mBAAmB,CAACmC,SAAS;AAClDxC,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;AAEF,IAAA,MAAMyC,sBAAsB,GAAG;AAC7B,MAAA,GAAGjB,QAAQ;MACXnB,mBAAmB,EAAEA,mBAAmB,CAACmC,SAAS;AAClDF,MAAAA,eAAAA;KACD,CAAA;IAEDF,kBAAkB,GAAGM,kDAAkC,CACrD;MAAE,GAAGD,sBAAAA;KAAwB,EAC7BT,IAAI,CACL,CAAA;AACH,GAAA;;AAEA;EACA,MAAMW,cAAc,GAAG,CAACnC,KAAK,EAAEH,mBAAmB,CAAC,CAACuC,MAAM,CAACC,eAAQ,CAAC,CAAA;AAEpE,EAAA,OACEC,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAAC/C,KAAK,CAAA;AAClB;AAAA,GACCgD,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEd,kBAAkB;AAC/Be,IAAAA,OAAO,EAAER,cAAc;IACvBS,GAAG,EAAE7C,cAAc,IAAI,uBAAA;AACzB,GAAC,CAAC,CAAA;AAER;;;;;;"}