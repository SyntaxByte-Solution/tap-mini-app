'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('../accounts.cjs');
var BidReceiptGpaBuilder = require('../gpaBuilders/BidReceiptGpaBuilder.cjs');
var Operation = require('../../../types/Operation.cjs');
var Bid = require('../models/Bid.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindBidsOperation';

/**
 * Finds Bids by multiple criteria.
 * You can use any combination of keys.
 *
 * ```ts
 * // Find all bids in an Auction House.
 * const bids = await metaplex
 *   .auctionHouse()
 *   .findBids({ auctionHouse });
 *
 * // Find bids by buyer and mint.
 * const bids = await metaplex
 *   .auctionHouse()
 *   .findBids({ auctionHouse, buyer, mint });
 *
 * // Find bids by metadata.
 * const bids = await metaplex
 *   .auctionHouse()
 *   .findBids({ auctionHouse, metadata });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findBidsOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findBidsOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      programs,
      commitment
    } = scope;
    const {
      auctionHouse,
      buyer,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let bidQuery = new BidReceiptGpaBuilder.BidReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (buyer) {
      bidQuery = bidQuery.whereBuyer(buyer);
    }
    if (metadata && !mint) {
      bidQuery = bidQuery.whereMetadata(metadata);
    }
    if (mint) {
      bidQuery = bidQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return bidQuery.getAndMap(account => Bid.toLazyBid(accounts.toBidReceiptAccount(account), auctionHouse));
  }
};

exports.findBidsOperation = findBidsOperation;
exports.findBidsOperationHandler = findBidsOperationHandler;
//# sourceMappingURL=findBids.cjs.map
