{"version":3,"file":"DateTime.mjs","sources":["../../../src/types/DateTime.ts"],"sourcesContent":["import BN from 'bn.js';\nimport { BigNumberValues } from './BigNumber';\nimport { default as assert } from '@/utils/assert';\nimport type { Opaque, Option } from '@/utils';\n\nexport type DateTimeString = string;\nexport type DateTimeValues = DateTimeString | BigNumberValues | Date;\nexport type DateTime = Opaque<BN, 'DateTime'>;\n\nexport const toDateTime = (value: DateTimeValues): DateTime => {\n  if (typeof value === 'string' || isDateObject(value)) {\n    const date = new Date(value);\n    const timestamp = Math.floor(date.getTime() / 1000);\n    return new BN(timestamp) as DateTime;\n  }\n\n  return new BN(value) as DateTime;\n};\n\nexport const now = (): DateTime => toDateTime(new Date(Date.now()));\n\nexport const toOptionDateTime = (\n  value: Option<DateTimeValues>\n): Option<DateTime> => {\n  return value === null ? null : toDateTime(value);\n};\n\nexport const isDateTime = (value: any): value is DateTime => {\n  return value?.__opaque__ === 'DateTime';\n};\n\nexport function assertDateTime(value: any): asserts value is DateTime {\n  assert(isDateTime(value), 'Expected DateTime type');\n}\n\nconst isDateObject = (value: any): value is Date => {\n  return Object.prototype.toString.call(value) === '[object Date]';\n};\n\nexport const formatDateTime = (\n  value: DateTime,\n  // @ts-ignore\n  locales: Intl.LocalesArgument = 'en-US',\n  // @ts-ignore\n  options: Intl.DateTimeFormatOptions = {\n    month: 'short',\n    day: 'numeric',\n    year: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n  }\n): string => {\n  const date = new Date(value.toNumber() * 1000);\n\n  return date.toLocaleDateString(locales, options);\n};\n"],"names":["toDateTime","value","isDateObject","date","Date","timestamp","Math","floor","getTime","BN","now","toOptionDateTime","isDateTime","__opaque__","assertDateTime","assert","Object","prototype","toString","call","formatDateTime","locales","options","month","day","year","hour","minute","toNumber","toLocaleDateString"],"mappings":";;;AASaA,MAAAA,UAAU,GAAIC,KAAqB,IAAe;EAC7D,IAAI,OAAOA,KAAK,KAAK,QAAQ,IAAIC,YAAY,CAACD,KAAK,CAAC,EAAE;AACpD,IAAA,MAAME,IAAI,GAAG,IAAIC,IAAI,CAACH,KAAK,CAAC,CAAA;AAC5B,IAAA,MAAMI,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,OAAO,EAAE,GAAG,IAAI,CAAC,CAAA;AACnD,IAAA,OAAO,IAAIC,EAAE,CAACJ,SAAS,CAAC,CAAA;AAC1B,GAAA;AAEA,EAAA,OAAO,IAAII,EAAE,CAACR,KAAK,CAAC,CAAA;AACtB,EAAC;AAEYS,MAAAA,GAAG,GAAG,MAAgBV,UAAU,CAAC,IAAII,IAAI,CAACA,IAAI,CAACM,GAAG,EAAE,CAAC,EAAC;AAEtDC,MAAAA,gBAAgB,GAC3BV,KAA6B,IACR;EACrB,OAAOA,KAAK,KAAK,IAAI,GAAG,IAAI,GAAGD,UAAU,CAACC,KAAK,CAAC,CAAA;AAClD,EAAC;AAEYW,MAAAA,UAAU,GAAIX,KAAU,IAAwB;AAC3D,EAAA,OAAOA,KAAK,EAAEY,UAAU,KAAK,UAAU,CAAA;AACzC,EAAC;AAEM,SAASC,cAAc,CAACb,KAAU,EAA6B;AACpEc,EAAAA,MAAM,CAACH,UAAU,CAACX,KAAK,CAAC,EAAE,wBAAwB,CAAC,CAAA;AACrD,CAAA;AAEA,MAAMC,YAAY,GAAID,KAAU,IAAoB;EAClD,OAAOe,MAAM,CAACC,SAAS,CAACC,QAAQ,CAACC,IAAI,CAAClB,KAAK,CAAC,KAAK,eAAe,CAAA;AAClE,CAAC,CAAA;AAEYmB,MAAAA,cAAc,GAAG,CAC5BnB,KAAe;AACf;AACAoB,OAA6B,GAAG,OAAO;AACvC;AACAC,OAAmC,GAAG;AACpCC,EAAAA,KAAK,EAAE,OAAO;AACdC,EAAAA,GAAG,EAAE,SAAS;AACdC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,MAAM,EAAE,SAAA;AACV,CAAC,KACU;EACX,MAAMxB,IAAI,GAAG,IAAIC,IAAI,CAACH,KAAK,CAAC2B,QAAQ,EAAE,GAAG,IAAI,CAAC,CAAA;AAE9C,EAAA,OAAOzB,IAAI,CAAC0B,kBAAkB,CAACR,OAAO,EAAEC,OAAO,CAAC,CAAA;AAClD;;;;"}