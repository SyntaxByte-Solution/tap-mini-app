{"version":3,"file":"useNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/useNft.ts"],"sourcesContent":["import { createUtilizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { ExpectedSignerError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UseNftOperation' as const;\n\n/**\n * Utilizes a usable NFT.\n *\n * ```ts\n * await metaplex.nfts().use({ mintAddress });\n * await metaplex.nfts().use({ mintAddress, numberOfUses: 3 });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const useNftOperation = useOperation<UseNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UseNftOperation = Operation<typeof Key, UseNftInput, UseNftOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UseNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The number of uses to utilize.\n   *\n   * @defaultValue `1`\n   */\n  numberOfUses?: number; // Defaults to 1.\n\n  /**\n   * The owner of the NFT or SFT.\n   *\n   * This must be a Signer unless a `useAuthority` is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: PublicKey | Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAccount?: PublicKey;\n\n  /**\n   * The delegated use authority that should authorize this operation.\n   *\n   * @defaultValue Defaults to not using a delegated use authority\n   * and using the `owner` parameter as a Signer instead.\n   */\n  useAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UseNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const useNftOperationHandler: OperationHandler<UseNftOperation> = {\n  handle: async (\n    operation: UseNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<UseNftOutput> => {\n    return useNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UseNftBuilderParams = Omit<UseNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Utilizes a usable NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .use({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const useNftBuilder = (\n  metaplex: Metaplex,\n  params: UseNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    numberOfUses = 1,\n    owner = metaplex.identity(),\n    useAuthority,\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  if (!isSigner(owner) && !useAuthority) {\n    throw new ExpectedSignerError(\n      'owner',\n      'PublicKey',\n      'In order to use an NFT you must either provide the owner as a Signer ' +\n        'or a delegated use authority as a Signer.'\n    );\n  }\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAccount =\n    params.ownerTokenAccount ??\n    metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({\n        mint: mintAddress,\n        owner: toPublicKey(owner),\n        programs,\n      });\n  const useAuthorityRecord = useAuthority\n    ? metaplex.nfts().pdas().useAuthorityRecord({\n        mint: mintAddress,\n        useAuthority: useAuthority.publicKey,\n        programs,\n      })\n    : undefined;\n  const programAsBurner = metaplex.nfts().pdas().burner({ programs });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createUtilizeInstruction(\n          {\n            metadata,\n            tokenAccount,\n            useAuthority: useAuthority\n              ? useAuthority.publicKey\n              : toPublicKey(owner),\n            mint: mintAddress,\n            owner: toPublicKey(owner),\n            useAuthorityRecord,\n            burner: useAuthorityRecord ? programAsBurner : undefined,\n          },\n          { utilizeArgs: { numberOfUses } },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner, useAuthority].filter(isSigner),\n        key: params.instructionKey ?? 'utilizeNft',\n      })\n  );\n};\n"],"names":["Key","useNftOperation","useOperation","useNftOperationHandler","handle","operation","metaplex","scope","useNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","numberOfUses","owner","identity","useAuthority","tokenMetadataProgram","getTokenMetadata","isSigner","ExpectedSignerError","metadata","nfts","pdas","mint","tokenAccount","ownerTokenAccount","tokens","associatedTokenAccount","toPublicKey","useAuthorityRecord","publicKey","undefined","programAsBurner","burner","TransactionBuilder","make","setFeePayer","add","instruction","createUtilizeInstruction","utilizeArgs","address","signers","filter","key","instructionKey"],"mappings":"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"}