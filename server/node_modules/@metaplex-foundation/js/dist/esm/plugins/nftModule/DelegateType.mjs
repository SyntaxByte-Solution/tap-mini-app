import { TokenDelegateRole, MetadataDelegateRole } from '@metaplex-foundation/mpl-token-metadata';
import { DelegateRoleRequiredDataError } from './errors.mjs';
import { UnreachableCaseError } from '../../errors/SdkError.mjs';

const tokenDelegateRoleMap = {
  StandardV1: TokenDelegateRole.Standard,
  TransferV1: TokenDelegateRole.Transfer,
  LockedTransferV1: TokenDelegateRole.LockedTransfer,
  SaleV1: TokenDelegateRole.Sale,
  UtilityV1: TokenDelegateRole.Utility,
  StakingV1: TokenDelegateRole.Staking
};
const metadataDelegateRoleMap = {
  // AuthorityItemV1: MetadataDelegateRole.AuthorityItem,
  CollectionV1: MetadataDelegateRole.Collection,
  // UseV1: MetadataDelegateRole.Use,
  DataV1: MetadataDelegateRole.Data,
  ProgrammableConfigV1: MetadataDelegateRole.ProgrammableConfig
};
const metadataDelegateSeedMap = {
  [MetadataDelegateRole.AuthorityItem]: 'authority_item_delegate',
  [MetadataDelegateRole.Collection]: 'collection_delegate',
  [MetadataDelegateRole.Use]: 'use_delegate',
  [MetadataDelegateRole.Data]: 'data_delegate',
  [MetadataDelegateRole.ProgrammableConfig]: 'programmable_config_delegate',
  [MetadataDelegateRole.DataItem]: 'data_item_delegate',
  [MetadataDelegateRole.CollectionItem]: 'collection_item_delegate',
  [MetadataDelegateRole.ProgrammableConfigItem]: 'prog_config_item_delegate'
};
const delegateCustomDataMap = {
  // Metadata.
  // AuthorityItemV1: false,
  CollectionV1: false,
  // UseV1: false,
  DataV1: false,
  ProgrammableConfigV1: false,
  // Token
  StandardV1: true,
  TransferV1: true,
  SaleV1: true,
  UtilityV1: true,
  StakingV1: true,
  LockedTransferV1: true
};
const getTokenDelegateRole = type => {
  const role = tokenDelegateRoleMap[type];
  if (!role) throw new UnreachableCaseError(type);
  return role;
};
const getMetadataDelegateRole = type => {
  const role = metadataDelegateRoleMap[type];
  if (!role) throw new UnreachableCaseError(type);
  return role;
};
const getMetadataDelegateRoleSeed = type => {
  return metadataDelegateSeedMap[getMetadataDelegateRole(type)];
};
const getDefaultDelegateArgs = type => {
  const hasCustomData = delegateCustomDataMap[type];
  if (hasCustomData === undefined) throw new UnreachableCaseError(type);
  if (hasCustomData) throw new DelegateRoleRequiredDataError(type);
  return {
    __kind: type
  };
};

export { getDefaultDelegateArgs, getMetadataDelegateRole, getMetadataDelegateRoleSeed, getTokenDelegateRole };
//# sourceMappingURL=DelegateType.mjs.map
