{"version":3,"file":"nftPayment.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/nftPayment.ts"],"sourcesContent":["import { nftPaymentBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftPayment guard allows minting by charging the\n * payer an NFT from a specified NFT collection.\n * The NFT will be transfered to a predefined destination.\n *\n * This means the mint address of the NFT to transfer must be\n * passed when minting. This guard alone does not limit how many\n * times a holder can mint. A holder can mint as many times\n * as they have NFTs from the required collection to pay with.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftPaymentGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftPaymentGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n\n  /** The address of the account to send the NFTs to. */\n  destination: PublicKey;\n};\n\n/**\n * The settings for the nftPayment guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftPaymentGuardSettings} for more\n * information on the nftPayment guard itself.\n */\nexport type NftPaymentGuardMintSettings = {\n  /**\n   * The mint address of the NFT to pay with.\n   * This must be part of the required collection and must\n   * belong to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftPaymentGuardManifest: CandyGuardManifest<\n  NftPaymentGuardSettings,\n  NftPaymentGuardMintSettings\n> = {\n  name: 'nftPayment',\n  settingsBytes: 64,\n  settingsSerializer: createSerializerFromBeet(nftPaymentBeet),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftPayment');\n    }\n\n    const associatedTokenProgram = metaplex\n      .programs()\n      .getAssociatedToken(programs);\n\n    const nftTokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const nftMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const destinationAta = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintSettings.mint,\n      owner: settings.destination,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: nftTokenAccount,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: nftMetadata,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintSettings.mint,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: settings.destination,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: destinationAta,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: associatedTokenProgram.address,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n};\n"],"names":["nftPaymentGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftPaymentBeet","mintSettingsParser","metaplex","settings","mintSettings","payer","programs","GuardMintSettingsMissingError","associatedTokenProgram","getAssociatedToken","nftTokenAccount","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","nftMetadata","nfts","metadata","destinationAta","destination","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAkCA;AACO,MAAMA,uBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,YAAY;AAClBC,EAAAA,aAAa,EAAE,EAAE;AACjBC,EAAAA,kBAAkB,EAAEC,mCAAwB,CAACC,4BAAc,CAAC;AAC5DC,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,KAAK;AACLC,IAAAA,QAAAA;AACF,GAAC,KAAK;IACJ,IAAI,CAACF,YAAY,EAAE;AACjB,MAAA,MAAM,IAAIG,oCAA6B,CAAC,YAAY,CAAC,CAAA;AACvD,KAAA;IAEA,MAAMC,sBAAsB,GAAGN,QAAQ,CACpCI,QAAQ,EAAE,CACVG,kBAAkB,CAACH,QAAQ,CAAC,CAAA;AAE/B,IAAA,MAAMI,eAAe,GACnBN,YAAY,CAACO,YAAY,IACzBT,QAAQ,CAACU,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MAC9CC,IAAI,EAAEX,YAAY,CAACW,IAAI;MACvBC,KAAK,EAAEX,KAAK,CAACY,SAAS;AACtBX,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEJ,MAAMY,WAAW,GAAGhB,QAAQ,CAACiB,IAAI,EAAE,CAACN,IAAI,EAAE,CAACO,QAAQ,CAAC;MAClDL,IAAI,EAAEX,YAAY,CAACW,IAAI;AACvBT,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,MAAMe,cAAc,GAAGnB,QAAQ,CAACU,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MACrEC,IAAI,EAAEX,YAAY,CAACW,IAAI;MACvBC,KAAK,EAAEb,QAAQ,CAACmB,WAAW;AAC3BhB,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLiB,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAElB,eAAe;AACxBmB,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEV,WAAW;AACpBW,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAExB,YAAY,CAACW,IAAI;AAC1Bc,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAEzB,QAAQ,CAACmB,WAAW;AAC7BO,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEP,cAAc;AACvBQ,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAEpB,sBAAsB,CAACoB,OAAO;AACvCC,QAAAA,UAAU,EAAE,KAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}