{"version":3,"file":"nftBurn.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/nftBurn.ts"],"sourcesContent":["import { nftBurnBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftBurn guard restricts the mint to holders of a predefined\n * NFT Collection and burns the holder's NFT when minting.\n *\n * This means the mint address of the NFT to burn must be\n * passed when minting. This guard alone does not limit how many\n * times a holder can mint. A holder can mint as many times\n * as they have NFTs from the required collection to burn.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftBurnGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftBurnGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftBurn guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftBurnGuardSettings} for more\n * information on the nftBurn guard itself.\n */\nexport type NftBurnGuardMintSettings = {\n  /**\n   * The mint address of the NFT to burn.\n   * This must be part of the required collection and must\n   * belong to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftBurnGuardManifest: CandyGuardManifest<\n  NftBurnGuardSettings,\n  NftBurnGuardMintSettings\n> = {\n  name: 'nftBurn',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftBurnBeet),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftBurn');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const tokenEdition = metaplex.nfts().pdas().masterEdition({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const mintCollectionMetadata = metaplex.nfts().pdas().metadata({\n      mint: settings.requiredCollection,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenEdition,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintSettings.mint,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintCollectionMetadata,\n          isWritable: true,\n        },\n      ],\n    };\n  },\n};\n"],"names":["nftBurnGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftBurnBeet","mintSettingsParser","metaplex","settings","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","tokenEdition","masterEdition","mintCollectionMetadata","requiredCollection","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA+BA;AACO,MAAMA,oBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,aAAa,EAAE,EAAE;AACjBC,EAAAA,kBAAkB,EAAEC,mCAAwB,CAACC,yBAAW,CAAC;AACzDC,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QAAQ;IACRC,QAAQ;IACRC,YAAY;IACZC,KAAK;AACLC,IAAAA,QAAAA;AACF,GAAC,KAAK;IACJ,IAAI,CAACF,YAAY,EAAE;AACjB,MAAA,MAAM,IAAIG,oCAA6B,CAAC,SAAS,CAAC,CAAA;AACpD,KAAA;AAEA,IAAA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAY,IACzBN,QAAQ,CAACO,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MAC9CC,IAAI,EAAER,YAAY,CAACQ,IAAI;MACvBC,KAAK,EAAER,KAAK,CAACS,SAAS;AACtBR,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEJ,MAAMS,aAAa,GAAGb,QAAQ,CAACc,IAAI,EAAE,CAACN,IAAI,EAAE,CAACO,QAAQ,CAAC;MACpDL,IAAI,EAAER,YAAY,CAACQ,IAAI;AACvBN,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,MAAMY,YAAY,GAAGhB,QAAQ,CAACc,IAAI,EAAE,CAACN,IAAI,EAAE,CAACS,aAAa,CAAC;MACxDP,IAAI,EAAER,YAAY,CAACQ,IAAI;AACvBN,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,MAAMc,sBAAsB,GAAGlB,QAAQ,CAACc,IAAI,EAAE,CAACN,IAAI,EAAE,CAACO,QAAQ,CAAC;MAC7DL,IAAI,EAAET,QAAQ,CAACkB,kBAAkB;AACjCf,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLgB,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEnB,YAAY;AACrBoB,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEZ,aAAa;AACtBa,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAET,YAAY;AACrBU,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;QACfC,OAAO,EAAEvB,YAAY,CAACQ,IAAI;AAC1BgB,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEP,sBAAsB;AAC/BQ,QAAAA,UAAU,EAAE,IAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}