"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web_1 = require("arbundles/web");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const token_1 = __importDefault(require("../token"));
const bs58_1 = __importDefault(require("bs58"));
const async_retry_1 = __importDefault(require("async-retry"));
const web3_js_1 = require("@solana/web3.js");
class SolanaConfig extends token_1.default {
    constructor(config) {
        super(config);
        this.minConfirm = 1;
        this.base = ["lamports", 1e9];
    }
    getProvider() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.providerInstance) {
                this.providerInstance = new web3_js_1.Connection(this.providerUrl, {
                    confirmTransactionInitialTimeout: 60000,
                    commitment: "confirmed",
                });
            }
            return this.providerInstance;
        });
    }
    getTx(txId) {
        return __awaiter(this, void 0, void 0, function* () {
            const connection = yield this.getProvider();
            const stx = yield connection.getTransaction(txId, { commitment: "confirmed" });
            if (!stx)
                throw new Error("Confirmed tx not found");
            const currentSlot = yield connection.getSlot("confirmed");
            if (!stx.meta)
                throw new Error(`Unable to resolve transaction ${txId}`);
            const amount = new bignumber_js_1.default(stx.meta.postBalances[1]).minus(new bignumber_js_1.default(stx.meta.preBalances[1]));
            const tx = {
                from: stx.transaction.message.accountKeys[0].toBase58(),
                to: stx.transaction.message.accountKeys[1].toBase58(),
                amount: amount,
                blockHeight: new bignumber_js_1.default(stx.slot),
                pending: false,
                confirmed: currentSlot - stx.slot >= 1,
            };
            return tx;
        });
    }
    ownerToAddress(owner) {
        if (typeof owner === "string") {
            owner = Buffer.from(owner);
        }
        return bs58_1.default.encode(owner);
    }
    sign(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield (yield this.getSigner()).sign(data);
        });
    }
    getSigner() {
        if (!this.signer) {
            // if (this.wallet?.name === "Phantom") {
            //     this.signer = new PhantomSigner(this.wallet)
            // } else {
            //     this.signer = new InjectedSolanaSigner(this.wallet)
            // }
            this.signer = new web_1.HexInjectedSolanaSigner(this.wallet);
        }
        return this.signer;
    }
    verify(pub, data, signature) {
        // if (this.wallet?.name === "Phantom") {
        //     return PhantomSigner.verify(pub, data, signature)
        // }
        // return InjectedSolanaSigner.verify(pub, data, signature);
        return web_1.HexInjectedSolanaSigner.verify(pub, data, signature);
    }
    getCurrentHeight() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default((_a = (yield (yield this.getProvider()).getEpochInfo()).blockHeight) !== null && _a !== void 0 ? _a : 0);
        });
    }
    getFee(_amount, _to) {
        return __awaiter(this, void 0, void 0, function* () {
            // const connection = await this.getProvider()
            // const block = await connection.getRecentBlockhash();
            // const feeCalc = await connection.getFeeCalculatorForBlockhash(
            //     block.blockhash,
            // );
            // return new BigNumber(feeCalc.value.lamportsPerSignature);
            return new bignumber_js_1.default(5000); // hardcode it for now
        });
    }
    sendTx(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.wallet.sendTransaction(data, yield this.getProvider(), { skipPreflight: true });
        });
    }
    createTx(amount, to, _fee) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO: figure out how to manually set fees
            const pubkey = new web3_js_1.PublicKey(yield this.getPublicKey());
            const blockHashInfo = yield (0, async_retry_1.default)((bail) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    return yield (yield this.getProvider()).getRecentBlockhash();
                }
                catch (e) {
                    if ((_a = e.message) === null || _a === void 0 ? void 0 : _a.includes("blockhash"))
                        throw e;
                    else
                        bail(e);
                    throw new Error("Unreachable");
                }
            }), { retries: 3, minTimeout: 1000 });
            const transaction = new web3_js_1.Transaction({ recentBlockhash: blockHashInfo.blockhash, feePayer: pubkey });
            transaction.add(web3_js_1.SystemProgram.transfer({
                fromPubkey: pubkey,
                toPubkey: new web3_js_1.PublicKey(to),
                lamports: +new bignumber_js_1.default(amount).toNumber(),
            }));
            return { tx: transaction, txId: undefined };
        });
    }
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.wallet.publicKey)
                throw new Error("Wallet.publicKey is undefined");
            return this.wallet.publicKey.toBuffer();
        });
    }
}
exports.default = SolanaConfig;
//# sourceMappingURL=solana.js.map