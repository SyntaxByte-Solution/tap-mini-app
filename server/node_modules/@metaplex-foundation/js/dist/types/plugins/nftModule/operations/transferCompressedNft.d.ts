import { PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityHolder, TokenMetadataAuthorityTokenDelegate, TokenMetadataAuthorizationDetails } from '../Authorization';
import { Sft } from '../models';
import { Metaplex } from '../../../Metaplex';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler, Signer, SplTokenAmount, TransferNftCompressionParam } from '../../../types';
declare const Key: "TransferCompressedNftOperation";
/**
 * Transfers a compressed NFT or SFT from one account to another.
 *
 * ```ts
 * await metaplex.nfts().transfer({
 *   nftOrSft,
 *   toOwner,
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const transferCompressedNftOperation: import("../../../types").OperationConstructor<TransferCompressedNftOperation, "TransferCompressedNftOperation", TransferCompressedNftInput, TransferCompressedNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type TransferCompressedNftOperation = Operation<typeof Key, TransferCompressedNftInput, TransferCompressedNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type TransferCompressedNftInput = {
    /**
     * The compressed NFT or SFT to transfer.
     * We only need its address and token standard.
     */
    nftOrSft: Sft;
    /**
     * An authority allowed to transfer the asset.
     *
     * Note that Metadata authorities are
     * not supported for this instruction.
     *
     * If a `Signer` is provided directly,
     * it will be used as an Holder authority.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority?: Signer | TokenMetadataAuthorityTokenDelegate | TokenMetadataAuthorityHolder;
    /**
     * The authorization rules and data to use for the transfer.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    /**
     * The wallet to get the tokens from.
     *
     * @defaultValue The public key of the provided authority.
     */
    fromOwner?: PublicKey;
    /**
     * The token account to be debited.
     *
     * @defaultValue Defaults to the associated token account of `fromOwner`.
     */
    fromToken?: PublicKey;
    /**
     * The wallet to send the tokens to.
     */
    toOwner: PublicKey;
    /**
     * The token account to be credited.
     *
     * @defaultValue Defaults to the associated token account of `toOwner`.
     */
    toToken?: PublicKey;
    /**
     * The amount of tokens to transfer.
     *
     * @defaultValue `token(1)`
     */
    amount?: SplTokenAmount;
    /**
     * The compression data needed for transfer.
     * Including the assetProof, concurrent merkle tree account info, and compression metadata.
     */
    compression: TransferNftCompressionParam;
};
/**
 * @group Operations
 * @category Outputs
 */
export type TransferCompressedNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const transferCompressedNftOperationHandler: OperationHandler<TransferCompressedNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type TransferCompressedNftBuilderParams = Omit<TransferCompressedNftInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Transfers a compressed NFT from one account to another.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .transfer({
 *     nftOrSft,
 *     toOwner,
 *     compression,
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const transferCompressedNftBuilder: (metaplex: Metaplex, params: TransferCompressedNftBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
/**
 * Helper function to auto fetch the asset proof data from the ReadApi
 */
export declare function prepareTransferCompressedNftBuilder(metaplex: Metaplex, params: TransferCompressedNftBuilderParams): Promise<TransferCompressedNftBuilderParams>;
export {};
