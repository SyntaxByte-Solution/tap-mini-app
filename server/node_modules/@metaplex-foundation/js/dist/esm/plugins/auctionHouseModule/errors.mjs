import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';
import { MetaplexError } from '../../errors/MetaplexError.mjs';
import { formatAmount } from '../../types/Amount.mjs';

/** @group Errors */
class AuctionHouseError extends MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Auction House', cause);
    _defineProperty(this, "name", 'AuctionHouseError');
  }
}

/** @group Errors */
class TreasuryDestinationOwnerRequiredError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to update an Auction House which uses a custom token as a treasury. ' + 'You have not provided the "treasuryWithdrawalDestinationOwner" because you do not wish to change it. ' + 'However, the Auction House account does not keep track of that information so we cannot prefill that for you. ' + 'Thus, if you wish to keep the same treasury withdrawal, you must provide it explicilty. ' + 'Please provide the current "treasuryWithdrawalDestinationOwner" parameter so you can update the other fields.' + 'Note that we keep that parameter optional because no Associate Token Account is needed for Auction Houses ' + 'whose treasury is the native SOL.';
    super(message);
    _defineProperty(this, "name", 'TreasuryDestinationOwnerRequiredError');
  }
}

/** @group Errors */
class AuctioneerAuthorityRequiredError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to use or fetch an Auction House which delegates to an Auctioneer authority ' + 'but you have not provided the required "auctioneerAuthority" parameter. ' + 'Please provide the "auctioneerAuthority" parameter so the SDK can figure out which Auctioneer instance to interact with. ' + 'Note that we keep that parameter optional because no Auctioneer Authority is needed for Auction Houses ' + 'that use native Auction House behavior.';
    super(message);
    _defineProperty(this, "name", 'AuctioneerAuthorityRequiredError');
  }
}

/** @group Errors */
class AuctioneerPartialSaleNotSupportedError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to execute a partial sale, but partial orders are not supported in Auctioneer. ' + 'Any Partial Buys must be executed against a sale listed through the Auction House Sale.';
    super(message);
    _defineProperty(this, "name", 'AuctioneerPartialSaleNotSupportedError');
  }
}

/** @group Errors */
class BidAndListingHaveDifferentAuctionHousesError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to use a Bid and a Listing from different Auction Houses. ' + 'Please provide both Bid and Listing from the same Auction House. ' + 'They should have the same "auctionHouse.address".';
    super(message);
    _defineProperty(this, "name", 'BidAndListingHaveDifferentAuctionHousesError');
  }
}

/** @group Errors */
class BidAndListingHaveDifferentMintsError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to execute a sale using a Bid and a Listing that have different mint addresses. ' + 'Please provide a Bid and a Listing on the same asset in order to execute the sale. ' + 'They should have the same "asset.address".';
    super(message);
    _defineProperty(this, "name", 'BidAndListingHaveDifferentMintsError');
  }
}

/** @group Errors */
class CanceledBidIsNotAllowedError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to execute a sale using a canceled Bid. ' + 'Please provide a Bid that is not cancelled in order to execute the sale.';
    super(message);
    _defineProperty(this, "name", 'CanceledBidIsNotAllowedError');
  }
}

/** @group Errors */
class CanceledListingIsNotAllowedError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to execute a sale using a canceled Listing. ' + 'Please provide a Listing that is not cancelld in order to execute the sale.';
    super(message);
    _defineProperty(this, "name", 'CanceledListingIsNotAllowedError');
  }
}

/** @group Errors */
class CreateListingRequiresSignerError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to create a listing without providing a signer. ' + 'Either a seller or authority must be a Signer.';
    super(message);
    _defineProperty(this, "name", 'CreateListingRequiresSignerError');
  }
}

/** @group Errors */
class WithdrawFromBuyerAccountRequiresSignerError extends AuctionHouseError {
  constructor() {
    const message = 'You are trying to withdraw from buyer account without providing a signer. ' + 'Either a buyer or authority must be a Signer.';
    super(message);
    _defineProperty(this, "name", 'WithdrawFromBuyerAccountRequiresSignerError');
  }
}

/** @group Errors */
class PartialPriceMismatchError extends AuctionHouseError {
  constructor(expected, actual) {
    const message = 'The calculated partial price does not equal the partial price provided. ' + `Expected to receive ${formatAmount(expected)} per SFT ` + `but provided ${formatAmount(actual)} per SFT. ` + 'The token price must equal the price it has in the listing. ' + 'If executing a partial sale, ' + 'divide the total price by the number of total tokens on sale and multiply it by the number of tokens you want to buy.';
    super(message);
    _defineProperty(this, "name", 'PartialPriceMismatchError');
  }
}

/** @group Errors */
class FindAllSupportsOnlyThreeFiltersMaxError extends AuctionHouseError {
  constructor() {
    const message = 'Solana filter allows only to provide four custom filters, ' + 'one of the filters is internal so it is only possible to provide 3 custom filters. ' + 'Please provide less filters to the find all query.';
    super(message);
    _defineProperty(this, "name", 'FindAllSupportsOnlyThreeFiltersMaxError');
  }
}

export { AuctionHouseError, AuctioneerAuthorityRequiredError, AuctioneerPartialSaleNotSupportedError, BidAndListingHaveDifferentAuctionHousesError, BidAndListingHaveDifferentMintsError, CanceledBidIsNotAllowedError, CanceledListingIsNotAllowedError, CreateListingRequiresSignerError, FindAllSupportsOnlyThreeFiltersMaxError, PartialPriceMismatchError, TreasuryDestinationOwnerRequiredError, WithdrawFromBuyerAccountRequiresSignerError };
//# sourceMappingURL=errors.mjs.map
