import * as beet from '@metaplex-foundation/beet';
import { BotTax } from './BotTax';
import { SolPayment } from './SolPayment';
import { TokenPayment } from './TokenPayment';
import { StartDate } from './StartDate';
import { ThirdPartySigner } from './ThirdPartySigner';
import { TokenGate } from './TokenGate';
import { Gatekeeper } from './Gatekeeper';
import { EndDate } from './EndDate';
import { AllowList } from './AllowList';
import { MintLimit } from './MintLimit';
import { NftPayment } from './NftPayment';
import { RedeemedAmount } from './RedeemedAmount';
import { AddressGate } from './AddressGate';
import { NftGate } from './NftGate';
import { NftBurn } from './NftBurn';
import { TokenBurn } from './TokenBurn';
import { FreezeSolPayment } from './FreezeSolPayment';
import { FreezeTokenPayment } from './FreezeTokenPayment';
import { ProgramGate } from './ProgramGate';
import { Allocation } from './Allocation';
export declare type GuardSet = {
    botTax: beet.COption<BotTax>;
    solPayment: beet.COption<SolPayment>;
    tokenPayment: beet.COption<TokenPayment>;
    startDate: beet.COption<StartDate>;
    thirdPartySigner: beet.COption<ThirdPartySigner>;
    tokenGate: beet.COption<TokenGate>;
    gatekeeper: beet.COption<Gatekeeper>;
    endDate: beet.COption<EndDate>;
    allowList: beet.COption<AllowList>;
    mintLimit: beet.COption<MintLimit>;
    nftPayment: beet.COption<NftPayment>;
    redeemedAmount: beet.COption<RedeemedAmount>;
    addressGate: beet.COption<AddressGate>;
    nftGate: beet.COption<NftGate>;
    nftBurn: beet.COption<NftBurn>;
    tokenBurn: beet.COption<TokenBurn>;
    freezeSolPayment: beet.COption<FreezeSolPayment>;
    freezeTokenPayment: beet.COption<FreezeTokenPayment>;
    programGate: beet.COption<ProgramGate>;
    allocation: beet.COption<Allocation>;
};
export declare const guardSetBeet: beet.FixableBeetArgsStruct<GuardSet>;
