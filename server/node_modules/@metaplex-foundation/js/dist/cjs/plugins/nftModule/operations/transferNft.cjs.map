{"version":3,"file":"transferNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/transferNft.ts"],"sourcesContent":["import { createTransferInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  getSignerFromTokenMetadataAuthority,\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthorityHolder,\n  TokenMetadataAuthorityTokenDelegate,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport { isNonFungible, isProgrammable, Sft } from '../models';\nimport {\n  TransferCompressedNftBuilderParams,\n  prepareTransferCompressedNftBuilder,\n  transferCompressedNftBuilder,\n} from './transferCompressedNft';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n  TransferNftCompressionParam,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'TransferNftOperation' as const;\n\n/**\n * Transfers an NFT or SFT from one account to another.\n *\n * ```ts\n * await metaplex.nfts().transfer({\n *   nftOrSft,\n *   toOwner,\n *   amount: token(5),\n * });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const transferNftOperation = useOperation<TransferNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type TransferNftOperation = Operation<\n  typeof Key,\n  TransferNftInput,\n  TransferNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type TransferNftInput = {\n  /**\n   * The NFT or SFT to transfer.\n   * We only need its address and token standard.\n   */\n  nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;\n\n  /**\n   * An authority allowed to transfer the asset.\n   *\n   * Note that Metadata authorities are\n   * not supported for this instruction.\n   *\n   * If a `Signer` is provided directly,\n   * it will be used as an Holder authority.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?:\n    | Signer\n    | TokenMetadataAuthorityTokenDelegate\n    | TokenMetadataAuthorityHolder;\n\n  /**\n   * The authorization rules and data to use for the transfer.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n\n  /**\n   * The wallet to get the tokens from.\n   *\n   * @defaultValue The public key of the provided authority.\n   */\n  fromOwner?: PublicKey;\n\n  /**\n   * The token account to be debited.\n   *\n   * @defaultValue Defaults to the associated token account of `fromOwner`.\n   */\n  fromToken?: PublicKey;\n\n  /**\n   * The wallet to send the tokens to.\n   */\n  toOwner: PublicKey;\n\n  /**\n   * The token account to be credited.\n   *\n   * @defaultValue Defaults to the associated token account of `toOwner`.\n   */\n  toToken?: PublicKey;\n\n  /**\n   * The amount of tokens to transfer.\n   *\n   * @defaultValue `token(1)`\n   */\n  amount?: SplTokenAmount;\n\n  /**\n   * The compression data needed for transfer.\n   */\n  compression?: TransferNftCompressionParam;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type TransferNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const transferNftOperationHandler: OperationHandler<TransferNftOperation> =\n  {\n    handle: async (\n      operation: TransferNftOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<TransferNftOutput> => {\n      // handle the case of transferring compressed nfts\n      if (\n        !!operation.input.compression ||\n        // @ts-ignore\n        !!operation.input.nftOrSft?.compression?.compressed\n      ) {\n        operation.input = await prepareTransferCompressedNftBuilder(\n          metaplex,\n          operation.input as TransferCompressedNftBuilderParams\n        );\n        return transferCompressedNftBuilder(\n          metaplex,\n          operation.input as TransferCompressedNftBuilderParams,\n          scope\n        ).sendAndConfirm(metaplex, scope.confirmOptions);\n      }\n\n      return transferNftBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type TransferNftBuilderParams = Omit<\n  TransferNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Transfers an NFT or SFT from one account to another.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .transfer({\n *     nftOrSft,\n *     toOwner,\n *     amount: token(5),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const transferNftBuilder = (\n  metaplex: Metaplex,\n  params: TransferNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    nftOrSft,\n    authority = metaplex.identity(),\n    toOwner,\n    amount = token(1),\n    authorizationDetails,\n  } = params;\n\n  // From owner.\n  const fromOwner =\n    params.fromOwner ??\n    getSignerFromTokenMetadataAuthority(authority).publicKey;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const ataProgram = metaplex.programs().getAssociatedToken(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const edition = metaplex.nfts().pdas().masterEdition({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const fromToken =\n    params.fromToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: nftOrSft.address,\n      owner: fromOwner,\n      programs,\n    });\n  const toToken =\n    params.toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: nftOrSft.address,\n      owner: toOwner,\n      programs,\n    });\n  const ownerTokenRecord = metaplex.nfts().pdas().tokenRecord({\n    mint: nftOrSft.address,\n    token: fromToken,\n    programs,\n  });\n  const destinationTokenRecord = metaplex.nfts().pdas().tokenRecord({\n    mint: nftOrSft.address,\n    token: toToken,\n    programs,\n  });\n\n  // Auth.\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority:\n      '__kind' in authority\n        ? authority\n        : { __kind: 'holder', owner: authority, token: fromToken },\n    authorizationDetails,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createTransferInstruction(\n          {\n            token: fromToken,\n            tokenOwner: fromOwner,\n            destination: toToken,\n            destinationOwner: toOwner,\n            mint: nftOrSft.address,\n            metadata,\n            edition: isNonFungible(nftOrSft) ? edition : undefined,\n            ownerTokenRecord: isProgrammable(nftOrSft)\n              ? ownerTokenRecord\n              : undefined,\n            destinationTokenRecord: isProgrammable(nftOrSft)\n              ? destinationTokenRecord\n              : undefined,\n            authority: auth.accounts.authority,\n            payer: payer.publicKey,\n            systemProgram: systemProgram.address,\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            splTokenProgram: tokenProgram.address,\n            splAtaProgram: ataProgram.address,\n            authorizationRules: auth.accounts.authorizationRules,\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n          },\n          {\n            transferArgs: {\n              __kind: 'V1',\n              amount: amount.basisPoints,\n              ...auth.data,\n            },\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, ...auth.signers],\n        key: params.instructionKey ?? 'transferNft',\n      })\n  );\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","transferNftOperation","useOperation","transferNftOperationHandler","handle","operation","metaplex","scope","input","compression","nftOrSft","compressed","prepareTransferCompressedNftBuilder","transferCompressedNftBuilder","sendAndConfirm","confirmOptions","transferNftBuilder","params","options","programs","payer","rpc","getDefaultFeePayer","authority","identity","toOwner","amount","token","authorizationDetails","fromOwner","getSignerFromTokenMetadataAuthority","publicKey","tokenMetadataProgram","getTokenMetadata","ataProgram","getAssociatedToken","tokenProgram","getToken","systemProgram","getSystem","metadata","nfts","pdas","mint","address","edition","masterEdition","fromToken","tokens","associatedTokenAccount","owner","toToken","ownerTokenRecord","tokenRecord","destinationTokenRecord","auth","parseTokenMetadataAuthorization","__kind","TransactionBuilder","make","setFeePayer","add","instruction","createTransferInstruction","tokenOwner","destination","destinationOwner","isNonFungible","undefined","isProgrammable","accounts","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","splAtaProgram","authorizationRules","authorizationRulesProgram","transferArgs","basisPoints","data","signers","key","instructionKey"],"mappings":";;;;;;;;;;;;;AA6BA,MAAMA,mBAAmB,GAAG,IAAIC,iBAAS,CACvC,6CAA6C,CAC9C,CAAA;;AAED;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,sBAA+B,CAAA;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,oBAAoB,GAAGC,sBAAY,CAAuBF,GAAG,EAAC;;AAE3E;AACA;AACA;AACA;;AA2FA;AACA;AACA;AACA;AACO,MAAMG,2BAAmE,GAC9E;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA+B,EAC/BC,QAAkB,EAClBC,KAAqB,KACU;AAC/B;AACA,IAAA,IACE,CAAC,CAACF,SAAS,CAACG,KAAK,CAACC,WAAW;AAC7B;IACA,CAAC,CAACJ,SAAS,CAACG,KAAK,CAACE,QAAQ,EAAED,WAAW,EAAEE,UAAU,EACnD;MACAN,SAAS,CAACG,KAAK,GAAG,MAAMI,yDAAmC,CACzDN,QAAQ,EACRD,SAAS,CAACG,KAAK,CAChB,CAAA;AACD,MAAA,OAAOK,kDAA4B,CACjCP,QAAQ,EACRD,SAAS,CAACG,KAAK,EACfD,KAAK,CACN,CAACO,cAAc,CAACR,QAAQ,EAAEC,KAAK,CAACQ,cAAc,CAAC,CAAA;AAClD,KAAA;AAEA,IAAA,OAAOC,kBAAkB,CACvBV,QAAQ,EACRD,SAAS,CAACG,KAAK,EACfD,KAAK,CACN,CAACO,cAAc,CAACR,QAAQ,EAAEC,KAAK,CAACQ,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaC,MAAAA,kBAAkB,GAAG,CAChCV,QAAkB,EAClBW,MAAgC,EAChCC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGd,QAAQ,CAACe,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJR,QAAQ;AACRa,IAAAA,SAAS,GAAGjB,QAAQ,CAACkB,QAAQ,EAAE;IAC/BC,OAAO;AACPC,IAAAA,MAAM,GAAGC,YAAK,CAAC,CAAC,CAAC;AACjBC,IAAAA,oBAAAA;AACF,GAAC,GAAGX,MAAM,CAAA;;AAEV;EACA,MAAMY,SAAS,GACbZ,MAAM,CAACY,SAAS,IAChBC,iDAAmC,CAACP,SAAS,CAAC,CAACQ,SAAS,CAAA;;AAE1D;EACA,MAAMC,oBAAoB,GAAG1B,QAAQ,CAACa,QAAQ,EAAE,CAACc,gBAAgB,CAACd,QAAQ,CAAC,CAAA;EAC3E,MAAMe,UAAU,GAAG5B,QAAQ,CAACa,QAAQ,EAAE,CAACgB,kBAAkB,CAAChB,QAAQ,CAAC,CAAA;EACnE,MAAMiB,YAAY,GAAG9B,QAAQ,CAACa,QAAQ,EAAE,CAACkB,QAAQ,CAAClB,QAAQ,CAAC,CAAA;EAC3D,MAAMmB,aAAa,GAAGhC,QAAQ,CAACa,QAAQ,EAAE,CAACoB,SAAS,CAACpB,QAAQ,CAAC,CAAA;;AAE7D;EACA,MAAMqB,QAAQ,GAAGlC,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;IAC/CG,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBzB,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAM0B,OAAO,GAAGvC,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACI,aAAa,CAAC;IACnDH,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBzB,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AACF,EAAA,MAAM4B,SAAS,GACb9B,MAAM,CAAC8B,SAAS,IAChBzC,QAAQ,CAAC0C,MAAM,EAAE,CAACN,IAAI,EAAE,CAACO,sBAAsB,CAAC;IAC9CN,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBM,IAAAA,KAAK,EAAErB,SAAS;AAChBV,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AACJ,EAAA,MAAMgC,OAAO,GACXlC,MAAM,CAACkC,OAAO,IACd7C,QAAQ,CAAC0C,MAAM,EAAE,CAACN,IAAI,EAAE,CAACO,sBAAsB,CAAC;IAC9CN,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBM,IAAAA,KAAK,EAAEzB,OAAO;AACdN,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACJ,MAAMiC,gBAAgB,GAAG9C,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACW,WAAW,CAAC;IAC1DV,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBjB,IAAAA,KAAK,EAAEoB,SAAS;AAChB5B,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMmC,sBAAsB,GAAGhD,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACW,WAAW,CAAC;IAChEV,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBjB,IAAAA,KAAK,EAAEwB,OAAO;AACdhC,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;;AAEF;AACA,EAAA,MAAMoC,IAAI,GAAGC,6CAA+B,CAAClD,QAAQ,EAAE;IACrDqC,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;AACtBrB,IAAAA,SAAS,EACP,QAAQ,IAAIA,SAAS,GACjBA,SAAS,GACT;AAAEkC,MAAAA,MAAM,EAAE,QAAQ;AAAEP,MAAAA,KAAK,EAAE3B,SAAS;AAAEI,MAAAA,KAAK,EAAEoB,SAAAA;KAAW;IAC9DnB,oBAAoB;AACpBT,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AAEF,EAAA,OACEuC,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACxC,KAAK,CAAA;;AAElB;AAAA,GACCyC,GAAG,CAAC;IACHC,WAAW,EAAEC,0CAAyB,CACpC;AACEpC,MAAAA,KAAK,EAAEoB,SAAS;AAChBiB,MAAAA,UAAU,EAAEnC,SAAS;AACrBoC,MAAAA,WAAW,EAAEd,OAAO;AACpBe,MAAAA,gBAAgB,EAAEzC,OAAO;MACzBkB,IAAI,EAAEjC,QAAQ,CAACkC,OAAO;MACtBJ,QAAQ;MACRK,OAAO,EAAEsB,sBAAa,CAACzD,QAAQ,CAAC,GAAGmC,OAAO,GAAGuB,SAAS;MACtDhB,gBAAgB,EAAEiB,uBAAc,CAAC3D,QAAQ,CAAC,GACtC0C,gBAAgB,GAChBgB,SAAS;MACbd,sBAAsB,EAAEe,uBAAc,CAAC3D,QAAQ,CAAC,GAC5C4C,sBAAsB,GACtBc,SAAS;AACb7C,MAAAA,SAAS,EAAEgC,IAAI,CAACe,QAAQ,CAAC/C,SAAS;MAClCH,KAAK,EAAEA,KAAK,CAACW,SAAS;MACtBO,aAAa,EAAEA,aAAa,CAACM,OAAO;AACpC2B,MAAAA,kBAAkB,EAAEC,kCAA0B;MAC9CC,eAAe,EAAErC,YAAY,CAACQ,OAAO;MACrC8B,aAAa,EAAExC,UAAU,CAACU,OAAO;AACjC+B,MAAAA,kBAAkB,EAAEpB,IAAI,CAACe,QAAQ,CAACK,kBAAkB;AACpDC,MAAAA,yBAAyB,EAAE9E,mBAAAA;AAC7B,KAAC,EACD;AACE+E,MAAAA,YAAY,EAAE;AACZpB,QAAAA,MAAM,EAAE,IAAI;QACZ/B,MAAM,EAAEA,MAAM,CAACoD,WAAW;AAC1B,QAAA,GAAGvB,IAAI,CAACwB,IAAAA;AACV,OAAA;AACF,KAAC,EACD/C,oBAAoB,CAACY,OAAO,CAC7B;IACDoC,OAAO,EAAE,CAAC5D,KAAK,EAAE,GAAGmC,IAAI,CAACyB,OAAO,CAAC;AACjCC,IAAAA,GAAG,EAAEhE,MAAM,CAACiE,cAAc,IAAI,aAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;;;"}