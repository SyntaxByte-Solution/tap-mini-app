{"version":3,"file":"findPurchases.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchases.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toPurchaseReceiptAccount } from '../accounts';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders';\nimport {\n  AuctionHouse,\n  LazyPurchase,\n  Purchase,\n  toLazyPurchase,\n} from '../models';\nimport { FindAllSupportsOnlyThreeFiltersMaxError } from '../errors';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesOperation' as const;\n\n/**\n * Finds Purchases by multiple criteria.\n * You can use any combination of keys.\n * Supports only 3 criteria at the same time including\n * the required `auctionHouse` attribute.\n *\n * ```ts\n * // Find all purchases in an Auction House.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse });\n *\n * // Find purchases by buyer and mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, buyer, mint });\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, metadata });\n *\n * // Find purchases by seller and buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, seller, buyer });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchasesOperation = useOperation<FindPurchasesOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchasesOperation = Operation<\n  typeof Key,\n  FindPurchasesInput,\n  FindPurchasesOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchasesInput = {\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address of a buyer to search by. */\n  buyer?: PublicKey;\n\n  /** The address of a seller to search by. */\n  seller?: PublicKey;\n\n  /**\n   * The address of metadata to search by.\n   * Ignored when mint provided.\n   */\n  metadata?: PublicKey;\n\n  /** The address of a mint to search by. */\n  mint?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindPurchasesOutput = (Purchase | LazyPurchase)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchasesOperationHandler: OperationHandler<FindPurchasesOperation> =\n  {\n    handle: async (\n      operation: FindPurchasesOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindPurchasesOutput> => {\n      const { programs, commitment } = scope;\n      const { auctionHouse, buyer, seller, metadata, mint } = operation.input;\n\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n\n      let purchaseQuery = new PurchaseReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      if (Object.keys(operation.input).length > 3) {\n        throw new FindAllSupportsOnlyThreeFiltersMaxError();\n      }\n\n      if (buyer) {\n        purchaseQuery = purchaseQuery.whereBuyer(buyer);\n      }\n\n      if (seller) {\n        purchaseQuery = purchaseQuery.whereSeller(seller);\n      }\n\n      if (metadata && !mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(metadata);\n      }\n\n      if (mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(\n          metaplex.nfts().pdas().metadata({ mint, programs })\n        );\n      }\n\n      scope.throwIfCanceled();\n\n      return purchaseQuery.getAndMap((account) =>\n        toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findPurchasesOperation","useOperation","findPurchasesOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","buyer","seller","metadata","mint","input","auctionHouseProgram","getAuctionHouse","purchaseQuery","PurchaseReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","Object","keys","length","FindAllSupportsOnlyThreeFiltersMaxError","whereBuyer","whereSeller","whereMetadata","nfts","pdas","throwIfCanceled","getAndMap","account","toLazyPurchase","toPurchaseReceiptAccount"],"mappings":";;;;;;AAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAiC,CAAA;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,sBAAsB,GAAGC,YAAY,CAAyBF,GAAG,EAAC;;AAE/E;AACA;AACA;AACA;;AAqCA;AACA;AACA;AACA;AACO,MAAMG,6BAAuE,GAClF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAiC,EACjCC,QAAkB,EAClBC,KAAqB,KACY;IACjC,MAAM;MAAEC,QAAQ;AAAEC,MAAAA,UAAAA;AAAW,KAAC,GAAGF,KAAK,CAAA;IACtC,MAAM;MAAEG,YAAY;MAAEC,KAAK;MAAEC,MAAM;MAAEC,QAAQ;AAAEC,MAAAA,IAAAA;KAAM,GAAGT,SAAS,CAACU,KAAK,CAAA;IAEvE,MAAMC,mBAAmB,GAAGV,QAAQ,CAACE,QAAQ,EAAE,CAACS,eAAe,CAACT,QAAQ,CAAC,CAAA;AAEzE,IAAA,IAAIU,aAAa,GAAG,IAAIC,yBAAyB,CAC/Cb,QAAQ,EACRU,mBAAmB,CAACI,OAAO,CAC5B,CACEC,WAAW,CAAC;AAAEZ,MAAAA,UAAAA;AAAW,KAAC,CAAC,CAC3Ba,iBAAiB,CAACZ,YAAY,CAACU,OAAO,CAAC,CAAA;AAE1C,IAAA,IAAIG,MAAM,CAACC,IAAI,CAACnB,SAAS,CAACU,KAAK,CAAC,CAACU,MAAM,GAAG,CAAC,EAAE;MAC3C,MAAM,IAAIC,uCAAuC,EAAE,CAAA;AACrD,KAAA;AAEA,IAAA,IAAIf,KAAK,EAAE;AACTO,MAAAA,aAAa,GAAGA,aAAa,CAACS,UAAU,CAAChB,KAAK,CAAC,CAAA;AACjD,KAAA;AAEA,IAAA,IAAIC,MAAM,EAAE;AACVM,MAAAA,aAAa,GAAGA,aAAa,CAACU,WAAW,CAAChB,MAAM,CAAC,CAAA;AACnD,KAAA;AAEA,IAAA,IAAIC,QAAQ,IAAI,CAACC,IAAI,EAAE;AACrBI,MAAAA,aAAa,GAAGA,aAAa,CAACW,aAAa,CAAChB,QAAQ,CAAC,CAAA;AACvD,KAAA;AAEA,IAAA,IAAIC,IAAI,EAAE;AACRI,MAAAA,aAAa,GAAGA,aAAa,CAACW,aAAa,CACzCvB,QAAQ,CAACwB,IAAI,EAAE,CAACC,IAAI,EAAE,CAAClB,QAAQ,CAAC;QAAEC,IAAI;AAAEN,QAAAA,QAAAA;AAAS,OAAC,CAAC,CACpD,CAAA;AACH,KAAA;IAEAD,KAAK,CAACyB,eAAe,EAAE,CAAA;AAEvB,IAAA,OAAOd,aAAa,CAACe,SAAS,CAAEC,OAAO,IACrCC,cAAc,CAACC,wBAAwB,CAACF,OAAO,CAAC,EAAExB,YAAY,CAAC,CAChE,CAAA;AACH,GAAA;AACF;;;;"}