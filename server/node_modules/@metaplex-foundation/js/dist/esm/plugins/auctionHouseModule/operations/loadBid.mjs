import { assertNftOrSftWithToken } from '../../nftModule/models/Nft.mjs';
import assert from '../../../utils/assert.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { amount } from '../../../types/Amount.mjs';

// -----------------
// Operation
// -----------------

const Key = 'LoadBidOperation';

/**
 * Transforms a `LazyBid` model into a `Bid` model.
 *
 * ```ts
 * const bid = await metaplex
 *   .auctionHouse()
 *   .loadBid({ lazyBid };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const loadBidOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const loadBidOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      lazyBid,
      loadJsonMetadata = true
    } = operation.input;
    const bid = {
      ...lazyBid,
      model: 'bid',
      lazy: false
    };
    if (lazyBid.tokenAddress) {
      const asset = await metaplex.nfts().findByToken({
        token: lazyBid.tokenAddress,
        loadJsonMetadata
      }, scope);
      scope.throwIfCanceled();
      assertNftOrSftWithToken(asset);
      assert(asset.metadataAddress.equals(lazyBid.metadataAddress), `Asset metadata address must be ${lazyBid.metadataAddress}`);
      return {
        ...bid,
        isPublic: false,
        asset,
        tokens: amount(lazyBid.tokens, asset.mint.currency)
      };
    }
    const asset = await metaplex.nfts().findByMetadata({
      metadata: lazyBid.metadataAddress,
      loadJsonMetadata
    }, scope);
    scope.throwIfCanceled();
    return {
      ...bid,
      isPublic: true,
      asset,
      tokens: amount(lazyBid.tokens, asset.mint.currency)
    };
  }
};

export { loadBidOperation, loadBidOperationHandler };
//# sourceMappingURL=loadBid.mjs.map
