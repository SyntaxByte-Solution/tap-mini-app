"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const arbundles_1 = require("arbundles");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const crypto_1 = __importDefault(require("crypto"));
const base64url_1 = __importDefault(require("base64url"));
const token_1 = require("../token");
class ArweaveConfig extends token_1.BaseNodeToken {
    constructor(config) {
        super(config);
        this.base = ["winston", 1e12];
        this.needsFee = true;
    }
    getProvider() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.providerInstance) {
                const purl = new URL((_a = this.providerUrl) !== null && _a !== void 0 ? _a : "https://arweave.net");
                // this.providerInstance = Arweave.init({
                //   host: purl.hostname,
                //   protocol: purl.protocol.replaceAll(":", "").replaceAll("/", ""),
                //   port: purl.port,
                //   network: this?.opts?.network,
                // });
                this.providerInstance = new utils_1.Arweave({ url: purl, network: (_b = this === null || this === void 0 ? void 0 : this.opts) === null || _b === void 0 ? void 0 : _b.network });
            }
            return this.providerInstance;
        });
    }
    getTx(txId) {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            const arweave = yield this.getProvider();
            const txs = yield arweave.transactions.getStatus(txId);
            let tx;
            if (txs.status === 200) {
                tx = yield arweave.transactions.get(txId);
            }
            const confirmed = txs.status !== 202 && ((_b = (_a = txs.confirmed) === null || _a === void 0 ? void 0 : _a.number_of_confirmations) !== null && _b !== void 0 ? _b : 0) >= this.minConfirm;
            let owner;
            if (tx === null || tx === void 0 ? void 0 : tx.owner) {
                owner = this.ownerToAddress(tx.owner);
            }
            return {
                from: owner !== null && owner !== void 0 ? owner : undefined,
                to: (_c = tx === null || tx === void 0 ? void 0 : tx.target) !== null && _c !== void 0 ? _c : undefined,
                amount: new bignumber_js_1.default((_d = tx === null || tx === void 0 ? void 0 : tx.quantity) !== null && _d !== void 0 ? _d : 0),
                pending: txs.status === 202,
                confirmed,
            };
        });
    }
    ownerToAddress(owner) {
        return utils_1.Arweave.utils.bufferTob64Url(crypto_1.default
            .createHash("sha256")
            .update(utils_1.Arweave.utils.b64UrlToBuffer(Buffer.isBuffer(owner) ? (0, base64url_1.default)(owner) : owner))
            .digest());
    }
    sign(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.providerInstance.crypto.sign(this.wallet, data);
        });
    }
    getSigner() {
        return new arbundles_1.ArweaveSigner(this.wallet);
    }
    verify(pub, data, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            if (Buffer.isBuffer(pub)) {
                pub = pub.toString();
            }
            return this.providerInstance.crypto.verify(pub, data, signature);
        });
    }
    getCurrentHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getProvider()).network.getInfo().then((r) => new bignumber_js_1.default(r.height));
        });
    }
    getFee(amount, to) {
        return __awaiter(this, void 0, void 0, function* () {
            return new bignumber_js_1.default(yield (yield this.getProvider()).transactions.getPrice(new bignumber_js_1.default(amount).toNumber(), to)).integerValue(bignumber_js_1.default.ROUND_CEIL);
        });
    }
    sendTx(data) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield this.getProvider();
            const res = yield provider.transactions.post(data);
            if (res.statusText.includes("Nodes rejected the TX headers")) {
                // check user balance
                const balance = new bignumber_js_1.default(yield provider.wallets.getBalance(this.address));
                if (balance.isLessThanOrEqualTo(data.quantity))
                    throw new Error(`${this.address} has a balance of ${balance.toString()} winston, less than the required ${new bignumber_js_1.default(data.reward).plus(data.quantity)}.`);
            }
            return res;
        });
    }
    createTx(amount, to, fee) {
        return __awaiter(this, void 0, void 0, function* () {
            const arweave = yield this.getProvider();
            const tx = yield arweave.createTransaction({ quantity: new bignumber_js_1.default(amount).toString(), reward: fee, target: to }, this.wallet);
            yield arweave.transactions.sign(tx, this.wallet);
            return { txId: tx.id, tx };
        });
    }
    getPublicKey() {
        return this.wallet.n;
    }
}
exports.default = ArweaveConfig;
//# sourceMappingURL=arweave.js.map