{"version":3,"file":"createAuctionHouse.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createAuctionHouse.ts"],"sourcesContent":["import {\n  AuthorityScope,\n  createCreateAuctionHouseInstruction,\n  createDelegateAuctioneerInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { WRAPPED_SOL_MINT } from '../../tokenModule';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants';\nimport { AuctionHouse } from '../models/AuctionHouse';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500 }); // 5% fee\n * ```\n *\n * Provide `auctioneerAuthority` in case you want to enable Auctioneer.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500, auctioneerAuthority: mx.identity().publicKey };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAuctionHouseInput = {\n  /** The share of the sale the auction house takes on all NFTs as a fee. */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * This allows the centralised authority to gate which NFT can be listed, bought and sold.\n   *\n   * @defaultValue `canChangeSalePrice`\n   */\n  requiresSignOff?: boolean;\n\n  /**\n   * Is intended to be used with the Auction House that requires sign off.\n   * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n   * The Auction House can then change the price to match a matching Bid that is greater than 0.\n   *\n   * @defaultValue `false`\n   */\n  canChangeSalePrice?: boolean;\n\n  /**\n   * The list of scopes available to the user in the Auctioneer.\n   * For example Bid, List, Execute Sale.\n   *\n   * Only takes place when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue `All scopes available`\n   */\n  auctioneerScopes?: AuthorityScope[];\n\n  /**\n   * The address of the Auction House treasury mint.\n   * The token you accept as the purchase currency.\n   *\n   * @defaultValue `WRAPPED_SOL_MINT`\n   */\n  treasuryMint?: PublicKey;\n\n  /**\n   * The Authority wallet of the Auction House.\n   * It is used to sign off listings and bids in case `requiresSignOff` is true.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The account that is marked as a destination of withdrawal from the fee account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  feeWithdrawalDestination?: PublicKey;\n\n  /**\n   * The account that is marked as the owner of treasury withdrawal destination.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House is going to have Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAuctionHouseOutput = {\n  /** The address of the Auction House. */\n  auctionHouseAddress: Pda;\n\n  /** The account that used to pay the fees for selling and buying. */\n  auctionHouseFeeAccountAddress: Pda;\n\n  /** The account that receives the AuctionHouse fees. */\n  auctionHouseTreasuryAddress: Pda;\n\n  /** The account that is marked as a destination of withdrawal from the treasury account. */\n  treasuryWithdrawalDestinationAddress: PublicKey;\n\n  /** Auction House model. */\n  auctionHouse: AuctionHouse;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    async handle(\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateAuctionHouseOutput> {\n      const builder = createAuctionHouseBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const auctionHouse = await metaplex.auctionHouse().findByAddress(\n        {\n          address: output.auctionHouseAddress,\n          auctioneerAuthority: operation.input.auctioneerAuthority,\n        },\n        scope\n      );\n\n      return { ...output, auctionHouse };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response' | 'auctionHouse'\n>;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createAuctionHouse({ sellerFeeBasisPoints: 500 }) // 5% fee\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // Auctioneer delegate instruction needs to be signed by authority\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError(\n      'authority',\n      'PublicKey',\n      'You are trying to delegate to an Auctioneer authority which ' +\n        'requires the Auction House authority to sign a transaction. ' +\n        'But you provided the Auction House authority as a Public Key.'\n    );\n  }\n\n  // PDAs.\n  const auctionHouse = metaplex\n    .auctionHouse()\n    .pdas()\n    .auctionHouse({\n      creator: toPublicKey(authority),\n      treasuryMint,\n      programs,\n    });\n  const auctionHouseFeeAccount = metaplex.auctionHouse().pdas().fee({\n    auctionHouse,\n    programs,\n  });\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse,\n    programs,\n  });\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : metaplex.tokens().pdas().associatedTokenAccount({\n        mint: treasuryMint,\n        owner: treasuryWithdrawalDestinationOwner,\n        programs,\n      });\n\n  return (\n    TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        auctionHouseAddress: auctionHouse,\n        auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n        auctionHouseTreasuryAddress: auctionHouseTreasury,\n        treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination,\n      })\n\n      // Create and initialize the Auction House account.\n      .add({\n        instruction: createCreateAuctionHouseInstruction(\n          {\n            treasuryMint,\n            payer: payer.publicKey,\n            authority: toPublicKey(authority),\n            feeWithdrawalDestination,\n            treasuryWithdrawalDestination,\n            treasuryWithdrawalDestinationOwner,\n            auctionHouse,\n            auctionHouseFeeAccount,\n            auctionHouseTreasury,\n          },\n          {\n            bump: auctionHouse.bump,\n            feePayerBump: auctionHouseFeeAccount.bump,\n            treasuryBump: auctionHouseTreasury.bump,\n            sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n            requiresSignOff,\n            canChangeSalePrice,\n          }\n        ),\n        signers: [payer],\n        key: params.instructionKey ?? 'createAuctionHouse',\n      })\n\n      // Delegate to the Auctioneer authority when provided.\n      .when(Boolean(params.auctioneerAuthority), (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse,\n              authority: toPublicKey(authority as Signer),\n              auctioneerAuthority,\n              ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n                auctionHouse,\n                auctioneerAuthority,\n                programs,\n              }),\n            },\n            { scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES }\n          ),\n          signers: [authority as Signer],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n  );\n};\n"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","scope","builder","createAuctionHouseBuilder","input","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","auctionHouse","findByAddress","address","auctionHouseAddress","auctioneerAuthority","params","options","programs","payer","rpc","getDefaultFeePayer","canChangeSalePrice","requiresSignOff","authority","identity","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","publicKey","feeWithdrawalDestination","isSigner","ExpectedSignerError","pdas","creator","toPublicKey","auctionHouseFeeAccount","fee","auctionHouseTreasury","treasury","treasuryWithdrawalDestination","equals","tokens","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","setContext","auctionHouseFeeAccountAddress","auctionHouseTreasuryAddress","treasuryWithdrawalDestinationAddress","add","instruction","createCreateAuctionHouseInstruction","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","signers","key","instructionKey","when","Boolean","createDelegateAuctioneerInstruction","ahAuctioneerPda","auctioneer","scopes","auctioneerScopes","AUCTIONEER_ALL_SCOPES","delegateAuctioneerInstructionKey"],"mappings":"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"}