{"version":3,"file":"TransactionBuilder.mjs","sources":["../../../src/utils/TransactionBuilder.ts"],"sourcesContent":["import {\n  BlockhashWithExpiryBlockHeight,\n  ConfirmOptions,\n  SignaturePubkeyPair,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../plugins/rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport type { OperationOptions, Signer } from '@/types';\n\nexport type InstructionWithSigners = {\n  instruction: TransactionInstruction;\n  signers: Signer[];\n  key?: string;\n};\n\ntype TransactionOptions = {\n  /** Additional signatures. */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\nexport type TransactionBuilderOptions = Pick<\n  OperationOptions,\n  'programs' | 'payer'\n>;\n\nexport class TransactionBuilder<C extends object = object> {\n  /** The list of all instructions and their respective signers. */\n  protected records: InstructionWithSigners[] = [];\n\n  /** Options used when building the transaction. */\n  protected transactionOptions: TransactionOptions;\n\n  /** The signer to use to pay for transaction fees. */\n  protected feePayer: Signer | undefined = undefined;\n\n  /** Any additional context gathered when creating the transaction builder. */\n  protected context: C = {} as C;\n\n  constructor(transactionOptions: TransactionOptions = {}) {\n    this.transactionOptions = transactionOptions;\n  }\n\n  static make<C extends object = object>(\n    transactionOptions?: TransactionOptions\n  ): TransactionBuilder<C> {\n    return new TransactionBuilder<C>(transactionOptions);\n  }\n\n  prepend(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    const newRecords = txs.flatMap((tx) =>\n      tx instanceof TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]\n    );\n    this.records = [...newRecords, ...this.records];\n\n    return this;\n  }\n\n  append(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    const newRecords = txs.flatMap((tx) =>\n      tx instanceof TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]\n    );\n    this.records = [...this.records, ...newRecords];\n\n    return this;\n  }\n\n  add(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    return this.append(...txs);\n  }\n\n  splitUsingKey(\n    key: string,\n    include = true\n  ): [TransactionBuilder, TransactionBuilder] {\n    const firstBuilder = new TransactionBuilder(this.transactionOptions);\n    const secondBuilder = new TransactionBuilder(this.transactionOptions);\n    let keyPosition = this.records.findIndex((record) => record.key === key);\n\n    if (keyPosition > -1) {\n      keyPosition += include ? 1 : 0;\n      firstBuilder.add(...this.records.slice(0, keyPosition));\n      secondBuilder.add(...this.records.slice(keyPosition));\n    } else {\n      firstBuilder.add(this);\n    }\n\n    return [firstBuilder, secondBuilder];\n  }\n\n  splitBeforeKey(key: string): [TransactionBuilder, TransactionBuilder] {\n    return this.splitUsingKey(key, false);\n  }\n\n  splitAfterKey(key: string): [TransactionBuilder, TransactionBuilder] {\n    return this.splitUsingKey(key, true);\n  }\n\n  getInstructionsWithSigners(): InstructionWithSigners[] {\n    return this.records;\n  }\n\n  getInstructions(): TransactionInstruction[] {\n    return this.records.map((record) => record.instruction);\n  }\n\n  getInstructionCount(): number {\n    return this.records.length;\n  }\n\n  isEmpty(): boolean {\n    return this.getInstructionCount() === 0;\n  }\n\n  getSigners(): Signer[] {\n    const feePayer = this.feePayer == null ? [] : [this.feePayer];\n    const signers = this.records.flatMap((record) => record.signers);\n\n    return [...feePayer, ...signers];\n  }\n\n  setTransactionOptions(\n    transactionOptions: TransactionOptions\n  ): TransactionBuilder<C> {\n    this.transactionOptions = transactionOptions;\n\n    return this;\n  }\n\n  getTransactionOptions(): TransactionOptions | undefined {\n    return this.transactionOptions;\n  }\n\n  setFeePayer(feePayer: Signer): TransactionBuilder<C> {\n    this.feePayer = feePayer;\n\n    return this;\n  }\n\n  getFeePayer(): Signer | undefined {\n    return this.feePayer;\n  }\n\n  setContext(context: C): TransactionBuilder<C> {\n    this.context = context;\n\n    return this;\n  }\n\n  getContext(): C {\n    return this.context;\n  }\n\n  when(\n    condition: boolean,\n    callback: (tx: TransactionBuilder<C>) => TransactionBuilder<C>\n  ) {\n    return condition ? callback(this) : this;\n  }\n\n  unless(\n    condition: boolean,\n    callback: (tx: TransactionBuilder<C>) => TransactionBuilder<C>\n  ) {\n    return this.when(!condition, callback);\n  }\n\n  toTransaction(\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight,\n    options: TransactionOptions = {}\n  ): Transaction {\n    options = { ...this.getTransactionOptions(), ...options };\n\n    const transaction = new Transaction({\n      feePayer: this.getFeePayer()?.publicKey,\n      signatures: options.signatures,\n      blockhash: blockhashWithExpiryBlockHeight.blockhash,\n      lastValidBlockHeight: blockhashWithExpiryBlockHeight.lastValidBlockHeight,\n    });\n\n    transaction.add(...this.getInstructions());\n\n    return transaction;\n  }\n\n  async sendAndConfirm(\n    metaplex: Metaplex,\n    confirmOptions?: ConfirmOptions\n  ): Promise<{ response: SendAndConfirmTransactionResponse } & C> {\n    const response = await metaplex\n      .rpc()\n      .sendAndConfirmTransaction(this, confirmOptions);\n\n    return {\n      response,\n      ...this.getContext(),\n    };\n  }\n}\n"],"names":["TransactionBuilder","constructor","transactionOptions","undefined","make","prepend","txs","newRecords","flatMap","tx","getInstructionsWithSigners","records","append","add","splitUsingKey","key","include","firstBuilder","secondBuilder","keyPosition","findIndex","record","slice","splitBeforeKey","splitAfterKey","getInstructions","map","instruction","getInstructionCount","length","isEmpty","getSigners","feePayer","signers","setTransactionOptions","getTransactionOptions","setFeePayer","getFeePayer","setContext","context","getContext","when","condition","callback","unless","toTransaction","blockhashWithExpiryBlockHeight","options","transaction","Transaction","publicKey","signatures","blockhash","lastValidBlockHeight","sendAndConfirm","metaplex","confirmOptions","response","rpc","sendAndConfirmTransaction"],"mappings":"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"}