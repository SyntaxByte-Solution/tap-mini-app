{"version":3,"file":"readApiConnection.mjs","sources":["../../../src/utils/readApiConnection.ts"],"sourcesContent":["// TODO(jon): Pretty sure this whole file should just be a separate package that gets packaged\n// alongside the Read API instead\n\nimport { TokenStandard } from '@metaplex-foundation/mpl-token-metadata';\nimport { PROGRAM_ID as BUBBLEGUM_PROGRAM_ID } from '@metaplex-foundation/mpl-bubblegum';\nimport {\n  Commitment,\n  Connection,\n  ConnectionConfig,\n  PublicKey,\n} from '@solana/web3.js';\nimport BN from 'bn.js';\nimport type { Metadata, Mint, NftOriginalEdition } from '@/plugins';\nimport type { SplTokenCurrency } from '@/types';\nimport { Pda, amount, toBigNumber } from '@/types';\n\nimport { ReadApiError } from '@/errors/ReadApiError';\nimport type {\n  GetAssetProofRpcInput,\n  GetAssetProofRpcResponse,\n  GetAssetRpcInput,\n  GetAssetsByOwnerRpcInput,\n  GetAssetsByGroupRpcInput,\n  ReadApiAsset,\n  ReadApiAssetList,\n} from '@/types/ReadApi';\n\ntype JsonRpcParams<ReadApiMethodParams> = {\n  method: string;\n  id?: string;\n  params: ReadApiMethodParams;\n};\n\ntype JsonRpcOutput<ReadApiJsonOutput> = {\n  result: ReadApiJsonOutput;\n};\n\nexport const toNftEditionFromReadApiAsset = (\n  input: ReadApiAsset\n): NftOriginalEdition => {\n  return {\n    model: 'nftEdition',\n    isOriginal: true,\n    address: new PublicKey(input.id),\n    supply: toBigNumber(input.supply.print_current_supply),\n    maxSupply: toBigNumber(input.supply.print_max_supply),\n  };\n};\n\nexport const toMintFromReadApiAsset = (input: ReadApiAsset): Mint => {\n  const currency: SplTokenCurrency = {\n    symbol: 'Token',\n    decimals: 0,\n    namespace: 'spl-token',\n  };\n\n  return {\n    model: 'mint',\n    address: new PublicKey(input.id),\n    // TODO(jon): Presumably, this should be the Master Edition address upon decompression\n    mintAuthorityAddress: new PublicKey(input.id),\n    // TODO(jon): Presumably, this should be the Master Edition address upon decompression\n    freezeAuthorityAddress: new PublicKey(input.id),\n    decimals: 0,\n    supply: amount(1, currency),\n    isWrappedSol: false,\n    currency,\n  };\n};\n\nexport const toMetadataFromReadApiAsset = (input: ReadApiAsset): Metadata => {\n  const updateAuthority = input.authorities?.find((authority) =>\n    authority.scopes.includes('full')\n  );\n\n  const collection = input.grouping.find(\n    ({ group_key }) => group_key === 'collection'\n  );\n\n  return {\n    model: 'metadata',\n    // TODO(jon): We technically don't have a metadata address anymore. We can derive one though\n    address: Pda.find(BUBBLEGUM_PROGRAM_ID, [\n      Buffer.from('asset', 'utf-8'),\n      new PublicKey(input.compression.tree).toBuffer(),\n      Uint8Array.from(new BN(input.compression.leaf_id).toArray('le', 8)),\n    ]),\n    mintAddress: new PublicKey(input.id),\n    updateAuthorityAddress: new PublicKey(updateAuthority!.address),\n\n    name: input.content.metadata?.name ?? '',\n    symbol: input.content.metadata?.symbol ?? '',\n\n    json: input.content.metadata,\n    jsonLoaded: true,\n    uri: input.content.json_uri,\n    isMutable: input.mutable,\n\n    primarySaleHappened: input.royalty.primary_sale_happened,\n    sellerFeeBasisPoints: input.royalty.basis_points,\n    creators: input.creators,\n\n    editionNonce: input.supply.edition_nonce,\n    tokenStandard: TokenStandard.NonFungible,\n\n    collection: collection\n      ? { address: new PublicKey(collection.group_value), verified: false }\n      : null,\n\n    compression: input.compression,\n\n    // TODO(jon): Read API doesn't return this info\n    collectionDetails: null,\n    // TODO(jon): Read API doesn't return this info\n    uses: null,\n    // TODO(jon): Read API doesn't return this info\n    programmableConfig: null,\n  };\n};\n\nexport class ReadApiConnection extends Connection {\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig\n  ) {\n    // TODO(jon): Take in an optional override for the Read API, or potentially adapters for other endpoints\n    super(endpoint, commitmentOrConfig);\n  }\n\n  private callReadApi = async <ReadApiMethodParams, ReadApiJsonOutput>(\n    jsonRpcParams: JsonRpcParams<ReadApiMethodParams>\n  ): Promise<JsonRpcOutput<ReadApiJsonOutput>> => {\n    const response = await fetch(this.rpcEndpoint, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        jsonrpc: '2.0',\n        method: jsonRpcParams.method,\n        id: jsonRpcParams.id ?? 'rpd-op-123',\n        params: jsonRpcParams.params,\n      }),\n    });\n\n    return await response.json();\n  };\n\n  // Asset id can be calculated via Bubblegum#getLeafAssetId\n  // It is a PDA with the following seeds: [\"asset\", tree, leafIndex]\n  async getAsset(assetId: PublicKey): Promise<ReadApiAsset | ReadApiError> {\n    const { result: asset } = await this.callReadApi<\n      GetAssetRpcInput,\n      ReadApiAsset\n    >({\n      method: 'getAsset',\n      params: {\n        id: assetId.toBase58(),\n      },\n    });\n\n    if (!asset) throw new ReadApiError('No asset returned');\n\n    return asset;\n  }\n\n  // Asset id can be calculated via Bubblegum#getLeafAssetId\n  // It is a PDA with the following seeds: [\"asset\", tree, leafIndex]\n  async getAssetProof(\n    assetId: PublicKey\n  ): Promise<GetAssetProofRpcResponse | ReadApiError> {\n    const { result: proof } = await this.callReadApi<\n      GetAssetProofRpcInput,\n      GetAssetProofRpcResponse\n    >({\n      method: 'getAssetProof',\n      params: {\n        id: assetId.toBase58(),\n      },\n    });\n\n    if (!proof) throw new ReadApiError('No asset proof returned');\n\n    return proof;\n  }\n\n  //\n  async getAssetsByGroup({\n    groupKey,\n    groupValue,\n    page,\n    limit,\n    sortBy,\n    before,\n    after,\n  }: GetAssetsByGroupRpcInput): Promise<ReadApiAssetList | ReadApiError> {\n    // `page` cannot be supplied with `before` or `after`\n    if (typeof page == 'number' && (before || after))\n      throw new ReadApiError(\n        'Pagination Error. Only one pagination parameter supported per query.'\n      );\n    // a pagination method MUST be selected\n    if (typeof page == 'number' || before || after)\n      throw new ReadApiError(\n        'Pagination Error. No Pagination Method Selected.'\n      );\n\n    const { result } = await this.callReadApi<\n      GetAssetsByGroupRpcInput,\n      ReadApiAssetList\n    >({\n      method: 'getAssetsByGroup',\n      params: {\n        groupKey,\n        groupValue,\n        after: after ?? null,\n        before: before ?? null,\n        limit: limit ?? null,\n        page: page ?? 0,\n        sortBy: sortBy ?? null,\n      },\n    });\n\n    if (!result) throw new ReadApiError('No results returned');\n\n    return result;\n  }\n\n  //\n  async getAssetsByOwner({\n    ownerAddress,\n    page,\n    limit,\n    sortBy,\n    before,\n    after,\n  }: GetAssetsByOwnerRpcInput): Promise<ReadApiAssetList | ReadApiError> {\n    // `page` cannot be supplied with `before` or `after`\n    if (typeof page == 'number' && (before || after))\n      throw new ReadApiError(\n        'Pagination Error. Only one pagination parameter supported per query.'\n      );\n    // a pagination method MUST be selected\n    if (typeof page == 'number' || before || after)\n      throw new ReadApiError(\n        'Pagination Error. No Pagination Method Selected.'\n      );\n\n    const { result } = await this.callReadApi<\n      GetAssetsByOwnerRpcInput,\n      ReadApiAssetList\n    >({\n      method: 'getAssetsByOwner',\n      params: {\n        ownerAddress,\n        after: after ?? null,\n        before: before ?? null,\n        limit: limit ?? null,\n        page: page ?? 0,\n        sortBy: sortBy ?? null,\n      },\n    });\n\n    if (!result) throw new ReadApiError('No results returned');\n\n    return result;\n  }\n}\n"],"names":["toNftEditionFromReadApiAsset","input","model","isOriginal","address","PublicKey","id","supply","toBigNumber","print_current_supply","maxSupply","print_max_supply","toMintFromReadApiAsset","currency","symbol","decimals","namespace","mintAuthorityAddress","freezeAuthorityAddress","amount","isWrappedSol","toMetadataFromReadApiAsset","updateAuthority","authorities","find","authority","scopes","includes","collection","grouping","group_key","Pda","BUBBLEGUM_PROGRAM_ID","Buffer","from","compression","tree","toBuffer","Uint8Array","BN","leaf_id","toArray","mintAddress","updateAuthorityAddress","name","content","metadata","json","jsonLoaded","uri","json_uri","isMutable","mutable","primarySaleHappened","royalty","primary_sale_happened","sellerFeeBasisPoints","basis_points","creators","editionNonce","edition_nonce","tokenStandard","TokenStandard","NonFungible","group_value","verified","collectionDetails","uses","programmableConfig","ReadApiConnection","Connection","constructor","endpoint","commitmentOrConfig","jsonRpcParams","response","fetch","rpcEndpoint","method","headers","body","JSON","stringify","jsonrpc","params","getAsset","assetId","result","asset","callReadApi","toBase58","ReadApiError","getAssetProof","proof","getAssetsByGroup","groupKey","groupValue","page","limit","sortBy","before","after","getAssetsByOwner","ownerAddress"],"mappings":"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"}