{"version":3,"file":"deleteNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/deleteNft.ts"],"sourcesContent":["import { createBurnInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  TokenMetadataAuthorityHolder,\n  TokenMetadataAuthorityTokenDelegate,\n  getSignerFromTokenMetadataAuthority,\n  parseTokenMetadataAuthorization,\n} from '../Authorization';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteNftOperation' as const;\n\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .delete({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteNftOperation = useOperation<DeleteNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteNftOperation = Operation<\n  typeof Key,\n  DeleteNftInput,\n  DeleteNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * An authority allowed to burn the asset.\n   *\n   * Note that Metadata authorities are\n   * not supported for this instruction.\n   *\n   * If a `Signer` is provided directly,\n   * it will be used as an Holder authority.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?:\n    | Signer\n    | TokenMetadataAuthorityTokenDelegate\n    | TokenMetadataAuthorityHolder;\n\n  /**\n   * Alias of `authority` for backwards compatibility.\n   *\n   * @deprecated Use `authority` instead.\n   * @see {@link DeleteNftInput.authority}\n   */\n  owner?: Signer;\n\n  /**\n   * The mint of the parent edition when the asset is a printed edition.\n   *\n   * @defaultValue Defaults to not providing a parent edition to the program.\n   */\n  parentEditionMint?: PublicKey;\n\n  /**\n   * The token account of the parent edition when the asset is a printed edition.\n   *\n   * @defaultValue Defaults to not providing a parent edition to the program.\n   */\n  parentEditionToken?: PublicKey;\n\n  /**\n   * The edition marker of the asset if it is a printed edition.\n   *\n   * @defaultValue Defaults to not providing the edition marker to the program.\n   */\n  editionMarker?: PublicKey;\n\n  /**\n   * The explicit token account linking the provided mint and owner\n   * accounts, if that account is not their associated token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAccount?: PublicKey;\n\n  /**\n   * The address of the Sized Collection NFT associated with the\n   * NFT to delete, if any. This is required as the collection NFT\n   * will need to decrement its size.\n   *\n   * @defaultValue Defaults to assuming the NFT is not associated with a\n   * Size Collection NFT.\n   */\n  collection?: PublicKey;\n\n  /**\n   * The amount of tokens to burn.\n   *\n   * @defaultValue `token(1)`\n   */\n  amount?: SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteNftOperationHandler: OperationHandler<DeleteNftOperation> = {\n  handle: async (\n    operation: DeleteNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<DeleteNftOutput> => {\n    return deleteNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteNftBuilderParams = Omit<DeleteNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that burns the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Deletes an existing NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .delete({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteNftBuilder = (\n  metaplex: Metaplex,\n  params: DeleteNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    ownerTokenAccount,\n    collection,\n    parentEditionMint,\n    parentEditionToken,\n    editionMarker,\n    amount = token(1),\n  } = params;\n\n  const authority =\n    params.authority ?? params.owner ?? (metaplex.identity() as Signer);\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const owner = getSignerFromTokenMetadataAuthority(authority).publicKey;\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const edition = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAddress =\n    ownerTokenAccount ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner,\n      programs,\n    });\n\n  // Auth.\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: mintAddress,\n    authority:\n      '__kind' in authority\n        ? authority\n        : { __kind: 'holder', owner: authority, token: tokenAddress },\n    programs,\n  });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createBurnInstruction(\n        {\n          authority: auth.accounts.authority,\n          collectionMetadata: collection\n            ? metaplex.nfts().pdas().metadata({ mint: collection, programs })\n            : undefined,\n          metadata,\n          edition,\n          mint: mintAddress,\n          token: auth.accounts.token!,\n          masterEdition: parentEditionMint\n            ? metaplex.nfts().pdas().metadata({\n                mint: parentEditionMint,\n                programs,\n              })\n            : undefined,\n          masterEditionMint: parentEditionMint,\n          masterEditionToken: parentEditionToken,\n          editionMarker,\n          tokenRecord: auth.accounts.delegateRecord,\n          systemProgram: systemProgram.address,\n          sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n          splTokenProgram: tokenProgram.address,\n        },\n        { burnArgs: { __kind: 'V1', amount: amount.basisPoints } },\n        tokenMetadataProgram.address\n      ),\n      signers: auth.signers,\n      key: params.instructionKey ?? 'deleteNft',\n    });\n};\n"],"names":["Key","deleteNftOperation","useOperation","deleteNftOperationHandler","handle","operation","metaplex","scope","deleteNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","ownerTokenAccount","collection","parentEditionMint","parentEditionToken","editionMarker","amount","token","authority","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","getSignerFromTokenMetadataAuthority","publicKey","metadata","nfts","pdas","mint","edition","masterEdition","tokenAddress","tokens","associatedTokenAccount","auth","parseTokenMetadataAuthorization","__kind","TransactionBuilder","make","setFeePayer","add","instruction","createBurnInstruction","accounts","collectionMetadata","undefined","masterEditionMint","masterEditionToken","tokenRecord","delegateRecord","address","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","burnArgs","basisPoints","signers","key","instructionKey"],"mappings":"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"}