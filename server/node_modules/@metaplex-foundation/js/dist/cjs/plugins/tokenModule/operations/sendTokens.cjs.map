{"version":3,"file":"sendTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/sendTokens.ts"],"sourcesContent":["import { createTransferInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type SendTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to send. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the destination token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the destination token account.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * sending the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The owner of the source token account.\n   *\n   * This may be provided as a PublicKey if one of the following is true:\n   * - the owner of the source token account is a multisig and the\n   *   `fromMultiSigners` parameter is provided.\n   * - we are using a delegate authority to send the tokens and the\n   *   `delegateAuthority` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n\n  /**\n   * The address of the source token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `fromOwner` parameters.\n   */\n  fromToken?: PublicKey;\n\n  /**\n   * The signing accounts to use if the source token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  fromMultiSigners?: KeypairSigner[];\n\n  /**\n   * The delegate authority of the source token account as a Signer.\n   *\n   * This is required when the owner of the source token account\n   * is provided as a PublicKey as someone needs to authorize\n   * that transfer of tokens.\n   *\n   * @defaultValue Defaults to not using a delegate authority.\n   */\n  delegateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type SendTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<SendTokensOutput> {\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ??\n        metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: toOwner,\n          programs: scope.programs,\n        });\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await sendTokensBuilder(\n        metaplex,\n        { ...operation.input, toTokenExists: destinationAccountExists },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the receiving token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that transfers the tokens. */\n  transferTokensInstructionKey?: string;\n};\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const sendTokensBuilder = async (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const source =\n    fromToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: fromOwnerPublicKey,\n      programs,\n    });\n  const destination =\n    toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing(\n            {\n              ...params,\n              mint: mintAddress,\n              owner: toOwner,\n              token: toToken,\n              tokenExists: toTokenExists,\n              tokenVariable: 'toToken',\n            },\n            { programs, payer }\n          )\n      )\n\n      // Transfer tokens.\n      .add({\n        instruction: createTransferInstruction(\n          source,\n          toPublicKey(destination),\n          delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey,\n          amount.basisPoints.toNumber(),\n          fromMultiSigners,\n          tokenProgram.address\n        ),\n        signers,\n        key: params.transferTokensInstructionKey ?? 'transferTokens',\n      })\n  );\n};\n"],"names":["Key","sendTokensOperation","useOperation","sendTokensOperationHandler","handle","operation","metaplex","scope","mintAddress","toOwner","identity","publicKey","toToken","input","destination","tokens","pdas","associatedTokenAccount","mint","owner","programs","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","sendTokensBuilder","toTokenExists","sendAndConfirm","confirmOptions","params","options","payer","getDefaultFeePayer","amount","fromOwner","fromToken","fromMultiSigners","delegateAuthority","fromOwnerPublicKey","signers","isSigner","filter","tokenProgram","getToken","source","TransactionBuilder","make","setFeePayer","add","builders","createTokenIfMissing","token","tokenExists","tokenVariable","instruction","createTransferInstruction","basisPoints","toNumber","address","key","transferTokensInstructionKey"],"mappings":"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"}