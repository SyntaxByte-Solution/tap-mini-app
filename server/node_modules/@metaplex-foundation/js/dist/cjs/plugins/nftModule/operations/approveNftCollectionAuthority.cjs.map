{"version":3,"file":"approveNftCollectionAuthority.cjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftCollectionAuthority.ts"],"sourcesContent":["import { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation' as const;\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityOperation =\n  useOperation<ApproveNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftCollectionAuthorityInput,\n  ApproveNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to approve. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * The update authority of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftCollectionAuthorityOutput> => {\n      return approveNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityBuilderParams = Omit<\n  ApproveNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the collection authority.\n      .add({\n        instruction: createApproveCollectionAuthorityInstruction(\n          {\n            collectionAuthorityRecord,\n            newCollectionAuthority: collectionAuthority,\n            updateAuthority: updateAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata,\n            mint: mintAddress,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, updateAuthority],\n        key: params.instructionKey ?? 'approveCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","approveNftCollectionAuthorityOperation","useOperation","approveNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","approveNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","updateAuthority","identity","systemProgram","getSystem","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","TransactionBuilder","make","setFeePayer","add","instruction","createApproveCollectionAuthorityInstruction","newCollectionAuthority","publicKey","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAiD,CAAA;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,sCAAsC,GACjDC,sBAAY,CAAyCF,GAAG,EAAC;;AAE3D;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAiD,EACjDC,QAAkB,EAClBC,KAAqB,KAC4B;AACjD,IAAA,OAAOC,oCAAoC,CACzCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,oCAAoC,GAAG,CAClDF,QAAkB,EAClBM,MAAkD,EAClDC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;IACXC,mBAAmB;IACnBC,eAAe,GAAGd,QAAQ,CAACe,QAAQ,EAAA;AACrC,GAAC,GAAGT,MAAM,CAAA;;AAEV;EACA,MAAMU,aAAa,GAAGhB,QAAQ,CAACQ,QAAQ,EAAE,CAACS,SAAS,CAACT,QAAQ,CAAC,CAAA;EAC7D,MAAMU,oBAAoB,GAAGlB,QAAQ,CAACQ,QAAQ,EAAE,CAACW,gBAAgB,CAACX,QAAQ,CAAC,CAAA;;AAE3E;EACA,MAAMY,QAAQ,GAAGpB,QAAQ,CAACqB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;AAC/CG,IAAAA,IAAI,EAAEX,WAAW;AACjBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMgB,yBAAyB,GAAGxB,QAAQ,CACvCqB,IAAI,EAAE,CACNC,IAAI,EAAE,CACNE,yBAAyB,CAAC;AACzBD,IAAAA,IAAI,EAAEX,WAAW;IACjBC,mBAAmB;AACnBL,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AAEJ,EAAA,OACEiB,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAAClB,KAAK,CAAA;;AAElB;AAAA,GACCmB,GAAG,CAAC;IACHC,WAAW,EAAEC,4DAA2C,CACtD;MACEN,yBAAyB;AACzBO,MAAAA,sBAAsB,EAAElB,mBAAmB;MAC3CC,eAAe,EAAEA,eAAe,CAACkB,SAAS;MAC1CvB,KAAK,EAAEA,KAAK,CAACuB,SAAS;MACtBZ,QAAQ;AACRG,MAAAA,IAAI,EAAEX,WAAW;MACjBI,aAAa,EAAEA,aAAa,CAACiB,OAAAA;AAC/B,KAAC,EACDf,oBAAoB,CAACe,OAAO,CAC7B;AACDC,IAAAA,OAAO,EAAE,CAACzB,KAAK,EAAEK,eAAe,CAAC;AACjCqB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAc,IAAI,4BAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;;;"}