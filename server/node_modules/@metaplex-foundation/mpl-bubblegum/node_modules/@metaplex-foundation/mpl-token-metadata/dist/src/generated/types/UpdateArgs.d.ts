import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import { Data } from './Data';
import { CollectionToggle } from './CollectionToggle';
import { CollectionDetailsToggle } from './CollectionDetailsToggle';
import { UsesToggle } from './UsesToggle';
import { RuleSetToggle } from './RuleSetToggle';
import { AuthorizationData } from './AuthorizationData';
import { TokenStandard } from './TokenStandard';
export type UpdateArgsRecord = {
    V1: {
        newUpdateAuthority: beet.COption<web3.PublicKey>;
        data: beet.COption<Data>;
        primarySaleHappened: beet.COption<boolean>;
        isMutable: beet.COption<boolean>;
        collection: CollectionToggle;
        collectionDetails: CollectionDetailsToggle;
        uses: UsesToggle;
        ruleSet: RuleSetToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsUpdateAuthorityV2: {
        newUpdateAuthority: beet.COption<web3.PublicKey>;
        data: beet.COption<Data>;
        primarySaleHappened: beet.COption<boolean>;
        isMutable: beet.COption<boolean>;
        collection: CollectionToggle;
        collectionDetails: CollectionDetailsToggle;
        uses: UsesToggle;
        ruleSet: RuleSetToggle;
        tokenStandard: beet.COption<TokenStandard>;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsAuthorityItemDelegateV2: {
        newUpdateAuthority: beet.COption<web3.PublicKey>;
        primarySaleHappened: beet.COption<boolean>;
        isMutable: beet.COption<boolean>;
        tokenStandard: beet.COption<TokenStandard>;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsCollectionDelegateV2: {
        collection: CollectionToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsDataDelegateV2: {
        data: beet.COption<Data>;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsProgrammableConfigDelegateV2: {
        ruleSet: RuleSetToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsDataItemDelegateV2: {
        data: beet.COption<Data>;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsCollectionItemDelegateV2: {
        collection: CollectionToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
    AsProgrammableConfigItemDelegateV2: {
        ruleSet: RuleSetToggle;
        authorizationData: beet.COption<AuthorizationData>;
    };
};
export type UpdateArgs = beet.DataEnumKeyAsKind<UpdateArgsRecord>;
export declare const isUpdateArgsV1: (x: UpdateArgs) => x is {
    __kind: "V1";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'V1';
};
export declare const isUpdateArgsAsUpdateAuthorityV2: (x: UpdateArgs) => x is {
    __kind: "AsUpdateAuthorityV2";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    data: beet.COption<Data>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    collection: CollectionToggle;
    collectionDetails: CollectionDetailsToggle;
    uses: UsesToggle;
    ruleSet: RuleSetToggle;
    tokenStandard: beet.COption<TokenStandard>;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsUpdateAuthorityV2';
};
export declare const isUpdateArgsAsAuthorityItemDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsAuthorityItemDelegateV2";
} & Omit<{
    newUpdateAuthority: beet.COption<web3.PublicKey>;
    primarySaleHappened: beet.COption<boolean>;
    isMutable: beet.COption<boolean>;
    tokenStandard: beet.COption<TokenStandard>;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsAuthorityItemDelegateV2';
};
export declare const isUpdateArgsAsCollectionDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsCollectionDelegateV2";
} & Omit<{
    collection: CollectionToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsCollectionDelegateV2';
};
export declare const isUpdateArgsAsDataDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsDataDelegateV2";
} & Omit<{
    data: beet.COption<Data>;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsDataDelegateV2';
};
export declare const isUpdateArgsAsProgrammableConfigDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsProgrammableConfigDelegateV2";
} & Omit<{
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsProgrammableConfigDelegateV2';
};
export declare const isUpdateArgsAsDataItemDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsDataItemDelegateV2";
} & Omit<{
    data: beet.COption<Data>;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsDataItemDelegateV2';
};
export declare const isUpdateArgsAsCollectionItemDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsCollectionItemDelegateV2";
} & Omit<{
    collection: CollectionToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsCollectionItemDelegateV2';
};
export declare const isUpdateArgsAsProgrammableConfigItemDelegateV2: (x: UpdateArgs) => x is {
    __kind: "AsProgrammableConfigItemDelegateV2";
} & Omit<{
    ruleSet: RuleSetToggle;
    authorizationData: beet.COption<AuthorizationData>;
}, "void"> & {
    __kind: 'AsProgrammableConfigItemDelegateV2';
};
export declare const updateArgsBeet: beet.FixableBeet<UpdateArgs, UpdateArgs>;
