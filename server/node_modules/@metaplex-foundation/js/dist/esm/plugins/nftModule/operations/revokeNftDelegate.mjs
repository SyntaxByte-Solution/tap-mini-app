import { createRevokeInstruction, RevokeArgs } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { parseTokenMetadataAuthorization } from '../Authorization.mjs';
import { parseTokenMetadataDelegateInput } from '../DelegateInput.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';
import { isNonFungible } from '../models/Metadata.mjs';

const TOKEN_AUTH_RULES_ID = new PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'RevokeNftDelegateOperation';

/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const revokeNftDelegateOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const revokeNftDelegateOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return revokeNftDelegateBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const revokeNftDelegateBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails
  } = params;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);

  // PDAs.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });

  // Delegate to revoke.
  const {
    delegateRecord,
    delegate,
    tokenAccount,
    isTokenDelegate
  } = parseTokenMetadataDelegateInput(metaplex, nftOrSft.address, params.delegate, programs);

  // Auth.
  let tokenMetadataAuthority;
  if (!('__kind' in authority)) {
    tokenMetadataAuthority = 'owner' in params.delegate ? {
      __kind: 'holder',
      owner: authority,
      token: metaplex.tokens().pdas().associatedTokenAccount({
        mint: nftOrSft.address,
        owner: authority.publicKey,
        programs
      })
    } : {
      __kind: 'metadata',
      updateAuthority: authority
    };
  } else if (authority.__kind === 'self') {
    tokenMetadataAuthority = {
      ...params.delegate,
      __kind: 'owner' in params.delegate ? 'tokenDelegate' : 'metadataDelegate',
      delegate: authority.delegate
    };
  } else {
    tokenMetadataAuthority = authority;
  }
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: tokenMetadataAuthority,
    authorizationDetails,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer)

  // Update the metadata account.
  .add({
    instruction: createRevokeInstruction({
      delegateRecord,
      delegate,
      metadata,
      masterEdition: isNonFungible(nftOrSft) ? masterEdition : undefined,
      tokenRecord: isTokenDelegate ? delegateRecord : undefined,
      mint: nftOrSft.address,
      token: tokenAccount,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      revokeArgs: RevokeArgs[params.delegate.type]
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? 'revokeNftDelegate'
  });
};

export { revokeNftDelegateBuilder, revokeNftDelegateOperation, revokeNftDelegateOperationHandler };
//# sourceMappingURL=revokeNftDelegate.mjs.map
