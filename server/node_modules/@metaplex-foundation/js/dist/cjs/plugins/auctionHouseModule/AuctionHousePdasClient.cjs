'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var buffer = require('buffer');
var Pda = require('../../types/Pda.cjs');

/**
 * This client allows you to build PDAs related to the Auction House module.
 *
 * @see {@link AuctionHouseClient}
 * @group Module Pdas
 */
class AuctionHousePdasClient {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  /** Finds the Auction House PDA for a creator and treasury tuple. */
  auctionHouse(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), input.creator.toBuffer(), input.treasuryMint.toBuffer()]);
  }

  /** Finds the Auctioneer PDA of an Auction House. */
  auctioneer(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auctioneer', 'utf8'), input.auctionHouse.toBuffer(), input.auctioneerAuthority.toBuffer()]);
  }

  /**
   * Finds the PDA of the Auction House Program
   * itself used to sign transaction.
   */
  programAsSigner(input) {
    const programId = this.programId(input?.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), buffer.Buffer.from('signer', 'utf8')]);
  }

  /** Finds the PDA of an Auction House's fee account. */
  fee(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), buffer.Buffer.from('fee_payer', 'utf8')]);
  }

  /** Finds the PDA of an Auction House's treasury account. */
  treasury(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), buffer.Buffer.from('treasury', 'utf8')]);
  }

  /** Finds the PDA of a buyer's escrow account. */
  buyerEscrow(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), input.auctionHouse.toBuffer(), input.buyer.toBuffer()]);
  }

  /** Finds the trade state PDA of a bid or listing. */
  tradeState(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('auction_house', 'utf8'), input.wallet.toBuffer(), input.auctionHouse.toBuffer(), ...(input.tokenAccount ? [input.tokenAccount.toBuffer()] : []), input.treasuryMint.toBuffer(), input.tokenMint.toBuffer(), input.price.toArrayLike(buffer.Buffer, 'le', 8), input.tokenSize.toArrayLike(buffer.Buffer, 'le', 8)]);
  }

  /** Finds the receipt PDA of a Listing trade state. */
  listingReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('listing_receipt', 'utf8'), input.tradeState.toBuffer()]);
  }

  /** Finds the receipt PDA of a Bid trade state. */
  bidReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('bid_receipt', 'utf8'), input.tradeState.toBuffer()]);
  }

  /** Finds the receipt PDA of a Purchase. */
  purchaseReceipt(input) {
    const programId = this.programId(input.programs);
    return Pda.Pda.find(programId, [buffer.Buffer.from('purchase_receipt', 'utf8'), input.listingTradeState.toBuffer(), input.bidTradeState.toBuffer()]);
  }
  programId(programs) {
    return this.metaplex.programs().getAuctionHouse(programs).address;
  }
}

exports.AuctionHousePdasClient = AuctionHousePdasClient;
//# sourceMappingURL=AuctionHousePdasClient.cjs.map
