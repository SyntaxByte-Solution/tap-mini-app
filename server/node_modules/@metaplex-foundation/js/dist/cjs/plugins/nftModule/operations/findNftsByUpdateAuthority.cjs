'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var accounts = require('../accounts.cjs');
var gpaBuilders = require('../gpaBuilders.cjs');
var Operation = require('../../../types/Operation.cjs');
var Metadata = require('../models/Metadata.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindNftsByUpdateAuthorityOperation';

/**
 * Finds multiple NFTs and SFTs by a given update authority.
 *
 * ```ts
 * const nfts = await metaplex
 *   .nfts()
 *   .findAllByUpdateAuthority({ updateAuthority };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findNftsByUpdateAuthorityOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findNftsByUpdateAuthorityOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      updateAuthority
    } = operation.input;
    const gpaBuilder = new gpaBuilders.MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(scope.programs).address);
    const nfts = await gpaBuilder.whereUpdateAuthority(updateAuthority).get();
    scope.throwIfCanceled();
    return nfts.map(account => {
      if (account == null) {
        return null;
      }
      try {
        return Metadata.toMetadata(accounts.toMetadataAccount(account));
      } catch (error) {
        return null;
      }
    }).filter(nft => nft !== null);
  }
};

exports.findNftsByUpdateAuthorityOperation = findNftsByUpdateAuthorityOperation;
exports.findNftsByUpdateAuthorityOperationHandler = findNftsByUpdateAuthorityOperationHandler;
//# sourceMappingURL=findNftsByUpdateAuthority.cjs.map
