{"version":3,"file":"unverifyNftCollection.cjs","sources":["../../../../../src/plugins/nftModule/operations/unverifyNftCollection.ts"],"sourcesContent":["import {\n  VerificationArgs,\n  createUnverifyCollectionInstruction,\n  createUnverifyInstruction,\n  createUnverifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCollectionOperation' as const;\n\n/**\n * Unverifies the collection of an NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .unverifyCollection({ mintAddress, collectionMintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const unverifyNftCollectionOperation =\n  useOperation<UnverifyNftCollectionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnverifyNftCollectionOperation = Operation<\n  typeof Key,\n  UnverifyNftCollectionInput,\n  UnverifyNftCollectionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnverifyNftCollectionInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The mint address of the collection NFT. */\n  collectionMintAddress: PublicKey;\n\n  /**\n   * An authority that can verify and unverify collection items\n   * from the provided `collectionMintAddress`.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * Whether or not the provided `collectionMintAddress` is a\n   * sized collection (as opposed to a legacy collection).\n   *\n   * @defaultValue `true`\n   */\n  isSizedCollection?: boolean;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority.\n   *\n   * - `false` means the collection authority is the update authority of the collection.\n   * - `legacyDelegate` means the collection authority is a delegate that was approved\n   *  using the legacy `metaplex.nfts().approveCollectionAuthority()` operation.\n   * - `metadataDelegate` means the collection authority is a delegate that was approved\n   *  using the new `metaplex.nfts().delegate()` operation.\n   * - `true` is equivalent to `legacyDelegate` for backwards compatibility.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean | 'legacyDelegate' | 'metadataDelegate';\n\n  /**\n   * The update authority of the Collection NFT.\n   *\n   * This is used to compute the metadata delegate record when\n   * `isDelegated` is equal to `\"metadataDelegate\"`.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  collectionUpdateAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnverifyNftCollectionOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unverifyNftCollectionOperationHandler: OperationHandler<UnverifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCollectionOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UnverifyNftCollectionOutput> => {\n      return unverifyNftCollectionBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnverifyNftCollectionBuilderParams = Omit<\n  UnverifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that unverifies the collection. */\n  instructionKey?: string;\n};\n\n/**\n * Unverifies the collection of an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .unverifyCollection({ mintAddress, collectionMintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unverifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCollectionBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n    collectionUpdateAuthority = metaplex.identity().publicKey,\n  } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // Accounts.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collectionMintAddress,\n    programs,\n  });\n  const collectionEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collectionMintAddress,\n    programs,\n  });\n\n  if (isDelegated === 'legacyDelegate' || isDelegated === true) {\n    const accounts = {\n      metadata,\n      collectionAuthority: collectionAuthority.publicKey,\n      payer: payer.publicKey,\n      collectionMint: collectionMintAddress,\n      collection: collectionMetadata,\n      collectionMasterEditionAccount: collectionEdition,\n      collectionAuthorityRecord: metaplex\n        .nfts()\n        .pdas()\n        .collectionAuthorityRecord({\n          mint: collectionMintAddress,\n          collectionAuthority: collectionAuthority.publicKey,\n          programs,\n        }),\n    };\n\n    const instruction = isSizedCollection\n      ? createUnverifySizedCollectionItemInstruction(\n          accounts,\n          tokenMetadataProgram.address\n        )\n      : createUnverifyCollectionInstruction(\n          accounts,\n          tokenMetadataProgram.address\n        );\n\n    return TransactionBuilder.make()\n      .setFeePayer(payer)\n      .add({\n        instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'unverifyCollection',\n      });\n  }\n\n  const delegateRecord =\n    isDelegated === 'metadataDelegate'\n      ? metaplex.nfts().pdas().metadataDelegateRecord({\n          mint: collectionMintAddress,\n          type: 'CollectionV1',\n          updateAuthority: collectionUpdateAuthority,\n          delegate: collectionAuthority.publicKey,\n          programs,\n        })\n      : undefined;\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createUnverifyInstruction(\n        {\n          authority: collectionAuthority.publicKey,\n          delegateRecord,\n          metadata,\n          collectionMint: collectionMintAddress,\n          collectionMetadata,\n          systemProgram: systemProgram.address,\n          sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n        },\n        { verificationArgs: VerificationArgs.CollectionV1 },\n        tokenMetadataProgram.address\n      ),\n      signers: [collectionAuthority],\n      key: params.instructionKey ?? 'unverifyCollection',\n    });\n};\n"],"names":["Key","unverifyNftCollectionOperation","useOperation","unverifyNftCollectionOperationHandler","handle","operation","metaplex","scope","unverifyNftCollectionBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionMintAddress","isSizedCollection","isDelegated","collectionAuthority","identity","collectionUpdateAuthority","publicKey","systemProgram","getSystem","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionMetadata","collectionEdition","masterEdition","accounts","collectionMint","collection","collectionMasterEditionAccount","collectionAuthorityRecord","instruction","createUnverifySizedCollectionItemInstruction","address","createUnverifyCollectionInstruction","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey","delegateRecord","metadataDelegateRecord","type","updateAuthority","delegate","undefined","createUnverifyInstruction","authority","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","verificationArgs","VerificationArgs","CollectionV1"],"mappings":"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"}