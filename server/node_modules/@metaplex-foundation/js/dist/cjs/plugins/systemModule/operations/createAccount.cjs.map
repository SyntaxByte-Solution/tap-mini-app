{"version":3,"file":"createAccount.cjs","sources":["../../../../../src/plugins/systemModule/operations/createAccount.ts"],"sourcesContent":["import { Keypair, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAccountOperation' as const;\n\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const { newAccount } = await metaplex\n *   .system()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAccountOperation = useOperation<CreateAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAccountOperation = Operation<\n  typeof Key,\n  CreateAccountInput,\n  CreateAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAccountInput = {\n  /** The space in bytes of the account to create. */\n  space: number;\n\n  /**\n   * The initial balance of the account.\n   *\n   * @defaultValue By default, this will be the minumum amount of lamports\n   * required for the account to be rent-exempt.\n   * i.e. it will be equal to `await metaplex.rpc().getRent(space)`.\n   */\n  lamports?: SolAmount;\n\n  /**\n   * The new account as a Signer since it will be mutated on-chain.\n   *\n   * @defaultValue Defaults to a new generated Keypair, i.e. `Keypair.generate()`\n   */\n  newAccount?: Signer;\n\n  /**\n   * The address of the program that should own the new account.\n   *\n   * @defaultValue Defaults to the System Program.\n   */\n  program?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The new account created as a Signer. */\n  newAccount: Signer;\n\n  /** The lamports used to initialize the account's balance. */\n  lamports: SolAmount;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAccountOperationHandler: OperationHandler<CreateAccountOperation> =\n  {\n    async handle(\n      operation: CreateAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateAccountOutput> {\n      const builder = await createAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAccountBuilderParams = Omit<\n  CreateAccountInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAccountBuilderContext = Omit<CreateAccountOutput, 'response'>;\n\n/**\n * Creates a new uninitialized Solana account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .system()\n *   .builders()\n *   .createAccount({ space: 100 }); // 100 bytes\n * ```\n *\n * Note that accessing this transaction builder is asynchronous\n * because we may need to contact the cluster to get the\n * rent-exemption for the provided space.\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAccountBuilder = async (\n  metaplex: Metaplex,\n  params: CreateAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateAccountBuilderContext>> => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    space,\n    newAccount = Keypair.generate(),\n    program = SystemProgram.programId,\n  } = params;\n\n  const lamports = params.lamports ?? (await metaplex.rpc().getRent(space));\n  assertSol(lamports);\n\n  return TransactionBuilder.make<CreateAccountBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({\n      newAccount,\n      lamports,\n    })\n    .add({\n      instruction: SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        space,\n        lamports: lamports.basisPoints.toNumber(),\n        programId: program,\n      }),\n      signers: [payer, newAccount],\n      key: params.instructionKey ?? 'createAccount',\n    });\n};\n"],"names":["Key","createAccountOperation","useOperation","createAccountOperationHandler","handle","operation","metaplex","scope","builder","createAccountBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","space","newAccount","Keypair","generate","program","SystemProgram","programId","lamports","getRent","assertSol","TransactionBuilder","make","setFeePayer","setContext","add","instruction","createAccount","fromPubkey","publicKey","newAccountPubkey","basisPoints","toNumber","signers","key","instructionKey"],"mappings":";;;;;;;;;AAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wBAAiC,CAAA;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,sBAAsB,GAAGC,sBAAY,CAAyBF,GAAG,EAAC;;AAE/E;AACA;AACA;AACA;;AAsDA;AACA;AACA;AACA;AACO,MAAMG,6BAAuE,GAClF;AACE,EAAA,MAAMC,MAAM,CACVC,SAAiC,EACjCC,QAAkB,EAClBC,KAAqB,EACS;AAC9B,IAAA,MAAMC,OAAO,GAAG,MAAMC,oBAAoB,CACxCH,QAAQ,EACRD,SAAS,CAACK,KAAK,EACfH,KAAK,CACN,CAAA;IACDA,KAAK,CAACI,eAAe,EAAE,CAAA;IACvB,OAAOH,OAAO,CAACI,cAAc,CAACN,QAAQ,EAAEC,KAAK,CAACM,cAAc,CAAC,CAAA;AAC/D,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaJ,MAAAA,oBAAoB,GAAG,OAClCH,QAAkB,EAClBQ,MAAkC,EAClCC,OAAkC,GAAG,EAAE,KACsB;EAC7D,MAAM;AAAEC,IAAAA,KAAK,GAAGV,QAAQ,CAACW,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGH,OAAO,CAAA;EAC/D,MAAM;IACJI,KAAK;AACLC,IAAAA,UAAU,GAAGC,eAAO,CAACC,QAAQ,EAAE;IAC/BC,OAAO,GAAGC,qBAAa,CAACC,SAAAA;AAC1B,GAAC,GAAGX,MAAM,CAAA;AAEV,EAAA,MAAMY,QAAQ,GAAGZ,MAAM,CAACY,QAAQ,KAAK,MAAMpB,QAAQ,CAACW,GAAG,EAAE,CAACU,OAAO,CAACR,KAAK,CAAC,CAAC,CAAA;EACzES,gBAAS,CAACF,QAAQ,CAAC,CAAA;EAEnB,OAAOG,qCAAkB,CAACC,IAAI,EAA+B,CAC1DC,WAAW,CAACf,KAAK,CAAC,CAClBgB,UAAU,CAAC;IACVZ,UAAU;AACVM,IAAAA,QAAAA;GACD,CAAC,CACDO,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEV,qBAAa,CAACW,aAAa,CAAC;MACvCC,UAAU,EAAEpB,KAAK,CAACqB,SAAS;MAC3BC,gBAAgB,EAAElB,UAAU,CAACiB,SAAS;MACtClB,KAAK;AACLO,MAAAA,QAAQ,EAAEA,QAAQ,CAACa,WAAW,CAACC,QAAQ,EAAE;AACzCf,MAAAA,SAAS,EAAEF,OAAAA;AACb,KAAC,CAAC;AACFkB,IAAAA,OAAO,EAAE,CAACzB,KAAK,EAAEI,UAAU,CAAC;AAC5BsB,IAAAA,GAAG,EAAE5B,MAAM,CAAC6B,cAAc,IAAI,eAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}