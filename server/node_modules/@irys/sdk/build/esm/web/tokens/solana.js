import { HexInjectedSolanaSigner } from "arbundles/web";
import BigNumber from "bignumber.js";
import BaseWebToken from "../token.js";
import bs58 from "bs58";
import retry from "async-retry";
import { Connection, PublicKey, SystemProgram, Transaction } from "@solana/web3.js";
export default class SolanaConfig extends BaseWebToken {
    signer;
    minConfirm = 1;
    constructor(config) {
        super(config);
        this.base = ["lamports", 1e9];
    }
    async getProvider() {
        if (!this.providerInstance) {
            this.providerInstance = new Connection(this.providerUrl, {
                confirmTransactionInitialTimeout: 60_000,
                commitment: "confirmed",
            });
        }
        return this.providerInstance;
    }
    async getTx(txId) {
        const connection = await this.getProvider();
        const stx = await connection.getTransaction(txId, { commitment: "confirmed" });
        if (!stx)
            throw new Error("Confirmed tx not found");
        const currentSlot = await connection.getSlot("confirmed");
        if (!stx.meta)
            throw new Error(`Unable to resolve transaction ${txId}`);
        const amount = new BigNumber(stx.meta.postBalances[1]).minus(new BigNumber(stx.meta.preBalances[1]));
        const tx = {
            from: stx.transaction.message.accountKeys[0].toBase58(),
            to: stx.transaction.message.accountKeys[1].toBase58(),
            amount: amount,
            blockHeight: new BigNumber(stx.slot),
            pending: false,
            confirmed: currentSlot - stx.slot >= 1,
        };
        return tx;
    }
    ownerToAddress(owner) {
        if (typeof owner === "string") {
            owner = Buffer.from(owner);
        }
        return bs58.encode(owner);
    }
    async sign(data) {
        return await (await this.getSigner()).sign(data);
    }
    getSigner() {
        if (!this.signer) {
            // if (this.wallet?.name === "Phantom") {
            //     this.signer = new PhantomSigner(this.wallet)
            // } else {
            //     this.signer = new InjectedSolanaSigner(this.wallet)
            // }
            this.signer = new HexInjectedSolanaSigner(this.wallet);
        }
        return this.signer;
    }
    verify(pub, data, signature) {
        // if (this.wallet?.name === "Phantom") {
        //     return PhantomSigner.verify(pub, data, signature)
        // }
        // return InjectedSolanaSigner.verify(pub, data, signature);
        return HexInjectedSolanaSigner.verify(pub, data, signature);
    }
    async getCurrentHeight() {
        return new BigNumber((await (await this.getProvider()).getEpochInfo()).blockHeight ?? 0);
    }
    async getFee(_amount, _to) {
        // const connection = await this.getProvider()
        // const block = await connection.getRecentBlockhash();
        // const feeCalc = await connection.getFeeCalculatorForBlockhash(
        //     block.blockhash,
        // );
        // return new BigNumber(feeCalc.value.lamportsPerSignature);
        return new BigNumber(5000); // hardcode it for now
    }
    async sendTx(data) {
        return await this.wallet.sendTransaction(data, await this.getProvider(), { skipPreflight: true });
    }
    async createTx(amount, to, _fee) {
        // TODO: figure out how to manually set fees
        const pubkey = new PublicKey(await this.getPublicKey());
        const blockHashInfo = await retry(async (bail) => {
            try {
                return await (await this.getProvider()).getRecentBlockhash();
            }
            catch (e) {
                if (e.message?.includes("blockhash"))
                    throw e;
                else
                    bail(e);
                throw new Error("Unreachable");
            }
        }, { retries: 3, minTimeout: 1000 });
        const transaction = new Transaction({ recentBlockhash: blockHashInfo.blockhash, feePayer: pubkey });
        transaction.add(SystemProgram.transfer({
            fromPubkey: pubkey,
            toPubkey: new PublicKey(to),
            lamports: +new BigNumber(amount).toNumber(),
        }));
        return { tx: transaction, txId: undefined };
    }
    async getPublicKey() {
        if (!this.wallet.publicKey)
            throw new Error("Wallet.publicKey is undefined");
        return this.wallet.publicKey.toBuffer();
    }
}
//# sourceMappingURL=solana.js.map