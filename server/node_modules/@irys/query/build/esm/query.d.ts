import { GraphQLQuery } from "./graphql.js";
import type { ArweaveBlocks, ArweaveBlocksVars } from "./queries/arweave/blocks.js";
import type { ArweaveTransactions, ArweaveTransactionsVars } from "./queries/arweave/transactions.js";
import type { IrysTransactionVars, IrysTransactions } from "./queries/irys/transactions.js";
import type { BuilderMethods, QueryCtorOpts, SearchOpts } from "./types.js";
export declare class Query {
    protected opts: QueryCtorOpts;
    constructor(opts?: QueryCtorOpts);
    /**
     * Sets query shape (query fields & vars) as well types used to regulate future methods. \
     * Generates setter methods for variables unless opts.skipVariableSetters is truthy. \
     * If an included type is specified, the overload will automatically register the types for you. \
     * by default, all fields from the query will be selected.
     * @param queryName the GraphQL name of the query
     * @param opts Options to provide your own queryInfo object, or to skip automatic field setter creation
     */
    search(queryName: "irys:transactions", opts?: SearchOpts): BuilderMethods<IrysTransactionVars, GraphQLQuery<IrysTransactions, IrysTransactionVars, IrysTransactions[]>>;
    search(queryName: "arweave:transactions", opts?: SearchOpts): BuilderMethods<ArweaveTransactionsVars, GraphQLQuery<ArweaveTransactions, ArweaveTransactionsVars, ArweaveTransactions[]>>;
    search(queryName: "arweave:blocks", opts?: SearchOpts): BuilderMethods<ArweaveBlocksVars, GraphQLQuery<ArweaveBlocks, ArweaveBlocksVars, ArweaveBlocks[]>>;
    search<Fields extends Record<any, any> = any, Vars extends Record<string, any> = any, BuilderVars extends Record<string, any> = any>(queryName: string, opts?: SearchOpts): BuilderMethods<BuilderVars, GraphQLQuery<Fields, Vars, Fields[]>>;
}
export default Query;
