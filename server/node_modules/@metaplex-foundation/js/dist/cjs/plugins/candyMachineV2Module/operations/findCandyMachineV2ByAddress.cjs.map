{"version":3,"file":"findCandyMachineV2ByAddress.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/findCandyMachineV2ByAddress.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  parseCandyMachineV2CollectionAccount,\n  toCandyMachineV2Account,\n} from '../accounts';\nimport { CandyMachineV2, toCandyMachineV2 } from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineV2ByAddressOperation' as const;\n\n/**\n * Find an existing Candy Machine by its address.\n *\n * ```ts\n * const candyMachine = await metaplex.candyMachinesV2().findbyAddress({ address });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachineV2ByAddressOperation =\n  useOperation<FindCandyMachineV2ByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachineV2ByAddressOperation = Operation<\n  typeof Key,\n  FindCandyMachineV2ByAddressInput,\n  CandyMachineV2\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachineV2ByAddressInput = {\n  /** The Candy Machine address. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachineV2ByAddressOperationHandler: OperationHandler<FindCandyMachineV2ByAddressOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachineV2ByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { commitment } = scope;\n      const { address } = operation.input;\n      const collectionPda = findCandyMachineV2CollectionPda(address);\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts([address, collectionPda], commitment);\n\n      const unparsedAccount = accounts[0];\n      assertAccountExists(unparsedAccount);\n      const account = toCandyMachineV2Account(unparsedAccount);\n      const collectionAccount = parseCandyMachineV2CollectionAccount(\n        accounts[1]\n      );\n\n      const mint = account.data.tokenMint\n        ? await metaplex\n            .tokens()\n            .findMintByAddress({ address: account.data.tokenMint }, scope)\n        : null;\n\n      return toCandyMachineV2(\n        account,\n        unparsedAccount,\n        collectionAccount,\n        mint\n      );\n    },\n  };\n"],"names":["Key","findCandyMachineV2ByAddressOperation","useOperation","findCandyMachineV2ByAddressOperationHandler","handle","operation","metaplex","scope","commitment","address","input","collectionPda","findCandyMachineV2CollectionPda","accounts","rpc","getMultipleAccounts","unparsedAccount","assertAccountExists","account","toCandyMachineV2Account","collectionAccount","parseCandyMachineV2CollectionAccount","mint","data","tokenMint","tokens","findMintByAddress","toCandyMachineV2"],"mappings":";;;;;;;;;;AAgBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAA+C,CAAA;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,oCAAoC,GAC/CC,sBAAY,CAAuCF,GAAG,EAAC;;AAEzD;AACA;AACA;AACA;;AAgBA;AACA;AACA;AACA;AACO,MAAMG,2CAAmG,GAC9G;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA+C,EAC/CC,QAAkB,EAClBC,KAAqB,KAClB;IACH,MAAM;AAAEC,MAAAA,UAAAA;AAAW,KAAC,GAAGD,KAAK,CAAA;IAC5B,MAAM;AAAEE,MAAAA,OAAAA;KAAS,GAAGJ,SAAS,CAACK,KAAK,CAAA;AACnC,IAAA,MAAMC,aAAa,GAAGC,oCAA+B,CAACH,OAAO,CAAC,CAAA;AAC9D,IAAA,MAAMI,UAAQ,GAAG,MAAMP,QAAQ,CAC5BQ,GAAG,EAAE,CACLC,mBAAmB,CAAC,CAACN,OAAO,EAAEE,aAAa,CAAC,EAAEH,UAAU,CAAC,CAAA;AAE5D,IAAA,MAAMQ,eAAe,GAAGH,UAAQ,CAAC,CAAC,CAAC,CAAA;IACnCI,2BAAmB,CAACD,eAAe,CAAC,CAAA;AACpC,IAAA,MAAME,OAAO,GAAGC,gCAAuB,CAACH,eAAe,CAAC,CAAA;IACxD,MAAMI,iBAAiB,GAAGC,6CAAoC,CAC5DR,UAAQ,CAAC,CAAC,CAAC,CACZ,CAAA;AAED,IAAA,MAAMS,IAAI,GAAGJ,OAAO,CAACK,IAAI,CAACC,SAAS,GAC/B,MAAMlB,QAAQ,CACXmB,MAAM,EAAE,CACRC,iBAAiB,CAAC;AAAEjB,MAAAA,OAAO,EAAES,OAAO,CAACK,IAAI,CAACC,SAAAA;AAAU,KAAC,EAAEjB,KAAK,CAAC,GAChE,IAAI,CAAA;IAER,OAAOoB,+BAAgB,CACrBT,OAAO,EACPF,eAAe,EACfI,iBAAiB,EACjBE,IAAI,CACL,CAAA;AACH,GAAA;AACF;;;;;"}