import { AuctioneerAuthorityRequiredError } from '../errors.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { now } from '../../../types/DateTime.mjs';
import { toPublicKey } from '../../../types/PublicKey.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// -----------------
// Operation
// -----------------

const Key = 'DirectBuyOperation';

/**
 * Creates a bid on a given asset and then executes a sale on the created bid and listing.
 *
 * ```ts
 * await metaplex
 *   .auctionHouse()
 *   .buy({ auctionHouse, listing, buyer };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const directBuyOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const directBuyOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const builder = await directBuyBuilder(metaplex, operation.input, scope);
    scope.throwIfCanceled();
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Creates a bid on a given asset and executes a sale on the created bid and given listing.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .auctionHouse()
 *   .builders()
 *   .buy({ auctionHouse, listing, buyer })
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const directBuyBuilder = async (metaplex, params, options = {}) => {
  // Data.
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    auctioneerAuthority,
    listing,
    price = listing.price,
    buyer = metaplex.identity(),
    authority = auctionHouse.authorityAddress,
    bookkeeper = metaplex.identity(),
    createBidInstructionKey,
    executeSaleInstructionKey
  } = params;
  const {
    tokens,
    asset,
    sellerAddress,
    receiptAddress
  } = listing;
  const printReceipt = (params.printReceipt ?? true) && Boolean(receiptAddress);
  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {
    throw new AuctioneerAuthorityRequiredError();
  }
  const bidBuilder = await metaplex.auctionHouse().builders().bid({
    auctionHouse,
    auctioneerAuthority,
    authority,
    tokens,
    price,
    mintAccount: asset.mint.address,
    seller: sellerAddress,
    buyer,
    printReceipt,
    bookkeeper,
    instructionKey: createBidInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt,
    buyerTradeState
  } = bidBuilder.getContext();
  const bid = {
    model: 'bid',
    lazy: false,
    auctionHouse,
    asset,
    tradeStateAddress: buyerTradeState,
    bookkeeperAddress: bookkeeper.publicKey,
    buyerAddress: buyer.publicKey,
    receiptAddress: receipt,
    purchaseReceiptAddress: null,
    price,
    tokens,
    canceledAt: null,
    createdAt: now(),
    isPublic: false
  };
  const saleBuilder = metaplex.auctionHouse().builders().executeSale({
    auctionHouse,
    auctioneerAuthority,
    bid,
    listing,
    printReceipt,
    bookkeeper,
    instructionKey: executeSaleInstructionKey
  }, {
    programs,
    payer
  });
  const {
    receipt: purchaseReceiptAddress
  } = saleBuilder.getContext();
  const buyerTokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
    mint: asset.address,
    owner: toPublicKey(buyer),
    programs
  });
  const purchasedAsset = {
    ...asset,
    token: {
      ...asset.token,
      address: buyerTokenAccount,
      ownerAddress: toPublicKey(buyer)
    }
  };
  const purchase = {
    auctionHouse,
    model: 'purchase',
    lazy: false,
    buyerAddress: toPublicKey(buyer),
    sellerAddress,
    asset: purchasedAsset,
    bookkeeperAddress: toPublicKey(bookkeeper),
    receiptAddress: purchaseReceiptAddress,
    price: listing.price,
    tokens,
    createdAt: now()
  };
  return TransactionBuilder.make().setContext({
    bid,
    purchase
  }).add(bidBuilder).add(saleBuilder);
};

export { directBuyBuilder, directBuyOperation, directBuyOperationHandler };
//# sourceMappingURL=directBuy.mjs.map
