{"version":3,"file":"TokenClient.mjs","sources":["../../../../src/plugins/tokenModule/TokenClient.ts"],"sourcesContent":["import {\n  ApproveTokenDelegateAuthorityInput,\n  approveTokenDelegateAuthorityOperation,\n  CreateMintInput,\n  createMintOperation,\n  CreateTokenInput,\n  createTokenOperation,\n  CreateTokenWithMintInput,\n  createTokenWithMintOperation,\n  FindMintByAddressInput,\n  findMintByAddressOperation,\n  FindTokenByAddressInput,\n  findTokenByAddressOperation,\n  FindTokenWithMintByAddressInput,\n  findTokenWithMintByAddressOperation,\n  FindTokenWithMintByMintInput,\n  findTokenWithMintByMintOperation,\n  FreezeTokensInput,\n  freezeTokensOperation,\n  MintTokensInput,\n  mintTokensOperation,\n  RevokeTokenDelegateAuthorityInput,\n  revokeTokenDelegateAuthorityOperation,\n  SendTokensInput,\n  sendTokensOperation,\n  ThawTokensInput,\n  thawTokensOperation,\n} from './operations';\nimport { TokenBuildersClient } from './TokenBuildersClient';\nimport { TokenPdasClient } from './TokenPdasClient';\nimport type { Metaplex } from '@/Metaplex';\nimport { OperationOptions } from '@/types';\n\n/**\n * This is a client for the Token module.\n *\n * It enables us to interact with the SPL Token program in order to\n * create, send, freeze, thaw, and mint tokens.\n *\n * You may access this client via the `tokens()` method of your `Metaplex` instance.\n *\n * ```ts\n * const tokenClient = metaplex.tokens();\n * ```\n *\n * @example\n * You can create a new mint account with an associated token account like so.\n * The owner of this token account will, by default, be the current identity\n * of the metaplex instance.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * ```\n *\n * @group Modules\n */\nexport class TokenClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.tokens().builders();\n   * ```\n   */\n  builders() {\n    return new TokenBuildersClient(this.metaplex);\n  }\n\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.tokens().pdas();\n   * ```\n   */\n  pdas() {\n    return new TokenPdasClient(this.metaplex);\n  }\n\n  // -----------------\n  // Queries\n  // -----------------\n\n  /** {@inheritDoc findMintByAddressOperation} */\n  findMintByAddress(input: FindMintByAddressInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(findMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenByAddressOperation} */\n  findTokenByAddress(\n    input: FindTokenByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByAddressOperation} */\n  findTokenWithMintByAddress(\n    input: FindTokenWithMintByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByMintOperation} */\n  findTokenWithMintByMint(\n    input: FindTokenWithMintByMintInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByMintOperation(input), options);\n  }\n\n  // -----------------\n  // Create\n  // -----------------\n\n  /** {@inheritDoc createMintOperation} */\n  createMint(input: CreateMintInput = {}, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createMintOperation(input), options);\n  }\n\n  /**\n   * Create a new Token account from the provided input\n   * and returns the newly created `Token` model.\n   */\n  /** {@inheritDoc createTokenOperation} */\n  createToken(input: CreateTokenInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenOperation(input), options);\n  }\n\n  /** {@inheritDoc createTokenWithMintOperation} */\n  createTokenWithMint(\n    input: CreateTokenWithMintInput = {},\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenWithMintOperation(input), options);\n  }\n\n  // -----------------\n  // Update\n  // -----------------\n\n  /** {@inheritDoc mintTokensOperation} */\n  mint(input: MintTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(mintTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc sendTokensOperation} */\n  send(input: SendTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(sendTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc freezeTokensOperation} */\n  freeze(input: FreezeTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(freezeTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc thawTokensOperation} */\n  thaw(input: ThawTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(thawTokensOperation(input), options);\n  }\n\n  // -----------------\n  // Delegate\n  // -----------------\n\n  /** {@inheritDoc approveTokenDelegateAuthorityOperation} */\n  approveDelegateAuthority(\n    input: ApproveTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(approveTokenDelegateAuthorityOperation(input), options);\n  }\n\n  /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */\n  revokeDelegateAuthority(\n    input: RevokeTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(revokeTokenDelegateAuthorityOperation(input), options);\n  }\n}\n"],"names":["TokenClient","constructor","metaplex","builders","TokenBuildersClient","pdas","TokenPdasClient","findMintByAddress","input","options","operations","execute","findMintByAddressOperation","findTokenByAddress","findTokenByAddressOperation","findTokenWithMintByAddress","findTokenWithMintByAddressOperation","findTokenWithMintByMint","findTokenWithMintByMintOperation","createMint","createMintOperation","createToken","createTokenOperation","createTokenWithMint","createTokenWithMintOperation","mint","mintTokensOperation","send","sendTokensOperation","freeze","freezeTokensOperation","thaw","thawTokensOperation","approveDelegateAuthority","approveTokenDelegateAuthorityOperation","revokeDelegateAuthority","revokeTokenDelegateAuthorityOperation"],"mappings":"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"}