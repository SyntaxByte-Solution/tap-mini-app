import { createTransferInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { getSignerFromTokenMetadataAuthority, parseTokenMetadataAuthorization } from '../Authorization.mjs';
import { prepareTransferCompressedNftBuilder, transferCompressedNftBuilder } from './transferCompressedNft.mjs';
import { isNonFungible, isProgrammable } from '../models/Metadata.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { token } from '../../../types/Amount.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

const TOKEN_AUTH_RULES_ID = new PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'TransferNftOperation';

/**
 * Transfers an NFT or SFT from one account to another.
 *
 * ```ts
 * await metaplex.nfts().transfer({
 *   nftOrSft,
 *   toOwner,
 *   amount: token(5),
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const transferNftOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const transferNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    // handle the case of transferring compressed nfts
    if (!!operation.input.compression ||
    // @ts-ignore
    !!operation.input.nftOrSft?.compression?.compressed) {
      operation.input = await prepareTransferCompressedNftBuilder(metaplex, operation.input);
      return transferCompressedNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
    }
    return transferNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Transfers an NFT or SFT from one account to another.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .transfer({
 *     nftOrSft,
 *     toOwner,
 *     amount: token(5),
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const transferNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    toOwner,
    amount = token(1),
    authorizationDetails
  } = params;

  // From owner.
  const fromOwner = params.fromOwner ?? getSignerFromTokenMetadataAuthority(authority).publicKey;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const ataProgram = metaplex.programs().getAssociatedToken(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);

  // PDAs.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  const fromToken = params.fromToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: nftOrSft.address,
    owner: fromOwner,
    programs
  });
  const toToken = params.toToken ?? metaplex.tokens().pdas().associatedTokenAccount({
    mint: nftOrSft.address,
    owner: toOwner,
    programs
  });
  const ownerTokenRecord = metaplex.nfts().pdas().tokenRecord({
    mint: nftOrSft.address,
    token: fromToken,
    programs
  });
  const destinationTokenRecord = metaplex.nfts().pdas().tokenRecord({
    mint: nftOrSft.address,
    token: toToken,
    programs
  });

  // Auth.
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: '__kind' in authority ? authority : {
      __kind: 'holder',
      owner: authority,
      token: fromToken
    },
    authorizationDetails,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer)

  // Update the metadata account.
  .add({
    instruction: createTransferInstruction({
      token: fromToken,
      tokenOwner: fromOwner,
      destination: toToken,
      destinationOwner: toOwner,
      mint: nftOrSft.address,
      metadata,
      edition: isNonFungible(nftOrSft) ? edition : undefined,
      ownerTokenRecord: isProgrammable(nftOrSft) ? ownerTokenRecord : undefined,
      destinationTokenRecord: isProgrammable(nftOrSft) ? destinationTokenRecord : undefined,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address,
      splAtaProgram: ataProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      transferArgs: {
        __kind: 'V1',
        amount: amount.basisPoints,
        ...auth.data
      }
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? 'transferNft'
  });
};

export { transferNftBuilder, transferNftOperation, transferNftOperationHandler };
//# sourceMappingURL=transferNft.mjs.map
