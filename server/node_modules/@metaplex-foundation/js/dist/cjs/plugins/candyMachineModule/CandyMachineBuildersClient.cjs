'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var updateCandyGuardAuthority = require('./operations/updateCandyGuardAuthority.cjs');
var callCandyGuardRoute = require('./operations/callCandyGuardRoute.cjs');
var createCandyMachine = require('./operations/createCandyMachine.cjs');
var createCandyGuard = require('./operations/createCandyGuard.cjs');
var deleteCandyMachine = require('./operations/deleteCandyMachine.cjs');
var deleteCandyGuard = require('./operations/deleteCandyGuard.cjs');
var insertCandyMachineItems = require('./operations/insertCandyMachineItems.cjs');
var mintFromCandyMachine = require('./operations/mintFromCandyMachine.cjs');
var unwrapCandyGuard = require('./operations/unwrapCandyGuard.cjs');
var updateCandyMachine = require('./operations/updateCandyMachine.cjs');
var updateCandyGuard = require('./operations/updateCandyGuard.cjs');
var wrapCandyGuard = require('./operations/wrapCandyGuard.cjs');

/**
 * This client allows you to access the underlying Transaction Builders
 * for the write operations of the Candy Guard module.
 *
 * @see {@link CandyMachineClient}
 * @group Module Builders
 */
class CandyMachineBuildersClient {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  /** {@inheritDoc callCandyGuardRouteBuilder} */
  callGuardRoute(input, options) {
    return callCandyGuardRoute.callCandyGuardRouteBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc createCandyMachineBuilder} */
  create(input, options) {
    return createCandyMachine.createCandyMachineBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc createCandyGuardBuilder} */
  createCandyGuard(input, options) {
    return createCandyGuard.createCandyGuardBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc deleteCandyMachineBuilder} */
  delete(input, options) {
    return deleteCandyMachine.deleteCandyMachineBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc deleteCandyGuardBuilder} */
  deleteCandyGuard(input, options) {
    return deleteCandyGuard.deleteCandyGuardBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc insertCandyMachineItemsBuilder} */
  insertItems(input, options) {
    return insertCandyMachineItems.insertCandyMachineItemsBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc mintFromCandyMachineBuilder} */
  mint(input, options) {
    return mintFromCandyMachine.mintFromCandyMachineBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unwrapCandyGuardBuilder} */
  unwrapCandyGuard(input, options) {
    return unwrapCandyGuard.unwrapCandyGuardBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc updateCandyMachineBuilder} */
  update(input, options) {
    return updateCandyMachine.updateCandyMachineBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc updateCandyGuardBuilder} */
  updateCandyGuard(input, options) {
    return updateCandyGuard.updateCandyGuardBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc updateCandyGuardAuthorityBuilder} */
  updateCandyGuardAuthority(input, options) {
    return updateCandyGuardAuthority.updateCandyGuardAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc wrapCandyGuardBuilder} */
  wrapCandyGuard(input, options) {
    return wrapCandyGuard.wrapCandyGuardBuilder(this.metaplex, input, options);
  }
}

exports.CandyMachineBuildersClient = CandyMachineBuildersClient;
//# sourceMappingURL=CandyMachineBuildersClient.cjs.map
