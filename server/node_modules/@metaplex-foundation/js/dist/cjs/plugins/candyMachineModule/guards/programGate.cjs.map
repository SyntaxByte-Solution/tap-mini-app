{"version":3,"file":"programGate.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/programGate.ts"],"sourcesContent":["import { programGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport * as beet from '@metaplex-foundation/beet';\nimport { MaximumOfFiveAdditionalProgramsError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { PublicKey } from '@/types';\n\n/**\n * The programGate guard restricts the programs that can be invoked within\n * the mint transaction. It allows the necessary programs for the mint\n * instruction to work and any other program specified in the configuration.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type ProgramGateGuardSettings = {\n  /**\n   * An array of additional programs that can be invoked in a mint transaction.\n   *\n   * These programs are in addition to the mandatory programs that\n   * are required for the mint instruction to work. Providing an empty\n   * array is equivalent to only authorising the mandatory programs.\n   *\n   * The mandatory programs are:\n   * - Candy Machine\n   * - System Program\n   * - SPL Token\n   * - SPL ASsociated Token Account\n   */\n  additional: PublicKey[];\n};\n\nconst MAXIMUM_SIZE = 5;\nconst SETTINGS_BYTES = 4 + MAXIMUM_SIZE * 32;\n\n/** @internal */\nexport const programGateGuardManifest: CandyGuardManifest<ProgramGateGuardSettings> =\n  {\n    name: 'programGate',\n    settingsBytes: SETTINGS_BYTES,\n    settingsSerializer: {\n      description: programGateBeet.description,\n      serialize: (value: ProgramGateGuardSettings) => {\n        // Maximum of 5 additional programs allowed.\n        if (value.additional.length >= MAXIMUM_SIZE) {\n          throw new MaximumOfFiveAdditionalProgramsError();\n        }\n\n        // Create buffer with beet.\n        const fixedBeet = programGateBeet.toFixedFromValue(value);\n        const writer = new beet.BeetWriter(fixedBeet.byteSize);\n        writer.write(fixedBeet, value);\n\n        // Create 164 byte buffer and fill with previous buffer.\n        // This allows for < 5 additional programs.\n        const bufferFullSize = Buffer.alloc(SETTINGS_BYTES);\n        bufferFullSize.fill(writer.buffer);\n\n        return bufferFullSize;\n      },\n      deserialize: (buffer: Buffer, offset?: number) => {\n        const fixedBeet = programGateBeet.toFixedFromData(buffer, offset ?? 0);\n        const reader = new beet.BeetReader(buffer, offset ?? 0);\n        const value = reader.read(fixedBeet);\n        return [value, reader.offset];\n      },\n    },\n  };\n"],"names":["MAXIMUM_SIZE","SETTINGS_BYTES","programGateGuardManifest","name","settingsBytes","settingsSerializer","description","programGateBeet","serialize","value","additional","length","MaximumOfFiveAdditionalProgramsError","fixedBeet","toFixedFromValue","writer","beet","BeetWriter","byteSize","write","bufferFullSize","Buffer","alloc","fill","buffer","deserialize","offset","toFixedFromData","reader","BeetReader","read"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,MAAMA,YAAY,GAAG,CAAC,CAAA;AACtB,MAAMC,cAAc,GAAG,CAAC,GAAGD,YAAY,GAAG,EAAE,CAAA;;AAE5C;AACO,MAAME,wBAAsE,GACjF;AACEC,EAAAA,IAAI,EAAE,aAAa;AACnBC,EAAAA,aAAa,EAAEH,cAAc;AAC7BI,EAAAA,kBAAkB,EAAE;IAClBC,WAAW,EAAEC,6BAAe,CAACD,WAAW;IACxCE,SAAS,EAAGC,KAA+B,IAAK;AAC9C;AACA,MAAA,IAAIA,KAAK,CAACC,UAAU,CAACC,MAAM,IAAIX,YAAY,EAAE;QAC3C,MAAM,IAAIY,2CAAoC,EAAE,CAAA;AAClD,OAAA;;AAEA;AACA,MAAA,MAAMC,SAAS,GAAGN,6BAAe,CAACO,gBAAgB,CAACL,KAAK,CAAC,CAAA;MACzD,MAAMM,MAAM,GAAG,IAAIC,eAAI,CAACC,UAAU,CAACJ,SAAS,CAACK,QAAQ,CAAC,CAAA;AACtDH,MAAAA,MAAM,CAACI,KAAK,CAACN,SAAS,EAAEJ,KAAK,CAAC,CAAA;;AAE9B;AACA;AACA,MAAA,MAAMW,cAAc,GAAGC,MAAM,CAACC,KAAK,CAACrB,cAAc,CAAC,CAAA;AACnDmB,MAAAA,cAAc,CAACG,IAAI,CAACR,MAAM,CAACS,MAAM,CAAC,CAAA;AAElC,MAAA,OAAOJ,cAAc,CAAA;KACtB;AACDK,IAAAA,WAAW,EAAE,CAACD,MAAc,EAAEE,MAAe,KAAK;MAChD,MAAMb,SAAS,GAAGN,6BAAe,CAACoB,eAAe,CAACH,MAAM,EAAEE,MAAM,IAAI,CAAC,CAAC,CAAA;AACtE,MAAA,MAAME,MAAM,GAAG,IAAIZ,eAAI,CAACa,UAAU,CAACL,MAAM,EAAEE,MAAM,IAAI,CAAC,CAAC,CAAA;AACvD,MAAA,MAAMjB,KAAK,GAAGmB,MAAM,CAACE,IAAI,CAACjB,SAAS,CAAC,CAAA;AACpC,MAAA,OAAO,CAACJ,KAAK,EAAEmB,MAAM,CAACF,MAAM,CAAC,CAAA;AAC/B,KAAA;AACF,GAAA;AACF;;;;"}