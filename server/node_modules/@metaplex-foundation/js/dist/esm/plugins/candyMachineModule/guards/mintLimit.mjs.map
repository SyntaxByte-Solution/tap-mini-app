{"version":3,"file":"mintLimit.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/mintLimit.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport { mintLimitBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet } from '@/types';\n\n/**\n * The mintLimit guard allows to specify a limit on the\n * number of mints for each individual wallet.\n *\n * The limit is set per wallet, per candy machine and per\n * identified (provided in the settings) to allow multiple\n * mint limits within a Candy Machine. This is particularly\n * useful when using groups of guards and we want each of them\n * to have a different mint limit.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type MintLimitGuardSettings = {\n  /**\n   * A unique identitifer for the limit\n   * for a given wallet and candy machine.\n   */\n  id: number;\n\n  /** The maximum number of mints allowed. */\n  limit: number;\n};\n\n/** @internal */\nexport const mintLimitGuardManifest: CandyGuardManifest<MintLimitGuardSettings> =\n  {\n    name: 'mintLimit',\n    settingsBytes: 3,\n    settingsSerializer: createSerializerFromBeet(mintLimitBeet),\n    mintSettingsParser: ({\n      metaplex,\n      settings,\n      payer,\n      candyMachine,\n      candyGuard,\n      programs,\n    }) => {\n      const counterPda = metaplex.candyMachines().pdas().mintLimitCounter({\n        id: settings.id,\n        user: payer.publicKey,\n        candyMachine,\n        candyGuard,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            address: counterPda,\n            isSigner: false,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"],"names":["mintLimitGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","mintLimitBeet","mintSettingsParser","metaplex","settings","payer","candyMachine","candyGuard","programs","counterPda","candyMachines","pdas","mintLimitCounter","id","user","publicKey","arguments","Buffer","from","remainingAccounts","address","isSigner","isWritable"],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACO,MAAMA,sBAAkE,GAC7E;AACEC,EAAAA,IAAI,EAAE,WAAW;AACjBC,EAAAA,aAAa,EAAE,CAAC;AAChBC,EAAAA,kBAAkB,EAAEC,wBAAwB,CAACC,aAAa,CAAC;AAC3DC,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QAAQ;IACRC,QAAQ;IACRC,KAAK;IACLC,YAAY;IACZC,UAAU;AACVC,IAAAA,QAAAA;AACF,GAAC,KAAK;IACJ,MAAMC,UAAU,GAAGN,QAAQ,CAACO,aAAa,EAAE,CAACC,IAAI,EAAE,CAACC,gBAAgB,CAAC;MAClEC,EAAE,EAAET,QAAQ,CAACS,EAAE;MACfC,IAAI,EAAET,KAAK,CAACU,SAAS;MACrBT,YAAY;MACZC,UAAU;AACVC,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLQ,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,OAAO,EAAEX,UAAU;AACnBY,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,UAAU,EAAE,IAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}