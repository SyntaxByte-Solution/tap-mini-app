{"version":3,"file":"CandyMachineHiddenSection.cjs","sources":["../../../../../src/plugins/candyMachineModule/models/CandyMachineHiddenSection.ts"],"sourcesContent":["import * as beet from '@metaplex-foundation/beet';\nimport { CandyMachineConfigLineSettings, CandyMachineItem } from '..';\nimport { deserializeFeatureFlags } from '@/types';\nimport { removeEmptyChars } from '@/utils';\n\n/** @internal */\nexport type CandyMachineHiddenSection = {\n  itemsLoaded: number;\n  items: CandyMachineItem[];\n  itemsLoadedMap: boolean[];\n  itemsLeftToMint: number[];\n};\n\n/** @internal */\nexport const deserializeCandyMachineHiddenSection = (\n  buffer: Buffer,\n  itemsAvailable: number,\n  itemsRemaining: number,\n  configLineSettings: CandyMachineConfigLineSettings,\n  offset = 0\n): CandyMachineHiddenSection => {\n  // Items loaded.\n  const itemsLoaded = beet.u32.read(buffer, offset);\n  offset += 4;\n\n  // Raw config lines.\n  const { nameLength } = configLineSettings;\n  const { uriLength } = configLineSettings;\n  const configLineSize = nameLength + uriLength;\n  const configLinesSize = configLineSize * itemsAvailable;\n  const rawConfigLines = buffer.slice(offset, offset + configLinesSize);\n  offset += configLinesSize;\n\n  // Items loaded map.\n  const itemsLoadedBuffer = buffer.slice(offset, offset + itemsAvailable);\n  const itemsLoadedMap = deserializeFeatureFlags(\n    itemsLoadedBuffer,\n    itemsAvailable\n  );\n  const itemsLoadedMapSize = Math.floor(itemsAvailable / 8) + 1;\n  offset += itemsLoadedMapSize;\n\n  // Items left to mint for random order only.\n  const itemsLeftToMint = beet\n    .uniformFixedSizeArray(beet.u32, itemsAvailable)\n    .read(buffer, offset)\n    .slice(0, itemsRemaining);\n\n  // Helper function to figure out if an item has been minted.\n  const itemsMinted = itemsAvailable - itemsRemaining;\n  const isMinted = (index: number): boolean =>\n    configLineSettings.isSequential\n      ? index < itemsMinted\n      : !itemsLeftToMint.includes(index);\n\n  // Parse config lines.\n  const items: CandyMachineItem[] = [];\n  itemsLoadedMap.forEach((loaded, index) => {\n    if (!loaded) return;\n\n    const namePosition = index * configLineSize;\n    const uriPosition = namePosition + nameLength;\n    const name = rawConfigLines\n      .slice(namePosition, namePosition + nameLength)\n      .toString('utf8');\n    const uri = rawConfigLines\n      .slice(uriPosition, uriPosition + uriLength)\n      .toString('utf8');\n\n    const prefixName = replaceCandyMachineItemPattern(\n      configLineSettings.prefixName,\n      index\n    );\n    const prefixUri = replaceCandyMachineItemPattern(\n      configLineSettings.prefixUri,\n      index\n    );\n\n    items.push({\n      index,\n      minted: isMinted(index),\n      name: prefixName + removeEmptyChars(name),\n      uri: prefixUri + removeEmptyChars(uri),\n    });\n  });\n\n  return {\n    itemsLoaded,\n    items,\n    itemsLoadedMap,\n    itemsLeftToMint,\n  };\n};\n\n/** @internal */\nexport const replaceCandyMachineItemPattern = (\n  value: string,\n  index: number\n): string => {\n  return value.replace('$ID+1$', `${index + 1}`).replace('$ID$', `${index}`);\n};\n"],"names":["deserializeCandyMachineHiddenSection","buffer","itemsAvailable","itemsRemaining","configLineSettings","offset","itemsLoaded","beet","u32","read","nameLength","uriLength","configLineSize","configLinesSize","rawConfigLines","slice","itemsLoadedBuffer","itemsLoadedMap","deserializeFeatureFlags","itemsLoadedMapSize","Math","floor","itemsLeftToMint","uniformFixedSizeArray","itemsMinted","isMinted","index","isSequential","includes","items","forEach","loaded","namePosition","uriPosition","name","toString","uri","prefixName","replaceCandyMachineItemPattern","prefixUri","push","minted","removeEmptyChars","value","replace"],"mappings":"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"}