{"version":3,"file":"Purchase.cjs","sources":["../../../../../src/plugins/auctionHouseModule/models/Purchase.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { PurchaseReceiptAccount } from '../accounts';\nimport { NftWithToken, SftWithToken } from '../../nftModule';\nimport { AuctionHouse } from './AuctionHouse';\nimport {\n  amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  SolAmount,\n  SplTokenAmount,\n  toBigNumber,\n  toDateTime,\n} from '@/types';\nimport { assert, Option } from '@/utils';\n\nexport type Purchase = Readonly<{\n  /** A model identifier to distinguish models in the SDK. */\n  model: 'purchase';\n\n  /**\n   * Whether or not the asset was loaded.\n   * When this is `false`, it means the Purchase includes asset model.\n   */\n  lazy: false;\n\n  /** A model of the Auction House related to this purchase. */\n  auctionHouse: AuctionHouse;\n\n  /** The Nft or Sft with the associated token account. */\n  asset: SftWithToken | NftWithToken;\n\n  /** The address of the buyer's wallet. */\n  buyerAddress: PublicKey;\n\n  /** The address of the seller's wallet. */\n  sellerAddress: PublicKey;\n\n  /**\n   * The address of the bookkeeper account.\n   * It is responsible for signing a Purchase Receipt Print.\n   */\n  bookkeeperAddress: Option<PublicKey>;\n\n  /**\n   * The address of the purchase receipt account.\n   * This is the account that stores information about this purchase.\n   * The Purchase model is built on top of this account.\n   */\n  receiptAddress: Option<PublicKey>;\n\n  /** The number of tokens spent on this purchase. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens bought in case it's a sale of a Fungible Token. */\n  tokens: SplTokenAmount;\n\n  /** The date of creation. */\n  createdAt: DateTime;\n}>;\n\nexport const isPurchase = (value: any): value is Purchase =>\n  typeof value === 'object' && value.model === 'purchase' && !value.lazy;\n\nexport function assertPurchase(value: any): asserts value is Purchase {\n  assert(isPurchase(value), `Expected Purchase type`);\n}\n\nexport const toPurchase = (\n  account: PurchaseReceiptAccount,\n  auctionHouseModel: AuctionHouse,\n  asset: NftWithToken | SftWithToken\n): Purchase => {\n  const lazyPurchase = toLazyPurchase(account, auctionHouseModel);\n\n  return {\n    ...lazyPurchase,\n    model: 'purchase',\n    lazy: false,\n    asset,\n    tokens: amount(lazyPurchase.tokens, asset.mint.currency),\n  };\n};\n\nexport type LazyPurchase = Omit<Purchase, 'lazy' | 'asset' | 'tokens'> &\n  Readonly<{\n    lazy: true;\n    metadataAddress: PublicKey;\n    tokens: BigNumber;\n  }>;\n\nexport const isLazyPurchase = (value: any): value is LazyPurchase =>\n  typeof value === 'object' && value.model === 'purchase' && value.lazy;\n\nexport function assertLazyPurchase(value: any): asserts value is LazyPurchase {\n  assert(isLazyPurchase(value), `Expected LazyPurchase type`);\n}\nexport const toLazyPurchase = (\n  account: PurchaseReceiptAccount,\n  auctionHouseModel: AuctionHouse\n): LazyPurchase => {\n  return {\n    model: 'purchase',\n    lazy: true,\n    auctionHouse: auctionHouseModel,\n    buyerAddress: account.data.buyer,\n    sellerAddress: account.data.seller,\n    metadataAddress: account.data.metadata,\n    bookkeeperAddress: account.data.bookkeeper,\n    receiptAddress: account.publicKey,\n    price: auctionHouseModel.isNative\n      ? lamports(account.data.price)\n      : amount(account.data.price, auctionHouseModel.treasuryMint.currency),\n    tokens: toBigNumber(account.data.tokenSize),\n    createdAt: toDateTime(account.data.createdAt),\n  };\n};\n"],"names":["isPurchase","value","model","lazy","assertPurchase","assert","toPurchase","account","auctionHouseModel","asset","lazyPurchase","toLazyPurchase","tokens","amount","mint","currency","isLazyPurchase","assertLazyPurchase","auctionHouse","buyerAddress","data","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","receiptAddress","publicKey","price","isNative","lamports","treasuryMint","toBigNumber","tokenSize","createdAt","toDateTime"],"mappings":";;;;;;;;;MA6DaA,UAAU,GAAIC,KAAU,IACnC,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,KAAK,UAAU,IAAI,CAACD,KAAK,CAACE,KAAI;AAEjE,SAASC,cAAc,CAACH,KAAU,EAA6B;AACpEI,EAAAA,iBAAM,CAACL,UAAU,CAACC,KAAK,CAAC,EAAG,wBAAuB,CAAC,CAAA;AACrD,CAAA;AAEO,MAAMK,UAAU,GAAG,CACxBC,OAA+B,EAC/BC,iBAA+B,EAC/BC,KAAkC,KACrB;AACb,EAAA,MAAMC,YAAY,GAAGC,cAAc,CAACJ,OAAO,EAAEC,iBAAiB,CAAC,CAAA;EAE/D,OAAO;AACL,IAAA,GAAGE,YAAY;AACfR,IAAAA,KAAK,EAAE,UAAU;AACjBC,IAAAA,IAAI,EAAE,KAAK;IACXM,KAAK;IACLG,MAAM,EAAEC,aAAM,CAACH,YAAY,CAACE,MAAM,EAAEH,KAAK,CAACK,IAAI,CAACC,QAAQ,CAAA;GACxD,CAAA;AACH,EAAC;MASYC,cAAc,GAAIf,KAAU,IACvC,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,KAAK,UAAU,IAAID,KAAK,CAACE,KAAI;AAEhE,SAASc,kBAAkB,CAAChB,KAAU,EAAiC;AAC5EI,EAAAA,iBAAM,CAACW,cAAc,CAACf,KAAK,CAAC,EAAG,4BAA2B,CAAC,CAAA;AAC7D,CAAA;MACaU,cAAc,GAAG,CAC5BJ,OAA+B,EAC/BC,iBAA+B,KACd;EACjB,OAAO;AACLN,IAAAA,KAAK,EAAE,UAAU;AACjBC,IAAAA,IAAI,EAAE,IAAI;AACVe,IAAAA,YAAY,EAAEV,iBAAiB;AAC/BW,IAAAA,YAAY,EAAEZ,OAAO,CAACa,IAAI,CAACC,KAAK;AAChCC,IAAAA,aAAa,EAAEf,OAAO,CAACa,IAAI,CAACG,MAAM;AAClCC,IAAAA,eAAe,EAAEjB,OAAO,CAACa,IAAI,CAACK,QAAQ;AACtCC,IAAAA,iBAAiB,EAAEnB,OAAO,CAACa,IAAI,CAACO,UAAU;IAC1CC,cAAc,EAAErB,OAAO,CAACsB,SAAS;IACjCC,KAAK,EAAEtB,iBAAiB,CAACuB,QAAQ,GAC7BC,eAAQ,CAACzB,OAAO,CAACa,IAAI,CAACU,KAAK,CAAC,GAC5BjB,aAAM,CAACN,OAAO,CAACa,IAAI,CAACU,KAAK,EAAEtB,iBAAiB,CAACyB,YAAY,CAAClB,QAAQ,CAAC;IACvEH,MAAM,EAAEsB,qBAAW,CAAC3B,OAAO,CAACa,IAAI,CAACe,SAAS,CAAC;AAC3CC,IAAAA,SAAS,EAAEC,mBAAU,CAAC9B,OAAO,CAACa,IAAI,CAACgB,SAAS,CAAA;GAC7C,CAAA;AACH;;;;;;;;;"}