{"version":3,"file":"CandyMachinePdasClient.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachinePdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { Pda, Program, PublicKey } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the Candy Machine module.\n *\n * @see {@link CandyMachineClient}\n * @group Module Pdas\n */\nexport class CandyMachinePdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Authority PDA for the given Candy Machine. */\n  authority({\n    candyMachine,\n    programs,\n  }: {\n    /** The Candy Machine address */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyMachine(programs);\n    return Pda.find(program.address, [\n      Buffer.from('candy_machine', 'utf8'),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Candy Guard PDA for the given base address it derives from. */\n  candyGuard({\n    base,\n    programs,\n  }: {\n    /** The base address which the Candy Guard PDA derives from. */\n    base: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('candy_guard', 'utf8'),\n      base.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Mint Limit Counter PDA that keeps track of how many\n   * NFTs where minted by a given user on a given Candy Machine.\n   */\n  mintLimitCounter({\n    id,\n    user,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** A unique identifier in the context of a Candy Machine/Candy Guard combo. */\n    id: number;\n    /** The address of the wallet trying to mint. */\n    user: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('mint_limit', 'utf8'),\n      Buffer.from([id]),\n      user.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Allow List Proof PDA that keeps track of whether a user\n   * has provided the correct Merkle Proof for the given Merkle Root.\n   */\n  merkleProof({\n    merkleRoot,\n    user,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** The Merkle Root used when verifying the user. */\n    merkleRoot: Uint8Array;\n    /** The address of the wallet trying to mint. */\n    user: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('allow_list', 'utf8'),\n      merkleRoot,\n      user.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Freeze PDA used as an escrow account by\n   * the freezeSolPayment and freezeTokenPayment guards.\n   */\n  freezeEscrow({\n    destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** The wallet that will eventually receive the funds. */\n    destination: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('freeze_escrow', 'utf8'),\n      destination.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n}\n"],"names":["CandyMachinePdasClient","constructor","metaplex","authority","candyMachine","programs","program","getCandyMachine","Pda","find","address","Buffer","from","toBuffer","candyGuard","base","getCandyGuard","mintLimitCounter","id","user","merkleProof","merkleRoot","freezeEscrow","destination"],"mappings":"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"}