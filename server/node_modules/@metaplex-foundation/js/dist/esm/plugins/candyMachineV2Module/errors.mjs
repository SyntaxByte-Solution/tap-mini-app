import { defineProperty as _defineProperty } from '../../_virtual/_rollupPluginBabelHelpers.mjs';
import { EndSettingType } from '@metaplex-foundation/mpl-candy-machine';
import { formatDateTime } from '../../types/DateTime.mjs';
import { MetaplexError } from '../../errors/MetaplexError.mjs';

/** @group Errors */
class CandyMachineV2Error extends MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Candy Machine V2', cause);
    _defineProperty(this, "name", 'CandyMachineV2Error');
  }
}

/** @group Errors */
class CandyMachineV2IsFullError extends CandyMachineV2Error {
  constructor(assetIndex, itemsAvailable) {
    const message = `Trying to add asset number ${assetIndex.addn(1)}, but ` + `candy machine only can hold ${itemsAvailable} assets. ` + 'Limit number of assets you are adding or create a new Candy Machine that can hold more.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineV2IsFullError');
  }
}

/** @group Errors */
class CandyMachineV2IsEmptyError extends CandyMachineV2Error {
  constructor(itemsAvailable) {
    const message = `You're trying to mint from an empty candy machine. ` + `All ${itemsAvailable} items have been minted. ` + 'You can no longer mint from this Candy Machine.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineV2IsEmptyError');
  }
}

/** @group Errors */
class CandyMachineV2CannotAddAmountError extends CandyMachineV2Error {
  constructor(index, amount, itemsAvailable) {
    const message = `Trying to add ${amount} assets to candy machine that already ` + `has ${index} assets and can only hold ${itemsAvailable} assets.` + 'Limit number of assets you are adding or create a new Candy Machine that can hold more.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineV2CannotAddAmountError');
  }
}

/** @group Errors */
class CandyMachineV2AddItemConstraintsViolatedError extends CandyMachineV2Error {
  constructor(index, item, cause) {
    const message = `Trying to add an asset with name "${item.name}" and uri: "${item.uri}" ` + `to candy machine at index ${index} that violates constraints. ` + `Fix the name or URI of this asset and try again.`;
    super(message, cause);
    _defineProperty(this, "name", 'CandyMachineV2AddItemConstraintsViolatedError');
  }
}

/** @group Errors */
class CandyMachineV2NotLiveError extends CandyMachineV2Error {
  constructor(goLiveDate) {
    const message = `You're trying to mint from a Candy Machine which is not live yet. ` + (goLiveDate ? `It will go live on ${formatDateTime(goLiveDate)}.` : `Its live date has not been set yet.`) + 'You need to wait until the Candy Machine is live to mint from it. ' + 'If this is your Candy Machine, use "metaplex.candyMachinesV2().update(...)" to set the live date. ' + 'Note that the authority of the Candy Machine can mint regardless of the live date.';
    super(message);
    _defineProperty(this, "name", 'CandyMachineV2NotLiveError');
  }
}

/** @group Errors */
class CandyMachineV2EndedError extends CandyMachineV2Error {
  constructor(endSetting) {
    const endSettingType = endSetting.endSettingType === EndSettingType.Amount ? 'Amount' : 'Date';
    const endSettingExplanation = endSetting.endSettingType === EndSettingType.Amount ? `All ${endSetting.number} items have been minted.` : `It ended on ${formatDateTime(endSetting.date)}.`;
    const message = `The end condition [${endSettingType}] of this Candy Machine has been reached. ` + endSettingExplanation;
    super(message);
    _defineProperty(this, "name", 'CandyMachineV2EndedError');
  }
}

/** @group Errors */
class CandyMachineV2BotTaxError extends CandyMachineV2Error {
  constructor(explorerLink, cause) {
    const message = `The NFT couldn't be fetched after being minted. ` + `This is most likely due to a bot tax that occured during minting. ` + `When someone tries to mint an NFT from a Candy Machine which cannot be minted from, ` + `the program will succeed and charge a small tax to fight against bots. ` + `Ensure you can mint from the Candy Machine. ` + `You may want to check the transaction logs for more details: [${explorerLink}].`;
    super(message, cause);
    _defineProperty(this, "name", 'CandyMachineV2BotTaxError');
  }
}

export { CandyMachineV2AddItemConstraintsViolatedError, CandyMachineV2BotTaxError, CandyMachineV2CannotAddAmountError, CandyMachineV2EndedError, CandyMachineV2Error, CandyMachineV2IsEmptyError, CandyMachineV2IsFullError, CandyMachineV2NotLiveError };
//# sourceMappingURL=errors.mjs.map
