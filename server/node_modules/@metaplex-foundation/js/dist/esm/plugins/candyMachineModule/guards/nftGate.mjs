import { nftGateBeet } from '@metaplex-foundation/mpl-candy-guard';
import { GuardMintSettingsMissingError } from '../errors.mjs';
import { createSerializerFromBeet } from '../../../types/Serializer.mjs';

/**
 * The nftGate guard restricts minting to holders
 * of a specified NFT collection.
 *
 * This means the mint address of an NFT from this
 * collection must be passed when minting.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 *
 * @see {@link NftGateGuardMintSettings} for more
 * information on the mint settings of this guard.
 */

/** @internal */
const nftGateGuardManifest = {
  name: 'nftGate',
  settingsBytes: 32,
  settingsSerializer: createSerializerFromBeet(nftGateBeet),
  mintSettingsParser: ({
    metaplex,
    mintSettings,
    payer,
    programs
  }) => {
    if (!mintSettings) {
      throw new GuardMintSettingsMissingError('nftGate');
    }
    const tokenAccount = mintSettings.tokenAccount ?? metaplex.tokens().pdas().associatedTokenAccount({
      mint: mintSettings.mint,
      owner: payer.publicKey,
      programs
    });
    const tokenMetadata = metaplex.nfts().pdas().metadata({
      mint: mintSettings.mint,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: false
      }, {
        isSigner: false,
        address: tokenMetadata,
        isWritable: false
      }]
    };
  }
};

export { nftGateGuardManifest };
//# sourceMappingURL=nftGate.mjs.map
