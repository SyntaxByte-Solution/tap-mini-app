import { PublicKey } from '@solana/web3.js';
import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityHolder, TokenMetadataAuthorityTokenDelegate, TokenMetadataAuthorizationDetails } from '../Authorization';
import { Sft } from '../models';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler, Signer, SplTokenAmount, TransferNftCompressionParam } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "TransferNftOperation";
/**
 * Transfers an NFT or SFT from one account to another.
 *
 * ```ts
 * await metaplex.nfts().transfer({
 *   nftOrSft,
 *   toOwner,
 *   amount: token(5),
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const transferNftOperation: import("../../../types").OperationConstructor<TransferNftOperation, "TransferNftOperation", TransferNftInput, TransferNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type TransferNftOperation = Operation<typeof Key, TransferNftInput, TransferNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type TransferNftInput = {
    /**
     * The NFT or SFT to transfer.
     * We only need its address and token standard.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to transfer the asset.
     *
     * Note that Metadata authorities are
     * not supported for this instruction.
     *
     * If a `Signer` is provided directly,
     * it will be used as an Holder authority.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority?: Signer | TokenMetadataAuthorityTokenDelegate | TokenMetadataAuthorityHolder;
    /**
     * The authorization rules and data to use for the transfer.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    /**
     * The wallet to get the tokens from.
     *
     * @defaultValue The public key of the provided authority.
     */
    fromOwner?: PublicKey;
    /**
     * The token account to be debited.
     *
     * @defaultValue Defaults to the associated token account of `fromOwner`.
     */
    fromToken?: PublicKey;
    /**
     * The wallet to send the tokens to.
     */
    toOwner: PublicKey;
    /**
     * The token account to be credited.
     *
     * @defaultValue Defaults to the associated token account of `toOwner`.
     */
    toToken?: PublicKey;
    /**
     * The amount of tokens to transfer.
     *
     * @defaultValue `token(1)`
     */
    amount?: SplTokenAmount;
    /**
     * The compression data needed for transfer.
     */
    compression?: TransferNftCompressionParam;
};
/**
 * @group Operations
 * @category Outputs
 */
export type TransferNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const transferNftOperationHandler: OperationHandler<TransferNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type TransferNftBuilderParams = Omit<TransferNftInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Transfers an NFT or SFT from one account to another.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .transfer({
 *     nftOrSft,
 *     toOwner,
 *     amount: token(5),
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const transferNftBuilder: (metaplex: Metaplex, params: TransferNftBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
