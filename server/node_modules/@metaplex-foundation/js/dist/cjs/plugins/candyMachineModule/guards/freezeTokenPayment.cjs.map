{"version":3,"file":"freezeTokenPayment.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/freezeTokenPayment.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  FreezeInstruction,\n  FreezeTokenPayment,\n  freezeTokenPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport {\n  MintOwnerMustBeMintPayerError,\n  UnrecognizePathForRouteInstructionError,\n} from '../errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsRemainingAccount,\n  RouteSettingsParserInput,\n} from './core';\nimport { assert } from '@/utils';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  Signer,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The freezeTokenPayment guard allows minting frozen NFTs by charging\n * the payer a specific amount of tokens from a certain mint acount.\n * Frozen NFTs cannot be transferred or listed on any marketplaces until thawed.\n *\n * The funds are transferred to a freeze escrow until all NFTs are thaw,\n * at which point, they can be transferred (unlocked) to the configured\n * destination account.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link FreezeTokenPaymentGuardRouteSettings} to learn more about\n * the instructions that can be executed against this guard.\n */\nexport type FreezeTokenPaymentGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n\n  /** The associated token address to send the tokens to. */\n  destinationAta: PublicKey;\n};\n\n/**\n * The settings for the freezeTokenPayment guard that should be provided\n * when accessing the guard's special \"route\" instruction.\n *\n * ## Initialize\n * The `initialize` path creates the freeze escrow account that will\n * hold the funds until all NFTs are thawed. It must be called before\n * any NFTs can be minted.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeTokenPayment',\n *   settings: {\n *     path: 'initialize',\n *     period: 15 * 24 * 60 * 60, // 15 days.\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * ## Thaw\n * The `thaw` path unfreezes one NFT if one of the following conditions are met:\n * - All NFTs have been minted.\n * - The configured period has elapsed (max 30 days).\n * - The Candy Machine account was deleted.\n *\n * Anyone can call this instruction. Since the funds are not transferrable\n * until all NFTs are thawed, it creates an incentive for the treasury to\n * thaw all NFTs as soon as possible.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeTokenPayment',\n *   settings: {\n *     path: 'thaw',\n *     nftMint: nftToThaw.address,\n *     nftOwner: nftToThaw.token.ownerAddress,\n *   },\n * });\n * ```\n *\n * ## Unlock Funds\n * The `unlockFunds` path transfers all of the escrow funds to the\n * configured destination token address once all NFTs have been thawed.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeTokenPayment',\n *   settings: {\n *     path: 'unlockFunds',\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * @see {@link FreezeTokenPaymentGuardSettings} for more\n * information on the freezeTokenPayment guard itself.\n */\nexport type FreezeTokenPaymentGuardRouteSettings =\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'initialize';\n\n      /** The freeze period in seconds (maximum 30 days). */\n      period: number;\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'thaw';\n\n      /** The mint address of the NFT to thaw. */\n      nftMint: PublicKey;\n\n      /** The owner address of the NFT to thaw. */\n      nftOwner: PublicKey;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'unlockFunds';\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    };\n\n/** @internal */\nexport const freezeTokenPaymentGuardManifest: CandyGuardManifest<\n  FreezeTokenPaymentGuardSettings,\n  {},\n  FreezeTokenPaymentGuardRouteSettings\n> = {\n  name: 'freezeTokenPayment',\n  settingsBytes: 72,\n  settingsSerializer: mapSerializer<\n    FreezeTokenPayment,\n    FreezeTokenPaymentGuardSettings\n  >(\n    createSerializerFromBeet(freezeTokenPaymentBeet),\n    (settings) => ({\n      mint: settings.mint,\n      amount: token(settings.amount),\n      destinationAta: settings.destinationAta,\n    }),\n    (settings) => ({\n      mint: settings.mint,\n      amount: settings.amount.basisPoints,\n      destinationAta: settings.destinationAta,\n    })\n  ),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    owner,\n    payer,\n    mint: nftMint,\n    candyMachine,\n    candyGuard,\n    programs,\n  }) => {\n    if (!owner.equals(payer.publicKey)) {\n      throw new MintOwnerMustBeMintPayerError('freezeTokenPayment');\n    }\n\n    const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n      destination: settings.destinationAta,\n      candyMachine,\n      candyGuard,\n      programs,\n    });\n    const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: nftMint.publicKey,\n      owner: payer.publicKey,\n    });\n    const tokenAddress = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: settings.mint,\n      owner: payer.publicKey,\n      programs,\n    });\n    const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: settings.mint,\n      owner: freezeEscrow,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: freezeEscrow,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: nftAta,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: tokenAddress,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: freezeAta,\n          isWritable: true,\n        },\n      ],\n    };\n  },\n  routeSettingsParser: (input) => {\n    switch (input.routeSettings.path) {\n      case 'initialize':\n        return initializeRouteInstruction(input);\n      case 'thaw':\n        return thawRouteInstruction(input);\n      case 'unlockFunds':\n        return unlockFundsRouteInstruction(input);\n      default:\n        throw new UnrecognizePathForRouteInstructionError(\n          'freezeTokenPayment',\n          // @ts-ignore\n          input.routeSettings.path\n        );\n    }\n  },\n};\n\nfunction initializeRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeTokenPaymentGuardSettings,\n  FreezeTokenPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'initialize');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destinationAta,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: settings.mint,\n    owner: freezeEscrow,\n    programs,\n  });\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const associatedTokenProgram = metaplex\n    .programs()\n    .getAssociatedToken(programs);\n\n  const args = Buffer.alloc(9);\n  beet.u8.write(args, 0, FreezeInstruction.Initialize);\n  beet.u64.write(args, 1, routeSettings.period);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: freezeAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: settings.mint,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: associatedTokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: settings.destinationAta,\n        isWritable: true,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction thawRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeTokenPaymentGuardSettings,\n  FreezeTokenPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'thaw');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destinationAta,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: routeSettings.nftMint,\n    owner: routeSettings.nftOwner,\n    programs,\n  });\n  const nftEdition = metaplex.nfts().pdas().masterEdition({\n    mint: routeSettings.nftMint,\n    programs,\n  });\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.Thaw);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftMint,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftOwner,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: nftAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: nftEdition,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenMetadataProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction unlockFundsRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeTokenPaymentGuardSettings,\n  FreezeTokenPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'unlockFunds');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destinationAta,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const freezeAta = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: settings.mint,\n    owner: freezeEscrow,\n    programs,\n  });\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.UnlockFunds);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: freezeAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: settings.destinationAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: tokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n"],"names":["freezeTokenPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","freezeTokenPaymentBeet","settings","mint","amount","token","destinationAta","basisPoints","mintSettingsParser","metaplex","owner","payer","nftMint","candyMachine","candyGuard","programs","equals","publicKey","MintOwnerMustBeMintPayerError","freezeEscrow","candyMachines","pdas","destination","nftAta","tokens","associatedTokenAccount","tokenAddress","freezeAta","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable","routeSettingsParser","input","routeSettings","path","initializeRouteInstruction","thawRouteInstruction","unlockFundsRouteInstruction","UnrecognizePathForRouteInstructionError","assert","systemProgram","getSystem","tokenProgram","getToken","associatedTokenProgram","getAssociatedToken","args","alloc","beet","u8","write","FreezeInstruction","Initialize","u64","period","candyGuardAuthority","nftOwner","nftEdition","nfts","masterEdition","tokenMetadataProgram","getTokenMetadata","Thaw","UnlockFunds"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsGA;AACO,MAAMA,+BAIZ,GAAG;AACFC,EAAAA,IAAI,EAAE,oBAAoB;AAC1BC,EAAAA,aAAa,EAAE,EAAE;EACjBC,kBAAkB,EAAEC,wBAAa,CAI/BC,mCAAwB,CAACC,oCAAsB,CAAC,EAC/CC,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBC,IAAAA,MAAM,EAAEC,YAAK,CAACH,QAAQ,CAACE,MAAM,CAAC;IAC9BE,cAAc,EAAEJ,QAAQ,CAACI,cAAAA;GAC1B,CAAC,EACDJ,QAAQ,KAAM;IACbC,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBC,IAAAA,MAAM,EAAEF,QAAQ,CAACE,MAAM,CAACG,WAAW;IACnCD,cAAc,EAAEJ,QAAQ,CAACI,cAAAA;AAC3B,GAAC,CAAC,CACH;AACDE,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QAAQ;IACRP,QAAQ;IACRQ,KAAK;IACLC,KAAK;AACLR,IAAAA,IAAI,EAAES,OAAO;IACbC,YAAY;IACZC,UAAU;AACVC,IAAAA,QAAAA;AACF,GAAC,KAAK;IACJ,IAAI,CAACL,KAAK,CAACM,MAAM,CAACL,KAAK,CAACM,SAAS,CAAC,EAAE;AAClC,MAAA,MAAM,IAAIC,oCAA6B,CAAC,oBAAoB,CAAC,CAAA;AAC/D,KAAA;IAEA,MAAMC,YAAY,GAAGV,QAAQ,CAACW,aAAa,EAAE,CAACC,IAAI,EAAE,CAACF,YAAY,CAAC;MAChEG,WAAW,EAAEpB,QAAQ,CAACI,cAAc;MACpCO,YAAY;MACZC,UAAU;AACVC,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IACF,MAAMQ,MAAM,GAAGd,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;MAC7DtB,IAAI,EAAES,OAAO,CAACK,SAAS;MACvBP,KAAK,EAAEC,KAAK,CAACM,SAAAA;AACf,KAAC,CAAC,CAAA;IACF,MAAMS,YAAY,GAAGjB,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;MACnEtB,IAAI,EAAED,QAAQ,CAACC,IAAI;MACnBO,KAAK,EAAEC,KAAK,CAACM,SAAS;AACtBF,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IACF,MAAMY,SAAS,GAAGlB,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;MAChEtB,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBO,MAAAA,KAAK,EAAES,YAAY;AACnBJ,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLa,MAAAA,SAAS,EAAEC,aAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEd,YAAY;AACrBe,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEV,MAAM;AACfW,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEP,YAAY;AACrBQ,QAAAA,UAAU,EAAE,IAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEN,SAAS;AAClBO,QAAAA,UAAU,EAAE,IAAA;OACb,CAAA;KAEJ,CAAA;GACF;EACDC,mBAAmB,EAAGC,KAAK,IAAK;AAC9B,IAAA,QAAQA,KAAK,CAACC,aAAa,CAACC,IAAI;AAC9B,MAAA,KAAK,YAAY;QACf,OAAOC,0BAA0B,CAACH,KAAK,CAAC,CAAA;AAC1C,MAAA,KAAK,MAAM;QACT,OAAOI,oBAAoB,CAACJ,KAAK,CAAC,CAAA;AACpC,MAAA,KAAK,aAAa;QAChB,OAAOK,2BAA2B,CAACL,KAAK,CAAC,CAAA;AAC3C,MAAA;QACE,MAAM,IAAIM,8CAAuC,CAC/C,oBAAoB;AACpB;AACAN,QAAAA,KAAK,CAACC,aAAa,CAACC,IAAI,CACzB,CAAA;AAAC,KAAA;AAER,GAAA;AACF,EAAC;AAED,SAASC,0BAA0B,CAAC;EAClC9B,QAAQ;EACRP,QAAQ;EACRmC,aAAa;EACbxB,YAAY;EACZC,UAAU;AACVC,EAAAA,QAAAA;AAIF,CAAC,EAAE;AACD4B,EAAAA,iBAAM,CAACN,aAAa,CAACC,IAAI,KAAK,YAAY,CAAC,CAAA;EAC3C,MAAMnB,YAAY,GAAGV,QAAQ,CAACW,aAAa,EAAE,CAACC,IAAI,EAAE,CAACF,YAAY,CAAC;IAChEG,WAAW,EAAEpB,QAAQ,CAACI,cAAc;IACpCO,YAAY;IACZC,UAAU;AACVC,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMY,SAAS,GAAGlB,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;IAChEtB,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBO,IAAAA,KAAK,EAAES,YAAY;AACnBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEF,MAAM6B,aAAa,GAAGnC,QAAQ,CAACM,QAAQ,EAAE,CAAC8B,SAAS,CAAC9B,QAAQ,CAAC,CAAA;EAC7D,MAAM+B,YAAY,GAAGrC,QAAQ,CAACM,QAAQ,EAAE,CAACgC,QAAQ,CAAChC,QAAQ,CAAC,CAAA;EAC3D,MAAMiC,sBAAsB,GAAGvC,QAAQ,CACpCM,QAAQ,EAAE,CACVkC,kBAAkB,CAAClC,QAAQ,CAAC,CAAA;AAE/B,EAAA,MAAMmC,IAAI,GAAGrB,aAAM,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAA;AAC5BC,EAAAA,eAAI,CAACC,EAAE,CAACC,KAAK,CAACJ,IAAI,EAAE,CAAC,EAAEK,+BAAiB,CAACC,UAAU,CAAC,CAAA;AACpDJ,EAAAA,eAAI,CAACK,GAAG,CAACH,KAAK,CAACJ,IAAI,EAAE,CAAC,EAAEb,aAAa,CAACqB,MAAM,CAAC,CAAA;EAE7C,OAAO;AACL9B,IAAAA,SAAS,EAAEsB,IAAI;AACfnB,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEd,YAAY;AACrBe,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAEI,aAAa,CAACsB,mBAAmB;AAC1CzB,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEW,aAAa,CAACX,OAAO;AAC9BC,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEN,SAAS;AAClBO,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE/B,QAAQ,CAACC,IAAI;AACtB+B,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEa,YAAY,CAACb,OAAO;AAC7BC,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEe,sBAAsB,CAACf,OAAO;AACvCC,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE/B,QAAQ,CAACI,cAAc;AAChC4B,MAAAA,UAAU,EAAE,IAAA;KACb,CAAA;GAEJ,CAAA;AACH,CAAA;AAEA,SAASM,oBAAoB,CAAC;EAC5B/B,QAAQ;EACRP,QAAQ;EACRmC,aAAa;EACbxB,YAAY;EACZC,UAAU;AACVC,EAAAA,QAAAA;AAIF,CAAC,EAAE;AACD4B,EAAAA,iBAAM,CAACN,aAAa,CAACC,IAAI,KAAK,MAAM,CAAC,CAAA;EACrC,MAAMnB,YAAY,GAAGV,QAAQ,CAACW,aAAa,EAAE,CAACC,IAAI,EAAE,CAACF,YAAY,CAAC;IAChEG,WAAW,EAAEpB,QAAQ,CAACI,cAAc;IACpCO,YAAY;IACZC,UAAU;AACVC,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMQ,MAAM,GAAGd,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;IAC7DtB,IAAI,EAAEkC,aAAa,CAACzB,OAAO;IAC3BF,KAAK,EAAE2B,aAAa,CAACuB,QAAQ;AAC7B7C,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAM8C,UAAU,GAAGpD,QAAQ,CAACqD,IAAI,EAAE,CAACzC,IAAI,EAAE,CAAC0C,aAAa,CAAC;IACtD5D,IAAI,EAAEkC,aAAa,CAACzB,OAAO;AAC3BG,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAM+B,YAAY,GAAGrC,QAAQ,CAACM,QAAQ,EAAE,CAACgC,QAAQ,CAAChC,QAAQ,CAAC,CAAA;EAC3D,MAAMiD,oBAAoB,GAAGvD,QAAQ,CAACM,QAAQ,EAAE,CAACkD,gBAAgB,CAAClD,QAAQ,CAAC,CAAA;AAE3E,EAAA,MAAMmC,IAAI,GAAGrB,aAAM,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAA;AAC5BC,EAAAA,eAAI,CAACC,EAAE,CAACC,KAAK,CAACJ,IAAI,EAAE,CAAC,EAAEK,+BAAiB,CAACW,IAAI,CAAC,CAAA;EAE9C,OAAO;AACLtC,IAAAA,SAAS,EAAEsB,IAAI;AACfnB,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEd,YAAY;AACrBe,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEI,aAAa,CAACzB,OAAO;AAC9BsB,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEI,aAAa,CAACuB,QAAQ;AAC/B1B,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEV,MAAM;AACfW,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAE4B,UAAU;AACnB3B,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEa,YAAY,CAACb,OAAO;AAC7BC,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE+B,oBAAoB,CAAC/B,OAAO;AACrCC,MAAAA,UAAU,EAAE,KAAA;KACb,CAAA;GAEJ,CAAA;AACH,CAAA;AAEA,SAASO,2BAA2B,CAAC;EACnChC,QAAQ;EACRP,QAAQ;EACRmC,aAAa;EACbxB,YAAY;EACZC,UAAU;AACVC,EAAAA,QAAAA;AAIF,CAAC,EAAE;AACD4B,EAAAA,iBAAM,CAACN,aAAa,CAACC,IAAI,KAAK,aAAa,CAAC,CAAA;EAC5C,MAAMnB,YAAY,GAAGV,QAAQ,CAACW,aAAa,EAAE,CAACC,IAAI,EAAE,CAACF,YAAY,CAAC;IAChEG,WAAW,EAAEpB,QAAQ,CAACI,cAAc;IACpCO,YAAY;IACZC,UAAU;AACVC,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMY,SAAS,GAAGlB,QAAQ,CAACe,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;IAChEtB,IAAI,EAAED,QAAQ,CAACC,IAAI;AACnBO,IAAAA,KAAK,EAAES,YAAY;AACnBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEF,MAAM6B,aAAa,GAAGnC,QAAQ,CAACM,QAAQ,EAAE,CAAC8B,SAAS,CAAC9B,QAAQ,CAAC,CAAA;EAC7D,MAAM+B,YAAY,GAAGrC,QAAQ,CAACM,QAAQ,EAAE,CAACgC,QAAQ,CAAChC,QAAQ,CAAC,CAAA;AAE3D,EAAA,MAAMmC,IAAI,GAAGrB,aAAM,CAACsB,KAAK,CAAC,CAAC,CAAC,CAAA;AAC5BC,EAAAA,eAAI,CAACC,EAAE,CAACC,KAAK,CAACJ,IAAI,EAAE,CAAC,EAAEK,+BAAiB,CAACY,WAAW,CAAC,CAAA;EAErD,OAAO;AACLvC,IAAAA,SAAS,EAAEsB,IAAI;AACfnB,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEd,YAAY;AACrBe,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,IAAI;MACdC,OAAO,EAAEI,aAAa,CAACsB,mBAAmB;AAC1CzB,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;AACfC,MAAAA,OAAO,EAAEN,SAAS;AAClBO,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAE/B,QAAQ,CAACI,cAAc;AAChC4B,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEa,YAAY,CAACb,OAAO;AAC7BC,MAAAA,UAAU,EAAE,KAAA;AACd,KAAC,EACD;AACEF,MAAAA,QAAQ,EAAE,KAAK;MACfC,OAAO,EAAEW,aAAa,CAACX,OAAO;AAC9BC,MAAAA,UAAU,EAAE,KAAA;KACb,CAAA;GAEJ,CAAA;AACH;;;;"}