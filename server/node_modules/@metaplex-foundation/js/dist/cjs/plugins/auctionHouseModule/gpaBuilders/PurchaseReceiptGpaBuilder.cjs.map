{"version":3,"file":"PurchaseReceiptGpaBuilder.cjs","sources":["../../../../../src/plugins/auctionHouseModule/gpaBuilders/PurchaseReceiptGpaBuilder.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { GpaBuilder } from '@/utils';\n\ntype AccountDiscriminator = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n// TODO: copied from auction house SDK\n// SDK should either provide a GPA builder or expose this discriminator\nconst purchaseReceiptDiscriminator: AccountDiscriminator = [\n  79, 127, 222, 137, 154, 131, 150, 134,\n];\n\nconst PUBLIC_KEY_LENGTH = PublicKey.default.toBytes().byteLength;\n\nconst BOOKKEEPER = purchaseReceiptDiscriminator.length;\nconst BUYER = BOOKKEEPER + PUBLIC_KEY_LENGTH;\nconst SELLER = BUYER + PUBLIC_KEY_LENGTH;\nconst AUCTION_HOUSE = SELLER + PUBLIC_KEY_LENGTH;\nconst METADATA = AUCTION_HOUSE + PUBLIC_KEY_LENGTH;\n\nexport class PurchaseReceiptGpaBuilder extends GpaBuilder {\n  whereDiscriminator(discrimator: AccountDiscriminator) {\n    return this.where(0, Buffer.from(discrimator));\n  }\n\n  purchaseReceiptAccounts() {\n    return this.whereDiscriminator(purchaseReceiptDiscriminator);\n  }\n\n  whereAuctionHouse(auctionHouseAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(\n      AUCTION_HOUSE,\n      auctionHouseAddress\n    );\n  }\n\n  whereBuyer(buyerAddress: PublicKey) {\n    return this.where(BUYER, buyerAddress);\n  }\n\n  whereSeller(sellerAddress: PublicKey) {\n    return this.where(SELLER, sellerAddress);\n  }\n\n  whereMetadata(metadataAddress: PublicKey) {\n    return this.where(METADATA, metadataAddress);\n  }\n}\n"],"names":["purchaseReceiptDiscriminator","PUBLIC_KEY_LENGTH","PublicKey","default","toBytes","byteLength","BOOKKEEPER","length","BUYER","SELLER","AUCTION_HOUSE","METADATA","PurchaseReceiptGpaBuilder","GpaBuilder","whereDiscriminator","discrimator","where","Buffer","from","purchaseReceiptAccounts","whereAuctionHouse","auctionHouseAddress","whereBuyer","buyerAddress","whereSeller","sellerAddress","whereMetadata","metadataAddress"],"mappings":";;;;;;;AAaA;AACA;AACA,MAAMA,4BAAkD,GAAG,CACzD,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CACtC,CAAA;AAED,MAAMC,iBAAiB,GAAGC,iBAAS,CAACC,OAAO,CAACC,OAAO,EAAE,CAACC,UAAU,CAAA;AAEhE,MAAMC,UAAU,GAAGN,4BAA4B,CAACO,MAAM,CAAA;AACtD,MAAMC,KAAK,GAAGF,UAAU,GAAGL,iBAAiB,CAAA;AAC5C,MAAMQ,MAAM,GAAGD,KAAK,GAAGP,iBAAiB,CAAA;AACxC,MAAMS,aAAa,GAAGD,MAAM,GAAGR,iBAAiB,CAAA;AAChD,MAAMU,QAAQ,GAAGD,aAAa,GAAGT,iBAAiB,CAAA;AAE3C,MAAMW,yBAAyB,SAASC,qBAAU,CAAC;EACxDC,kBAAkB,CAACC,WAAiC,EAAE;AACpD,IAAA,OAAO,IAAI,CAACC,KAAK,CAAC,CAAC,EAAEC,MAAM,CAACC,IAAI,CAACH,WAAW,CAAC,CAAC,CAAA;AAChD,GAAA;AAEAI,EAAAA,uBAAuB,GAAG;AACxB,IAAA,OAAO,IAAI,CAACL,kBAAkB,CAACd,4BAA4B,CAAC,CAAA;AAC9D,GAAA;EAEAoB,iBAAiB,CAACC,mBAA8B,EAAE;IAChD,OAAO,IAAI,CAACF,uBAAuB,EAAE,CAACH,KAAK,CACzCN,aAAa,EACbW,mBAAmB,CACpB,CAAA;AACH,GAAA;EAEAC,UAAU,CAACC,YAAuB,EAAE;AAClC,IAAA,OAAO,IAAI,CAACP,KAAK,CAACR,KAAK,EAAEe,YAAY,CAAC,CAAA;AACxC,GAAA;EAEAC,WAAW,CAACC,aAAwB,EAAE;AACpC,IAAA,OAAO,IAAI,CAACT,KAAK,CAACP,MAAM,EAAEgB,aAAa,CAAC,CAAA;AAC1C,GAAA;EAEAC,aAAa,CAACC,eAA0B,EAAE;AACxC,IAAA,OAAO,IAAI,CAACX,KAAK,CAACL,QAAQ,EAAEgB,eAAe,CAAC,CAAA;AAC9C,GAAA;AACF;;;;"}