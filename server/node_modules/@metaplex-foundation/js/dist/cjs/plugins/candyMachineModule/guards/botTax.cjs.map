{"version":3,"file":"botTax.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/botTax.ts"],"sourcesContent":["import { BotTax, botTaxBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  lamports,\n  mapSerializer,\n  SolAmount,\n} from '@/types';\n\n/**\n * The botTax guard charges a penalty for invalid transactions\n * in order to discourage bots from attempting to mint NFTs.\n *\n * This bot tax works in combinaison with other guards and\n * will trigger whenever a minting wallet attempts to mint\n * an NFT such that other guards would have rejected the mint.\n *\n * For example, if you have a startDate guard and a botTax guard,\n * anyone trying to mint before the defined start date will be\n * charged the bot tax instead of receiving a specific startDate error.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type BotTaxGuardSettings = {\n  /** The amount in SOL to charge for an invalid transaction. */\n  lamports: SolAmount;\n\n  /**\n   * Whether or not we should charge the bot tax when a mint instruction\n   * is not the last instruction of the transaction.\n   *\n   * This is useful if you want to prevent bots from adding extra instructions\n   * after minting to detect if a bot tax was charged and, in this case,\n   * throw an error to make the transaction fail and avoid the bot tax.\n   */\n  lastInstruction: boolean;\n};\n\n/** @internal */\nexport const botTaxGuardManifest: CandyGuardManifest<BotTaxGuardSettings> = {\n  name: 'botTax',\n  settingsBytes: 9,\n  settingsSerializer: mapSerializer<BotTax, BotTaxGuardSettings>(\n    createSerializerFromBeet(botTaxBeet),\n    (settings) => ({ ...settings, lamports: lamports(settings.lamports) }),\n    (settings) => ({ ...settings, lamports: settings.lamports.basisPoints })\n  ),\n};\n"],"names":["botTaxGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","botTaxBeet","settings","lamports","basisPoints"],"mappings":";;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAgBA;AACO,MAAMA,mBAA4D,GAAG;AAC1EC,EAAAA,IAAI,EAAE,QAAQ;AACdC,EAAAA,aAAa,EAAE,CAAC;EAChBC,kBAAkB,EAAEC,wBAAa,CAC/BC,mCAAwB,CAACC,wBAAU,CAAC,EACnCC,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;AAAEC,IAAAA,QAAQ,EAAEA,eAAQ,CAACD,QAAQ,CAACC,QAAQ,CAAA;GAAG,CAAC,EACrED,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;AAAEC,IAAAA,QAAQ,EAAED,QAAQ,CAACC,QAAQ,CAACC,WAAAA;AAAY,GAAC,CAAC,CAAA;AAE5E;;;;"}