"use strict";
/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeFetchCollectionAuthorityRecordFromSeeds = exports.fetchCollectionAuthorityRecordFromSeeds = exports.findCollectionAuthorityRecordPda = exports.getCollectionAuthorityRecordGpaBuilder = exports.safeFetchAllCollectionAuthorityRecord = exports.fetchAllCollectionAuthorityRecord = exports.safeFetchCollectionAuthorityRecord = exports.fetchCollectionAuthorityRecord = exports.deserializeCollectionAuthorityRecord = exports.getCollectionAuthorityRecordAccountDataSerializer = void 0;
const umi_1 = require("@metaplex-foundation/umi");
const serializers_1 = require("@metaplex-foundation/umi/serializers");
const types_1 = require("../types");
function getCollectionAuthorityRecordAccountDataSerializer() {
    return (0, serializers_1.mapSerializer)((0, serializers_1.struct)([
        ['key', (0, types_1.getKeySerializer)()],
        ['bump', (0, serializers_1.u8)()],
        ['updateAuthority', (0, serializers_1.option)((0, serializers_1.publicKey)())],
    ], { description: 'CollectionAuthorityRecordAccountData' }), (value) => ({ ...value, key: types_1.Key.CollectionAuthorityRecord }));
}
exports.getCollectionAuthorityRecordAccountDataSerializer = getCollectionAuthorityRecordAccountDataSerializer;
function deserializeCollectionAuthorityRecord(rawAccount) {
    return (0, umi_1.deserializeAccount)(rawAccount, getCollectionAuthorityRecordAccountDataSerializer());
}
exports.deserializeCollectionAuthorityRecord = deserializeCollectionAuthorityRecord;
async function fetchCollectionAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    (0, umi_1.assertAccountExists)(maybeAccount, 'CollectionAuthorityRecord');
    return deserializeCollectionAuthorityRecord(maybeAccount);
}
exports.fetchCollectionAuthorityRecord = fetchCollectionAuthorityRecord;
async function safeFetchCollectionAuthorityRecord(context, publicKey, options) {
    const maybeAccount = await context.rpc.getAccount((0, umi_1.publicKey)(publicKey, false), options);
    return maybeAccount.exists
        ? deserializeCollectionAuthorityRecord(maybeAccount)
        : null;
}
exports.safeFetchCollectionAuthorityRecord = safeFetchCollectionAuthorityRecord;
async function fetchAllCollectionAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts.map((maybeAccount) => {
        (0, umi_1.assertAccountExists)(maybeAccount, 'CollectionAuthorityRecord');
        return deserializeCollectionAuthorityRecord(maybeAccount);
    });
}
exports.fetchAllCollectionAuthorityRecord = fetchAllCollectionAuthorityRecord;
async function safeFetchAllCollectionAuthorityRecord(context, publicKeys, options) {
    const maybeAccounts = await context.rpc.getAccounts(publicKeys.map((key) => (0, umi_1.publicKey)(key, false)), options);
    return maybeAccounts
        .filter((maybeAccount) => maybeAccount.exists)
        .map((maybeAccount) => deserializeCollectionAuthorityRecord(maybeAccount));
}
exports.safeFetchAllCollectionAuthorityRecord = safeFetchAllCollectionAuthorityRecord;
function getCollectionAuthorityRecordGpaBuilder(context) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return (0, umi_1.gpaBuilder)(context, programId)
        .registerFields({
        key: [0, (0, types_1.getKeySerializer)()],
        bump: [1, (0, serializers_1.u8)()],
        updateAuthority: [2, (0, serializers_1.option)((0, serializers_1.publicKey)())],
    })
        .deserializeUsing((account) => deserializeCollectionAuthorityRecord(account))
        .whereField('key', types_1.Key.CollectionAuthorityRecord);
}
exports.getCollectionAuthorityRecordGpaBuilder = getCollectionAuthorityRecordGpaBuilder;
function findCollectionAuthorityRecordPda(context, seeds) {
    const programId = context.programs.getPublicKey('mplTokenMetadata', 'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s');
    return context.eddsa.findPda(programId, [
        (0, serializers_1.string)({ size: 'variable' }).serialize('metadata'),
        (0, serializers_1.publicKey)().serialize(programId),
        (0, serializers_1.publicKey)().serialize(seeds.mint),
        (0, serializers_1.string)({ size: 'variable' }).serialize('collection_authority'),
        (0, serializers_1.publicKey)().serialize(seeds.collectionAuthority),
    ]);
}
exports.findCollectionAuthorityRecordPda = findCollectionAuthorityRecordPda;
async function fetchCollectionAuthorityRecordFromSeeds(context, seeds, options) {
    return fetchCollectionAuthorityRecord(context, findCollectionAuthorityRecordPda(context, seeds), options);
}
exports.fetchCollectionAuthorityRecordFromSeeds = fetchCollectionAuthorityRecordFromSeeds;
async function safeFetchCollectionAuthorityRecordFromSeeds(context, seeds, options) {
    return safeFetchCollectionAuthorityRecord(context, findCollectionAuthorityRecordPda(context, seeds), options);
}
exports.safeFetchCollectionAuthorityRecordFromSeeds = safeFetchCollectionAuthorityRecordFromSeeds;
//# sourceMappingURL=collectionAuthorityRecord.js.map