/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Context, Pda, PublicKey, Signer, TransactionBuilder } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type BurnNftInstructionAccounts = {
    /** Metadata (pda of ['metadata', program id, mint id]) */
    metadata?: PublicKey | Pda;
    /** NFT owner */
    owner: Signer;
    /** Mint of the NFT */
    mint: PublicKey | Pda;
    /** Token account to close */
    tokenAccount: PublicKey | Pda;
    /** MasterEdition2 of the NFT */
    masterEditionAccount: PublicKey | Pda;
    /** SPL Token Program */
    splTokenProgram?: PublicKey | Pda;
    /** Metadata of the Collection */
    collectionMetadata?: PublicKey | Pda;
};
export type BurnNftInstructionData = {
    discriminator: number;
};
export type BurnNftInstructionDataArgs = {};
export declare function getBurnNftInstructionDataSerializer(): Serializer<BurnNftInstructionDataArgs, BurnNftInstructionData>;
export declare function burnNft(context: Pick<Context, 'eddsa' | 'programs'>, input: BurnNftInstructionAccounts): TransactionBuilder;
