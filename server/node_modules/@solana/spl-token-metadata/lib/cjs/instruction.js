"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createEmitInstruction = exports.createUpdateAuthorityInstruction = exports.createRemoveKeyInstruction = exports.createUpdateFieldInstruction = exports.createInitializeInstruction = void 0;
const codecs_data_structures_1 = require("@solana/codecs-data-structures");
const codecs_numbers_1 = require("@solana/codecs-numbers");
const codecs_strings_1 = require("@solana/codecs-strings");
const options_1 = require("@solana/options");
const spl_type_length_value_1 = require("@solana/spl-type-length-value");
const web3_js_1 = require("@solana/web3.js");
const field_js_1 = require("./field.js");
function packInstruction(layout, discriminator, values) {
    const encoder = (0, codecs_data_structures_1.getStructEncoder)(layout);
    const data = encoder.encode(values);
    return Buffer.concat([discriminator, data]);
}
function createInitializeInstruction(args) {
    const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;
    return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: false, isWritable: false, pubkey: updateAuthority },
            { isSigner: false, isWritable: false, pubkey: mint },
            { isSigner: true, isWritable: false, pubkey: mintAuthority },
        ],
        data: packInstruction([
            ['name', (0, codecs_strings_1.getStringEncoder)()],
            ['symbol', (0, codecs_strings_1.getStringEncoder)()],
            ['uri', (0, codecs_strings_1.getStringEncoder)()],
        ], (0, spl_type_length_value_1.splDiscriminate)('spl_token_metadata_interface:initialize_account'), { name, symbol, uri }),
    });
}
exports.createInitializeInstruction = createInitializeInstruction;
function createUpdateFieldInstruction(args) {
    const { programId, metadata, updateAuthority, field, value } = args;
    return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: updateAuthority },
        ],
        data: packInstruction([
            ['field', (0, codecs_data_structures_1.getDataEnumCodec)((0, field_js_1.getFieldCodec)())],
            ['value', (0, codecs_strings_1.getStringEncoder)()],
        ], (0, spl_type_length_value_1.splDiscriminate)('spl_token_metadata_interface:updating_field'), { field: (0, field_js_1.getFieldConfig)(field), value }),
    });
}
exports.createUpdateFieldInstruction = createUpdateFieldInstruction;
function createRemoveKeyInstruction(args) {
    const { programId, metadata, updateAuthority, key, idempotent } = args;
    return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: updateAuthority },
        ],
        data: packInstruction([
            ['idempotent', (0, codecs_data_structures_1.getBooleanEncoder)()],
            ['key', (0, codecs_strings_1.getStringEncoder)()],
        ], (0, spl_type_length_value_1.splDiscriminate)('spl_token_metadata_interface:remove_key_ix'), { idempotent, key }),
    });
}
exports.createRemoveKeyInstruction = createRemoveKeyInstruction;
function createUpdateAuthorityInstruction(args) {
    const { programId, metadata, oldAuthority, newAuthority } = args;
    const newAuthorityBuffer = Buffer.alloc(32);
    if (newAuthority) {
        newAuthorityBuffer.set(newAuthority.toBuffer());
    }
    else {
        newAuthorityBuffer.fill(0);
    }
    return new web3_js_1.TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: oldAuthority },
        ],
        data: packInstruction([['newAuthority', (0, codecs_data_structures_1.getBytesEncoder)({ size: 32 })]], (0, spl_type_length_value_1.splDiscriminate)('spl_token_metadata_interface:update_the_authority'), { newAuthority: newAuthorityBuffer }),
    });
}
exports.createUpdateAuthorityInstruction = createUpdateAuthorityInstruction;
function createEmitInstruction(args) {
    const { programId, metadata, start, end } = args;
    return new web3_js_1.TransactionInstruction({
        programId,
        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],
        data: packInstruction([
            ['start', (0, options_1.getOptionEncoder)((0, codecs_numbers_1.getU64Encoder)())],
            ['end', (0, options_1.getOptionEncoder)((0, codecs_numbers_1.getU64Encoder)())],
        ], (0, spl_type_length_value_1.splDiscriminate)('spl_token_metadata_interface:emitter'), { start: start !== null && start !== void 0 ? start : null, end: end !== null && end !== void 0 ? end : null }),
    });
}
exports.createEmitInstruction = createEmitInstruction;
//# sourceMappingURL=instruction.js.map