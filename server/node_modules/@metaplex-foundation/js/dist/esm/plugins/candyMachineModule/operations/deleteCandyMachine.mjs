import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-machine-core';
import { useOperation } from '../../../types/Operation.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// -----------------
// Operation
// -----------------

const Key = 'DeleteCandyMachineOperation';

/**
 * Deletes a Candy Machine account by withdrawing its rent-exempt balance.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .delete({
 *     candyMachine: candyMachine.address,
 *     candyGuard: candyMachine.candyGuard.address,
 *     authority,
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const deleteCandyMachineOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const deleteCandyMachineOperationHandler = {
  async handle(operation, metaplex, scope) {
    return deleteCandyMachineBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Deletes a Candy Machine account by withdrawing its rent-exempt balance.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .candyMachines()
 *   .builders()
 *   .delete({
 *     candyMachine: candyMachine.address,
 *     candyGuard: candyMachine.candyGuard.address,
 *     authority,
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const deleteCandyMachineBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    candyGuard,
    authority = metaplex.identity(),
    candyGuardAuthority = authority
  } = params;
  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);
  const builder = TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createWithdrawInstruction({
      candyMachine,
      authority: authority.publicKey
    }, candyMachineProgram.address),
    signers: [authority],
    key: params.deleteCandyMachineInstructionKey ?? 'deleteCandyMachine'
  });
  if (candyGuard) {
    builder.add(metaplex.candyMachines().builders().deleteCandyGuard({
      candyGuard,
      authority: candyGuardAuthority
    }, {
      payer,
      programs
    }));
  }
  return builder;
};

export { deleteCandyMachineBuilder, deleteCandyMachineOperation, deleteCandyMachineOperationHandler };
//# sourceMappingURL=deleteCandyMachine.mjs.map
