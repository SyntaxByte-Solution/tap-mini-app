{"version":3,"file":"insertItemsToCandyMachineV2.mjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/insertItemsToCandyMachineV2.ts"],"sourcesContent":["import { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  assertAllConfigLineConstraints,\n  assertCanAdd,\n  assertNotFull,\n} from '../asserts';\nimport { CandyMachineV2, CandyMachineV2Item } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertItemsToCandyMachineV2Operation' as const;\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const insertItemsToCandyMachineV2Operation =\n  useOperation<InsertItemsToCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type InsertItemsToCandyMachineV2Operation = Operation<\n  typeof Key,\n  InsertItemsToCandyMachineV2Input,\n  InsertItemsToCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineV2Input = {\n  /**\n   * The Candy Machine to insert items into.\n   *\n   * We only need a subset of the `CandyMachine` model.\n   * We need its address and the number of items loaded and to be loaded\n   * so we can check if the operation is valid.\n   */\n  candyMachine: Pick<\n    CandyMachineV2,\n    'itemsAvailable' | 'itemsLoaded' | 'address'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The items to insert into the candy machine.\n   */\n  items: CandyMachineV2Item[];\n\n  /**\n   * The index we should use to insert the new items. This refers to the\n   * index of the first item to insert and the others will follow after it.\n   *\n   * By defaults, this uses the `itemsLoaded` property so items are simply\n   * appended to the current items.\n   *\n   * @defaultValue `candyMachine.itemsLoaded`\n   */\n  index?: BigNumber;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type InsertItemsToCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const InsertItemsToCandyMachineV2OperationHandler: OperationHandler<InsertItemsToCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: InsertItemsToCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<InsertItemsToCandyMachineV2Output> {\n      return insertItemsToCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineV2BuilderParams = Omit<\n  InsertItemsToCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const insertItemsToCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: InsertItemsToCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const { items } = params;\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllConfigLineConstraints(items);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createAddConfigLinesInstruction(\n        {\n          candyMachine: params.candyMachine.address,\n          authority: authority.publicKey,\n        },\n        { index: index.toNumber(), configLines: items }\n      ),\n      signers: [authority],\n      key: params.instructionKey ?? 'insertItems',\n    });\n};\n"],"names":["Key","insertItemsToCandyMachineV2Operation","useOperation","InsertItemsToCandyMachineV2OperationHandler","handle","operation","metaplex","scope","insertItemsToCandyMachineV2Builder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","authority","identity","index","candyMachine","itemsLoaded","items","assertNotFull","assertCanAdd","length","assertAllConfigLineConstraints","TransactionBuilder","make","setFeePayer","add","instruction","createAddConfigLinesInstruction","address","publicKey","toNumber","configLines","signers","key","instructionKey"],"mappings":";;;;;AAmBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAA+C,CAAA;;AAE3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAG,EAAC;;AAEzD;AACA;AACA;AACA;;AAyDA;AACA;AACA;AACA;AACO,MAAMG,2CAAmG,GAC9G;AACE,EAAA,MAAMC,MAAM,CACVC,SAA+C,EAC/CC,QAAkB,EAClBC,KAAqB,EACuB;AAC5C,IAAA,OAAOC,kCAAkC,CACvCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,kCAAkC,GAAG,CAChDF,QAAkB,EAClBM,MAAgD,EAChDC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;AAAEC,IAAAA,KAAK,GAAGR,QAAQ,CAACS,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGH,OAAO,CAAA;EAC/D,MAAMI,SAAS,GAAGL,MAAM,CAACK,SAAS,IAAIX,QAAQ,CAACY,QAAQ,EAAE,CAAA;EACzD,MAAMC,KAAK,GAAGP,MAAM,CAACO,KAAK,IAAIP,MAAM,CAACQ,YAAY,CAACC,WAAW,CAAA;EAC7D,MAAM;AAAEC,IAAAA,KAAAA;AAAM,GAAC,GAAGV,MAAM,CAAA;AACxBW,EAAAA,aAAa,CAACX,MAAM,CAACQ,YAAY,EAAED,KAAK,CAAC,CAAA;EACzCK,YAAY,CAACZ,MAAM,CAACQ,YAAY,EAAED,KAAK,EAAEG,KAAK,CAACG,MAAM,CAAC,CAAA;EACtDC,8BAA8B,CAACJ,KAAK,CAAC,CAAA;EAErC,OAAOK,kBAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACf,KAAK,CAAC,CAClBgB,GAAG,CAAC;IACHC,WAAW,EAAEC,+BAA+B,CAC1C;AACEZ,MAAAA,YAAY,EAAER,MAAM,CAACQ,YAAY,CAACa,OAAO;MACzChB,SAAS,EAAEA,SAAS,CAACiB,SAAAA;AACvB,KAAC,EACD;AAAEf,MAAAA,KAAK,EAAEA,KAAK,CAACgB,QAAQ,EAAE;AAAEC,MAAAA,WAAW,EAAEd,KAAAA;AAAM,KAAC,CAChD;IACDe,OAAO,EAAE,CAACpB,SAAS,CAAC;AACpBqB,IAAAA,GAAG,EAAE1B,MAAM,CAAC2B,cAAc,IAAI,aAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;"}