{"version":3,"file":"asserts.mjs","sources":["../../../../src/plugins/candyMachineV2Module/asserts.ts"],"sourcesContent":["import { Creator } from '@metaplex-foundation/mpl-token-metadata';\nimport {\n  ConfigLine,\n  EndSettingType,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  MAX_CREATOR_LIMIT,\n  MAX_NAME_LENGTH,\n  MAX_SYMBOL_LENGTH,\n  MAX_URI_LENGTH,\n} from './constants';\nimport { CandyMachineV2 } from './models';\nimport {\n  CandyMachineV2AddItemConstraintsViolatedError,\n  CandyMachineV2CannotAddAmountError,\n  CandyMachineV2EndedError,\n  CandyMachineV2IsEmptyError,\n  CandyMachineV2IsFullError,\n  CandyMachineV2NotLiveError,\n} from './errors';\nimport { assert } from '@/utils';\nimport { BigNumber, now, Signer, toBigNumber } from '@/types';\n\nexport const assertName = (name: string) => {\n  assert(\n    name.length <= MAX_NAME_LENGTH,\n    `Candy Machine name too long: ${name} (max ${MAX_NAME_LENGTH})`\n  );\n};\n\nexport const assertSymbol = (symbol: string) => {\n  assert(\n    symbol.length <= MAX_SYMBOL_LENGTH,\n    `Candy Machine symbol too long: ${symbol} (max ${MAX_SYMBOL_LENGTH})`\n  );\n};\n\nexport const assertUri = (uri: string) => {\n  assert(\n    uri.length <= MAX_URI_LENGTH,\n    `Candy Machine URI too long: ${uri} (max ${MAX_URI_LENGTH})`\n  );\n};\n\nexport const assertCreators = (creators: Creator[]) => {\n  assert(\n    creators.length <= MAX_CREATOR_LIMIT,\n    `Candy Machine creators too long: ${creators} (max ${MAX_CREATOR_LIMIT})`\n  );\n};\n\nexport const assertNotFull = (\n  candyMachine: Pick<CandyMachineV2, 'itemsAvailable' | 'itemsLoaded'>,\n  index: BigNumber\n) => {\n  if (candyMachine.itemsAvailable.lte(candyMachine.itemsLoaded)) {\n    throw new CandyMachineV2IsFullError(index, candyMachine.itemsAvailable);\n  }\n};\n\nexport const assertNotEmpty = (\n  candyMachine: Pick<CandyMachineV2, 'itemsRemaining' | 'itemsAvailable'>\n) => {\n  if (candyMachine.itemsRemaining.isZero()) {\n    throw new CandyMachineV2IsEmptyError(candyMachine.itemsAvailable);\n  }\n};\n\nexport const assertCanAdd = (\n  candyMachine: Pick<CandyMachineV2, 'itemsAvailable'>,\n  index: BigNumber,\n  amount: number\n) => {\n  if (index.addn(amount).gt(candyMachine.itemsAvailable)) {\n    throw new CandyMachineV2CannotAddAmountError(\n      index,\n      amount,\n      candyMachine.itemsAvailable\n    );\n  }\n};\n\nexport const assertAllConfigLineConstraints = (configLines: ConfigLine[]) => {\n  for (let i = 0; i < configLines.length; i++) {\n    try {\n      assertName(configLines[i].name);\n      assertUri(configLines[i].uri);\n    } catch (error) {\n      throw new CandyMachineV2AddItemConstraintsViolatedError(\n        toBigNumber(i),\n        configLines[i],\n        error as Error\n      );\n    }\n  }\n};\n\nexport const assertCandyMachineV2IsLive = (\n  candyMachine: Pick<CandyMachineV2, 'whitelistMintSettings' | 'goLiveDate'>\n) => {\n  const hasWhitelistPresale =\n    candyMachine.whitelistMintSettings?.presale ?? false;\n\n  if (hasWhitelistPresale) {\n    return;\n  }\n\n  const liveDate = candyMachine.goLiveDate;\n\n  if (!liveDate || liveDate.gte(now())) {\n    throw new CandyMachineV2NotLiveError(liveDate);\n  }\n};\n\nexport const assertCandyMachineV2HasNotEnded = (\n  candyMachine: Pick<CandyMachineV2, 'endSettings' | 'itemsMinted'>\n) => {\n  const { endSettings } = candyMachine;\n\n  if (!endSettings) {\n    return;\n  }\n\n  const hasEndedByAmount =\n    endSettings.endSettingType === EndSettingType.Amount &&\n    candyMachine.itemsMinted.gte(endSettings.number);\n  const hasEndedByDate =\n    endSettings.endSettingType === EndSettingType.Date &&\n    endSettings.date.lt(now());\n\n  if (hasEndedByAmount || hasEndedByDate) {\n    throw new CandyMachineV2EndedError(endSettings);\n  }\n};\n\nexport const assertCanMintCandyMachineV2 = (\n  candyMachine: Pick<\n    CandyMachineV2,\n    | 'authorityAddress'\n    | 'itemsRemaining'\n    | 'itemsAvailable'\n    | 'itemsMinted'\n    | 'whitelistMintSettings'\n    | 'goLiveDate'\n    | 'endSettings'\n  >,\n  payer: Signer\n) => {\n  assertNotEmpty(candyMachine);\n\n  if (candyMachine.authorityAddress.equals(payer.publicKey)) {\n    return;\n  }\n\n  assertCandyMachineV2IsLive(candyMachine);\n  assertCandyMachineV2HasNotEnded(candyMachine);\n};\n"],"names":["assertName","name","assert","length","MAX_NAME_LENGTH","assertUri","uri","MAX_URI_LENGTH","assertNotFull","candyMachine","index","itemsAvailable","lte","itemsLoaded","CandyMachineV2IsFullError","assertNotEmpty","itemsRemaining","isZero","CandyMachineV2IsEmptyError","assertCanAdd","amount","addn","gt","CandyMachineV2CannotAddAmountError","assertAllConfigLineConstraints","configLines","i","error","CandyMachineV2AddItemConstraintsViolatedError","toBigNumber","assertCandyMachineV2IsLive","hasWhitelistPresale","whitelistMintSettings","presale","liveDate","goLiveDate","gte","now","CandyMachineV2NotLiveError","assertCandyMachineV2HasNotEnded","endSettings","hasEndedByAmount","endSettingType","EndSettingType","Amount","itemsMinted","number","hasEndedByDate","Date","date","lt","CandyMachineV2EndedError","assertCanMintCandyMachineV2","payer","authorityAddress","equals","publicKey"],"mappings":"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"}