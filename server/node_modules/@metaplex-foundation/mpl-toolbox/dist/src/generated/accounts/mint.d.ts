/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Option, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type Mint = Account<MintAccountData>;
export type MintAccountData = {
    mintAuthority: Option<PublicKey>;
    supply: bigint;
    decimals: number;
    isInitialized: boolean;
    freezeAuthority: Option<PublicKey>;
};
export type MintAccountDataArgs = {
    mintAuthority: OptionOrNullable<PublicKey>;
    supply: number | bigint;
    decimals: number;
    isInitialized: boolean;
    freezeAuthority: OptionOrNullable<PublicKey>;
};
export declare function getMintAccountDataSerializer(): Serializer<MintAccountDataArgs, MintAccountData>;
export declare function deserializeMint(rawAccount: RpcAccount): Mint;
export declare function fetchMint(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Mint>;
export declare function safeFetchMint(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Mint | null>;
export declare function fetchAllMint(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Mint[]>;
export declare function safeFetchAllMint(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Mint[]>;
export declare function getMintGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Mint, {
    mintAuthority: OptionOrNullable<PublicKey>;
    supply: number | bigint;
    decimals: number;
    isInitialized: boolean;
    freezeAuthority: OptionOrNullable<PublicKey>;
}>;
export declare function getMintSize(): number;
