import { toPurchaseReceiptAccount } from '../accounts.mjs';
import { FindAllSupportsOnlyThreeFiltersMaxError } from '../errors.mjs';
import { PurchaseReceiptGpaBuilder } from '../gpaBuilders/PurchaseReceiptGpaBuilder.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { toLazyPurchase } from '../models/Purchase.mjs';

// -----------------
// Operation
// -----------------

const Key = 'FindPurchasesOperation';

/**
 * Finds Purchases by multiple criteria.
 * You can use any combination of keys.
 * Supports only 3 criteria at the same time including
 * the required `auctionHouse` attribute.
 *
 * ```ts
 * // Find all purchases in an Auction House.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse });
 *
 * // Find purchases by buyer and mint.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, buyer, mint });
 *
 * // Find purchases by metadata.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, metadata });
 *
 * // Find purchases by seller and buyer.
 * const purchases = await metaplex
 *   .auctionHouse()
 *   .findPurchases({ auctionHouse, seller, buyer });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findPurchasesOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findPurchasesOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      programs,
      commitment
    } = scope;
    const {
      auctionHouse,
      buyer,
      seller,
      metadata,
      mint
    } = operation.input;
    const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);
    let purchaseQuery = new PurchaseReceiptGpaBuilder(metaplex, auctionHouseProgram.address).mergeConfig({
      commitment
    }).whereAuctionHouse(auctionHouse.address);
    if (Object.keys(operation.input).length > 3) {
      throw new FindAllSupportsOnlyThreeFiltersMaxError();
    }
    if (buyer) {
      purchaseQuery = purchaseQuery.whereBuyer(buyer);
    }
    if (seller) {
      purchaseQuery = purchaseQuery.whereSeller(seller);
    }
    if (metadata && !mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metadata);
    }
    if (mint) {
      purchaseQuery = purchaseQuery.whereMetadata(metaplex.nfts().pdas().metadata({
        mint,
        programs
      }));
    }
    scope.throwIfCanceled();
    return purchaseQuery.getAndMap(account => toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse));
  }
};

export { findPurchasesOperation, findPurchasesOperationHandler };
//# sourceMappingURL=findPurchases.mjs.map
