import { AuthorityType, AuthorizationData } from '@metaplex-foundation/mpl-token-metadata';
import { Metaplex } from '../../Metaplex';
import { MetadataDelegateInput, TokenDelegateInput } from './DelegateInput';
import { Signer, PublicKey, Program } from '../../types';
import { Option } from '../../utils';
/**
 * Defines an authority that can handle a digital asset (NFT, SFT, etc.).
 *
 * An authority can be one of the following:
 * - Metadata: the update authority of the metadata account.
 * - Holder: the owner of the token account, i.e. the owner of the asset.
 * - Metadata Delegate: an approved delegate authority of the metadata account for a given action.
 * - Token Delegate: an approved delegate authority of the token account for a given action.
 */
export type TokenMetadataAuthority = TokenMetadataAuthorityMetadata | TokenMetadataAuthorityHolder | TokenMetadataAuthorityMetadataDelegate | TokenMetadataAuthorityTokenDelegate;
/** The update authority of the metadata account. */
export type TokenMetadataAuthorityMetadata = {
    __kind: 'metadata';
    updateAuthority: Signer;
    token?: PublicKey;
};
/** An approved delegate authority of the metadata account for a given action. */
export type TokenMetadataAuthorityMetadataDelegate = MetadataDelegateInput<Signer> & {
    __kind: 'metadataDelegate';
};
/** An approved delegate authority of the token account for a given action. */
export type TokenMetadataAuthorityTokenDelegate = TokenDelegateInput<Signer> & {
    __kind: 'tokenDelegate';
};
/** The owner of the token account, i.e. the owner of the asset. */
export type TokenMetadataAuthorityHolder = {
    __kind: 'holder';
    owner: Signer;
    token: PublicKey;
};
/**
 * Allows us to provide additional authorization details for an operation.
 *
 * This includes:
 * - The account defining the rules that should be used to authorize the operation.
 * - Optionally, the extra data that should be used by those rules.
 */
export type TokenMetadataAuthorizationDetails = {
    rules: PublicKey;
    data?: AuthorizationData;
};
export type ParsedTokenMetadataAuthorization = {
    accounts: {
        /** The authority that will sign the transaction. */
        authority: PublicKey;
        /**
         * If "holder" or "token delegate" authority,
         * the address of the token account.
         */
        token?: PublicKey;
        /**
         * If "delegate" authority, the address of the update
         * authority or the token owner depending on the type.
         */
        approver?: PublicKey;
        /**
         * If "delegate" authority, the address of the token record
         * or the metadata delegate record PDA depending on the type.
         */
        delegateRecord?: PublicKey;
        /** If any auth rules are provided, the address of the auth rule account. */
        authorizationRules?: PublicKey;
    };
    signers: Signer[];
    data: {
        authorityType: AuthorityType;
        authorizationData: Option<AuthorizationData>;
    };
};
export declare const parseTokenMetadataAuthorization: (metaplex: Metaplex, input: {
    mint: PublicKey;
    authority: TokenMetadataAuthority;
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    programs?: Program[];
}) => ParsedTokenMetadataAuthorization;
export declare const getSignerFromTokenMetadataAuthority: (authority: TokenMetadataAuthority | Signer) => Signer;
