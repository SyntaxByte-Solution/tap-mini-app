/// <reference types="node" />
/// <reference types="node" />
import type { DataItemCreateOptions, Signer } from "arbundles";
import type BigNumber from "bignumber.js";
import type { Readable } from "stream";
import type Api from "./api";
import type Fund from "./fund";
import type { Provenance } from "./provenance";
import type { Transaction } from "./transactions";
import type { Arbundles, CreateAndUploadOptions, Token, FundResponse, IrysTransaction, IrysTransactionCreateOptions, IrysTransactonCtor, UploadReceipt, UploadReceiptData, UploadResponse, WithdrawalResponse } from "./types";
import type Uploader from "./upload";
import Utils from "./utils";
import Query from "@irys/query";
export default abstract class Irys {
    api: Api;
    utils: Utils;
    uploader: Uploader;
    funder: Fund;
    address: string | undefined;
    token: string;
    tokenConfig: Token;
    provenance: Provenance;
    transactions: Transaction;
    protected _readyPromise: Promise<void> | undefined;
    url: URL;
    arbundles: Arbundles;
    IrysTransaction: IrysTransactonCtor;
    static VERSION: string;
    constructor({ url, arbundles }: {
        url: URL;
        arbundles: Arbundles;
    });
    get signer(): Signer;
    get search(): InstanceType<typeof Query>["search"];
    query(queryOpts?: ConstructorParameters<typeof Query>[0]): Query;
    withdrawBalance(amount: BigNumber.Value): Promise<WithdrawalResponse>;
    /**
     * Gets the balance for the loaded wallet
     * @returns balance (in winston)
     */
    getLoadedBalance(): Promise<BigNumber>;
    /**
     * Gets the balance for the specified address
     * @param address address to query for
     * @returns the balance (in winston)
     */
    getBalance(address: string): Promise<BigNumber>;
    /**
     * Sends amount atomic units to the specified bundler
     * @param amount amount to send in atomic units
     * @returns details about the fund transaction
     */
    fund(amount: BigNumber.Value, multiplier?: number): Promise<FundResponse>;
    /**
     * Calculates the price for [bytes] bytes for the loaded token and Irys node.
     * @param bytes
     * @returns
     */
    getPrice(bytes: number): Promise<BigNumber>;
    verifyReceipt(receipt: UploadReceiptData): Promise<boolean>;
    /**
     * Create a new IrysTransactions (flex token arbundles dataItem)
     * @param data
     * @param opts - dataItemCreateOptions
     * @returns - a new IrysTransaction instance
     */
    createTransaction(data: string | Buffer, opts?: IrysTransactionCreateOptions): IrysTransaction;
    /**
     * Returns the signer for the loaded token
     */
    getSigner(): Signer;
    upload(data: string | Buffer | Readable, opts?: CreateAndUploadOptions): Promise<UploadResponse>;
    uploadWithReceipt(data: string | Buffer | Readable, opts?: DataItemCreateOptions): Promise<UploadReceipt>;
    ready(): Promise<Irys>;
    get transaction(): {
        fromRaw(rawTransaction: Uint8Array): IrysTransaction;
    };
}
