'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'WrapCandyGuardOperation';

/**
 * Wraps the given Candy Machine in a Candy Guard.
 *
 * This makes the Candy Guard the mint authority for the Candy Machine
 * which means all minting will have to go through the Candy Guard.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .wrapCandyGuard({
 *     candyMachine,
 *     candyGuard,
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const wrapCandyGuardOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const wrapCandyGuardOperationHandler = {
  async handle(operation, metaplex, scope) {
    return wrapCandyGuardBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Wraps the given Candy Machine in a Candy Guard.
 *
 * This makes the Candy Guard the mint authority for the Candy Machine
 * which means all minting will have to go through the Candy Guard.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .candyMachines()
 *   .builders()
 *   .wrapCandyGuard({
 *     candyMachine,
 *     candyGuard,
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const wrapCandyGuardBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyGuard,
    candyGuardAuthority = metaplex.identity(),
    candyMachine,
    candyMachineAuthority = metaplex.identity()
  } = params;
  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);
  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).add({
    instruction: mplCandyGuard.createWrapInstruction({
      candyGuard,
      authority: candyGuardAuthority.publicKey,
      candyMachine,
      candyMachineProgram: candyMachineProgram.address,
      candyMachineAuthority: candyMachineAuthority.publicKey
    }, candyGuardProgram.address),
    signers: [candyGuardAuthority, candyMachineAuthority],
    key: params.wrapCandyGuardInstructionKey ?? 'wrapCandyGuard'
  });
};

exports.wrapCandyGuardBuilder = wrapCandyGuardBuilder;
exports.wrapCandyGuardOperation = wrapCandyGuardOperation;
exports.wrapCandyGuardOperationHandler = wrapCandyGuardOperationHandler;
//# sourceMappingURL=wrapCandyGuard.cjs.map
