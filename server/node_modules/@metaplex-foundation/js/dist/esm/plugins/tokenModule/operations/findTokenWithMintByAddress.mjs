import { toTokenAccount, toMintAccount } from '../accounts.mjs';
import { toMint } from '../models/Mint.mjs';
import { toTokenWithMint } from '../models/Token.mjs';
import { useOperation } from '../../../types/Operation.mjs';

// -----------------
// Operation
// -----------------

const Key = 'FindTokenWithMintByAddressOperation';

/**
 * Finds a token account and its associated mint account
 * by providing the token address.
 *
 * ```ts
 * const tokenWithMint = await metaplex.tokens().findTokenWithMintByAddress({ address });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findTokenWithMintByAddressOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findTokenWithMintByAddressOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      commitment
    } = scope;
    const {
      address
    } = operation.input;
    const tokenAccount = toTokenAccount(await metaplex.rpc().getAccount(address, commitment));
    const mintAccount = toMintAccount(await metaplex.rpc().getAccount(tokenAccount.data.mint, commitment));
    return toTokenWithMint(tokenAccount, toMint(mintAccount));
  }
};

export { findTokenWithMintByAddressOperation, findTokenWithMintByAddressOperationHandler };
//# sourceMappingURL=findTokenWithMintByAddress.mjs.map
