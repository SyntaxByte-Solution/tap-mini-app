export class Provenance {
    irys;
    constructor(irys) {
        this.irys = irys;
    }
    async upload(data, opts) {
        return this.irys.uploadWithReceipt(data, opts);
    }
    async uploadProof(proofFields) {
        return await this.irys.uploadWithReceipt("", {
            tags: Object.entries({ dataProtocol: "Provenance-Confirmation", ...proofFields }).map(([k, v]) => ({ name: tagMap[k], value: v })),
        });
    }
    async getAllProofs(searchBy, opts) {
        const queryTags = Object.entries(searchBy).map(([k, v]) => ({ name: tagMap[k], values: [v] }));
        if (queryTags.length === 0)
            throw new Error(`Getting a provenance proof requires at least one query element`);
        const query = `
    query ($tags: [TagFilter!]) {
      transactions(tags: $tags) {
        edges {
          node {
            id
            receipt {
              deadlineHeight
              signature
              timestamp
              version
            }
            tags {
              name
              value
            }
          }
        }
      }
    }
    `;
        const txs = [];
        let endCursor = null;
        do {
            const gqlRes = await this.irys.api.post("/graphql", {
                query,
                variables: { tags: queryTags, limit: opts?.limit ?? null, after: endCursor },
            }, undefined);
            endCursor = gqlRes.data.data.transactions?.pageInfo?.hasNextPage ? gqlRes.data.data.transactions.pageInfo.endCursor : null;
            txs.push(...gqlRes.data.data.transactions.edges.map((t) => t.node));
        } while (endCursor);
        return txs;
    }
    async getProof(searchBy) {
        const res = (await this.getAllProofs(searchBy, { limit: 1 })).at(0);
        if (!res)
            throw new Error(`Unable to locate proof with fields ${JSON.stringify(searchBy)}`);
        return res;
    }
}
const tagMap = {
    dataProtocol: "Data-Protocol",
    hashingAlgo: "Hashing-Algo",
    dataHash: "Data-Hash",
    uploadedFor: "Uploaded-For",
    prompt: "Prompt",
    promptHash: "Prompt-Hash",
    model: "Model",
};
//# sourceMappingURL=provenance.js.map