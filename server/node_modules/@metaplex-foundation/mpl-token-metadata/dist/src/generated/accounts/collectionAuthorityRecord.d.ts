/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Option, OptionOrNullable, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs } from '../types';
export type CollectionAuthorityRecord = Account<CollectionAuthorityRecordAccountData>;
export type CollectionAuthorityRecordAccountData = {
    key: Key;
    bump: number;
    updateAuthority: Option<PublicKey>;
};
export type CollectionAuthorityRecordAccountDataArgs = {
    bump: number;
    updateAuthority: OptionOrNullable<PublicKey>;
};
export declare function getCollectionAuthorityRecordAccountDataSerializer(): Serializer<CollectionAuthorityRecordAccountDataArgs, CollectionAuthorityRecordAccountData>;
export declare function deserializeCollectionAuthorityRecord(rawAccount: RpcAccount): CollectionAuthorityRecord;
export declare function fetchCollectionAuthorityRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CollectionAuthorityRecord>;
export declare function safeFetchCollectionAuthorityRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<CollectionAuthorityRecord | null>;
export declare function fetchAllCollectionAuthorityRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CollectionAuthorityRecord[]>;
export declare function safeFetchAllCollectionAuthorityRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<CollectionAuthorityRecord[]>;
export declare function getCollectionAuthorityRecordGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<CollectionAuthorityRecord, {
    key: KeyArgs;
    bump: number;
    updateAuthority: OptionOrNullable<PublicKey>;
}>;
export declare function findCollectionAuthorityRecordPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The address of the mint account */
    mint: PublicKey;
    /** The address of the collection authority */
    collectionAuthority: PublicKey;
}): Pda;
export declare function fetchCollectionAuthorityRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findCollectionAuthorityRecordPda>[1], options?: RpcGetAccountOptions): Promise<CollectionAuthorityRecord>;
export declare function safeFetchCollectionAuthorityRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findCollectionAuthorityRecordPda>[1], options?: RpcGetAccountOptions): Promise<CollectionAuthorityRecord | null>;
