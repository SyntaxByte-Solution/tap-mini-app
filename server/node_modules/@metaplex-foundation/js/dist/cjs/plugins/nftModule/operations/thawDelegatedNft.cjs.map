{"version":3,"file":"thawDelegatedNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/thawDelegatedNft.ts"],"sourcesContent":["import { createThawDelegatedAccountInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawDelegatedNftOperation' as const;\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const thawDelegatedNftOperation =\n  useOperation<ThawDelegatedNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawDelegatedNftOperation = Operation<\n  typeof Key,\n  ThawDelegatedNftInput,\n  ThawDelegatedNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawDelegatedNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The SPL Token delegate authority.\n   *\n   * This authority should have been approved using\n   * `metaplex.tokens().approveDelegateAuthority()` beforehand.\n   */\n  delegateAuthority: Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawDelegatedNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawDelegatedNftOperationHandler: OperationHandler<ThawDelegatedNftOperation> =\n  {\n    async handle(\n      operation: ThawDelegatedNftOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ThawDelegatedNftOutput> {\n      return thawDelegatedNftBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawDelegatedNftBuilderParams = Omit<\n  ThawDelegatedNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that thaws the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawDelegatedNftBuilder = (\n  metaplex: Metaplex,\n  params: ThawDelegatedNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    delegateAuthority,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n  } = params;\n\n  // Programs.\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const editionAddress = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: tokenOwner,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createThawDelegatedAccountInstruction(\n        {\n          delegate: delegateAuthority.publicKey,\n          tokenAccount: tokenAddressOrAta,\n          edition: editionAddress,\n          mint: mintAddress,\n          tokenProgram: tokenProgram.address,\n        },\n        tokenMetadataProgram.address\n      ),\n      signers: [delegateAuthority],\n      key: params.instructionKey ?? 'thawDelegatedNft',\n    });\n};\n"],"names":["Key","thawDelegatedNftOperation","useOperation","thawDelegatedNftOperationHandler","handle","operation","metaplex","scope","thawDelegatedNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","delegateAuthority","tokenOwner","identity","publicKey","tokenAddress","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","editionAddress","nfts","pdas","masterEdition","mint","tokenAddressOrAta","tokens","associatedTokenAccount","owner","TransactionBuilder","make","setFeePayer","add","instruction","createThawDelegatedAccountInstruction","delegate","tokenAccount","edition","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAoC,CAAA;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,yBAAyB,GACpCC,sBAAY,CAA4BF,GAAG,EAAC;;AAE9C;AACA;AACA;AACA;;AAgDA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACE,EAAA,MAAMC,MAAM,CACVC,SAAoC,EACpCC,QAAkB,EAClBC,KAAqB,EACY;AACjC,IAAA,OAAOC,uBAAuB,CAACF,QAAQ,EAAED,SAAS,CAACI,KAAK,CAAC,CAACC,cAAc,CACtEJ,QAAQ,EACRC,KAAK,CAACI,cAAc,CACrB,CAAA;AACH,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,uBAAuB,GAAG,CACrCF,QAAkB,EAClBM,MAAqC,EACrCC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;IACXC,iBAAiB;AACjBC,IAAAA,UAAU,GAAGd,QAAQ,CAACe,QAAQ,EAAE,CAACC,SAAS;AAC1CC,IAAAA,YAAAA;AACF,GAAC,GAAGX,MAAM,CAAA;;AAEV;EACA,MAAMY,YAAY,GAAGlB,QAAQ,CAACQ,QAAQ,EAAE,CAACW,QAAQ,CAACX,QAAQ,CAAC,CAAA;EAC3D,MAAMY,oBAAoB,GAAGpB,QAAQ,CAACQ,QAAQ,EAAE,CAACa,gBAAgB,CAACb,QAAQ,CAAC,CAAA;EAE3E,MAAMc,cAAc,GAAGtB,QAAQ,CAACuB,IAAI,EAAE,CAACC,IAAI,EAAE,CAACC,aAAa,CAAC;AAC1DC,IAAAA,IAAI,EAAEd,WAAW;AACjBJ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AACF,EAAA,MAAMmB,iBAAiB,GACrBV,YAAY,IACZjB,QAAQ,CAAC4B,MAAM,EAAE,CAACJ,IAAI,EAAE,CAACK,sBAAsB,CAAC;AAC9CH,IAAAA,IAAI,EAAEd,WAAW;AACjBkB,IAAAA,KAAK,EAAEhB,UAAU;AACjBN,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEJ,OAAOuB,qCAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACxB,KAAK,CAAC,CAClByB,GAAG,CAAC;IACHC,WAAW,EAAEC,sDAAqC,CAChD;MACEC,QAAQ,EAAExB,iBAAiB,CAACG,SAAS;AACrCsB,MAAAA,YAAY,EAAEX,iBAAiB;AAC/BY,MAAAA,OAAO,EAAEjB,cAAc;AACvBI,MAAAA,IAAI,EAAEd,WAAW;MACjBM,YAAY,EAAEA,YAAY,CAACsB,OAAAA;AAC7B,KAAC,EACDpB,oBAAoB,CAACoB,OAAO,CAC7B;IACDC,OAAO,EAAE,CAAC5B,iBAAiB,CAAC;AAC5B6B,IAAAA,GAAG,EAAEpC,MAAM,CAACqC,cAAc,IAAI,kBAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}