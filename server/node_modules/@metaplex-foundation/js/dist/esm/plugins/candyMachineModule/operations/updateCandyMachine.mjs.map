{"version":3,"file":"updateCandyMachine.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyMachine.ts"],"sourcesContent":["import {\n  CandyMachineData,\n  createSetAuthorityInstruction,\n  createSetCollectionInstruction,\n  createSetMintAuthorityInstruction,\n  createUpdateInstruction as createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine-core';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport {\n  CandyMachine,\n  CandyMachineConfigLineSettings,\n  CandyMachineHiddenSettings,\n  isCandyMachine,\n  toCandyMachineData,\n} from '../models';\nimport { MissingInputDataError, NoInstructionsToSendError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Creator,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Program,\n  PublicKey,\n  Signer,\n  toPublicKey,\n} from '@/types';\nimport {\n  assertObjectHasDefinedKeys,\n  removeUndefinedAttributes,\n  TransactionBuilder,\n  TransactionBuilderOptions,\n} from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineOperation' as const;\n\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyMachineOperation = _updateCandyMachineOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _updateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: UpdateCandyMachineInput<T>): UpdateCandyMachineOperation<T> {\n  return { key: Key, input };\n}\n_updateCandyMachineOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, UpdateCandyMachineInput<T>, UpdateCandyMachineOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyMachineInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /**\n   * The Candy Machine to update.\n   *\n   * This can either be a Candy Machine instance or its address.\n   * When passing its address, you will need to provide enough input\n   * so the SDK knows what to update.\n   *\n   * For instance, if you only want to update the `creators` array of the Candy Machine,\n   * you will also need to provide all other Candy Machine data such as its `symbol`,\n   * its `sellerFeeBasisPoints`, etc.\n   *\n   * That's because the program requires all data to be provided at once when updating.\n   * The SDK will raise an error if you don't provide enough data letting you know\n   * what's missing.\n   *\n   * Alternatively, if you provide a Candy Machine instance, the SDK will use its\n   * current data to fill all the gaps so you can focus on what you want to update.\n   */\n  candyMachine: PublicKey | CandyMachine<T>;\n\n  /**\n   * The address of the Candy Guard associated to the Candy Machine, if any.\n   * This is only required if `candyMachine` is provided as an address and\n   * you are trying to update the `guards` or `groups` parameters.\n   *\n   * @defaultValue `candyMachine.candyGuard?.address`\n   */\n  candyGuard?: PublicKey;\n\n  /**\n   * The Signer authorized to update the Candy Machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The Signer authorized to update the associated Candy Guard, if any.\n   * This is typically the same as the Candy Machine authority.\n   *\n   * @defaultValue Defaults to the `authority` parameter.\n   */\n  candyGuardAuthority?: Signer;\n\n  /**\n   * The new authority that will be allowed to manage the Candy Machine.\n   * This includes updating its data, authorities, inserting items, etc.\n   *\n   * Warning: This means the current `authority` Signer will no longer be able\n   * to manage the Candy Machine.\n   *\n   * Note that if your Candy Machine has a Candy Guard associated to it,\n   * you might want to also update the Candy Guard's authority using the\n   * `newCandyGuardAuthority` parameter.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The new authority that will be able to mint from this Candy Machine.\n   *\n   * This must be a Signer to ensure Candy Guards are not used to mint from\n   * unexpected Candy Machines as some of its guards could have side effects.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newMintAuthority?: Signer;\n\n  /**\n   * The new authority that will be allowed to manage the Candy Guard\n   * account associated with the Candy Machine.\n   *\n   * Warning: This means the current Candy Guard `authority` Signer will\n   * no longer be able to manage the Candy Guard account.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCandyGuardAuthority?: PublicKey;\n\n  /**\n   * The Collection NFT that all NFTs minted from this Candy Machine should be part of.\n   * This must include its address and the update authority as a Signer.\n   *\n   * If the `candyMachine` attribute is passed as a `PublicKey`, you will also need to\n   * provide the mint address of the current collection that will be overriden.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collection?: {\n    /** The mint address of the collection. */\n    address: PublicKey;\n\n    /** The update authority of the collection as a Signer. */\n    updateAuthority: Signer;\n\n    /** The mint address of the current collection that will be overriden. */\n    currentCollectionAddress?: PublicKey;\n  };\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  sellerFeeBasisPoints?: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  itemsAvailable?: BigNumber;\n\n  /**\n   * Settings related to the Candy Machine's items.\n   *\n   * These can either be inserted manually within the Candy Machine or\n   * they can be infered from a set of hidden settings.\n   *\n   * - If `type` is `hidden`, the Candy Machine is using hidden settings.\n   * - If `type` is `configLines`, the Candy Machine is using config line settings.\n   *\n   * @defaultValue Defaults to not being updated.\n   *\n   * @see {@link CandyMachineHiddenSettings}\n   * @see {@link CandyMachineConfigLineSettings}\n   */\n  itemSettings?: CandyMachineHiddenSettings | CandyMachineConfigLineSettings;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  symbol?: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  maxEditionSupply?: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  isMutable?: boolean;\n\n  /**\n   * Array of creators that should be set on minted NFTs.\n   *\n   * @defaultValue Defaults to not being updated.\n   *\n   * @see {@link Creator}\n   */\n  creators?: Omit<Creator, 'verified'>[];\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Note that this will override the existing `guards` settings\n   * so you must provide all guards you wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  guards?: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements â€” i.e. guards.\n   *\n   * Note that this will override the existing `groups` settings\n   * so you must provide all groups and guards you wish to activate.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * You may disable groups by providing an empty array `[]`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyMachineOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyMachineOperationHandler: OperationHandler<UpdateCandyMachineOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: UpdateCandyMachineOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyMachineOutput> {\n      const builder = updateCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyMachineBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<UpdateCandyMachineInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the Candy Machine data. */\n  updateDataInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine collection. */\n  setCollectionInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the associated Candy Guard, if any. */\n  updateCandyGuardInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine's mint authority. */\n  setMintAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Machine's authority. */\n  setAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the Candy Guard's authority. */\n  setCandyGuardAuthorityInstructionKey?: string;\n};\n\n/**\n * Updates the every aspect of an existing Candy Machine, including its\n * authorities, collection and guards (when associated with a Candy Guard).\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .update({\n *     candyMachine,\n *     sellerFeeBasisPoints: 500,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyMachineBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { authority = metaplex.identity(), candyGuardAuthority = authority } =\n    params;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update Candy Machine data.\n      .add(\n        updateCandyMachineDataBuilder<T>(metaplex, params, authority, programs)\n      )\n\n      // Update Candy Machine collection.\n      .add(\n        updateCandyMachineCollectionBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          payer,\n          programs\n        )\n      )\n\n      // Update Candy Guard's guards and groups, if any.\n      .add(\n        updateCandyGuardsBuilder<T>(\n          metaplex,\n          params,\n          candyGuardAuthority,\n          payer,\n          programs\n        )\n      )\n\n      // Update Candy Machine mint authority.\n      .add(\n        updateCandyMachineMintAuthorityBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          programs\n        )\n      )\n\n      // Update Candy Machine authority.\n      .add(\n        updateCandyMachineAuthorityBuilder<T>(\n          metaplex,\n          params,\n          authority,\n          programs\n        )\n      )\n\n      // Update Candy Guard authority.\n      .add(\n        updateCandyGuardAuthorityBuilder<T>(\n          metaplex,\n          params,\n          candyGuardAuthority,\n          payer,\n          programs\n        )\n      )\n  );\n};\n\nconst updateCandyMachineDataBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  const dataToUpdate: Partial<CandyMachine> = removeUndefinedAttributes({\n    itemsAvailable: params.itemsAvailable,\n    symbol: params.symbol,\n    sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n    maxEditionSupply: params.maxEditionSupply,\n    isMutable: params.isMutable,\n    creators: params.creators,\n    itemSettings: params.itemSettings,\n  });\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  let data: CandyMachineData;\n  if (Object.keys(dataToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  } else if (isCandyMachine(params.candyMachine)) {\n    data = toCandyMachineData({ ...params.candyMachine, ...dataToUpdate });\n  } else {\n    assertObjectHasDefinedKeys(\n      dataToUpdate,\n      [\n        'itemsAvailable',\n        'symbol',\n        'sellerFeeBasisPoints',\n        'maxEditionSupply',\n        'isMutable',\n        'creators',\n        'itemSettings',\n      ],\n      onMissingInputError\n    );\n    data = toCandyMachineData(dataToUpdate);\n  }\n\n  return TransactionBuilder.make().add({\n    instruction: createUpdateCandyMachineInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n      },\n      { data },\n      candyMachineProgram.address\n    ),\n    signers: [authority],\n    key: params.updateDataInstructionKey ?? 'updateCandyMachineData',\n  });\n};\n\nconst updateCandyMachineCollectionBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.collection) {\n    return TransactionBuilder.make();\n  }\n\n  const currentCollectionAddress =\n    params.collection.currentCollectionAddress ??\n    (isCandyMachine(params.candyMachine)\n      ? params.candyMachine.collectionMintAddress\n      : null);\n\n  if (!currentCollectionAddress) {\n    throw onMissingInputError(['collection.currentCollectionAddress']);\n  }\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  // Addresses.\n  const candyMachineAddress = toPublicKey(params.candyMachine);\n  const collectionAddress = params.collection.address;\n  const collectionUpdateAuthority = params.collection.updateAuthority;\n\n  // PDAs.\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachineAddress,\n    programs,\n  });\n  const currentCollectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: currentCollectionAddress,\n  });\n  const currentCollectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: currentCollectionAddress,\n      collectionAuthority: authorityPda,\n    });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collectionAddress,\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collectionAddress,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: collectionAddress,\n      collectionAuthority: authorityPda,\n    });\n\n  return TransactionBuilder.make().add({\n    instruction: createSetCollectionInstruction(\n      {\n        candyMachine: candyMachineAddress,\n        authority: authority.publicKey,\n        authorityPda,\n        payer: payer.publicKey,\n        collectionMint: currentCollectionAddress,\n        collectionMetadata: currentCollectionMetadata,\n        collectionAuthorityRecord: currentCollectionAuthorityRecord,\n        newCollectionUpdateAuthority: collectionUpdateAuthority.publicKey,\n        newCollectionMetadata: collectionMetadata,\n        newCollectionMint: collectionAddress,\n        newCollectionMasterEdition: collectionMasterEdition,\n        newCollectionAuthorityRecord: collectionAuthorityRecord,\n        tokenMetadataProgram: tokenMetadataProgram.address,\n      },\n      candyMachineProgram.address\n    ),\n    signers: [authority, payer, collectionUpdateAuthority],\n    key: params.setCollectionInstructionKey ?? 'setCandyMachineCollection',\n  });\n};\n\nconst updateCandyGuardsBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  candyGuardAuthority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  const guardsToUpdate: {\n    candyGuard?: PublicKey;\n    guards?: Partial<T>;\n    groups?: { label: string; guards: Partial<T> }[];\n  } = removeUndefinedAttributes({\n    candyGuard: params.candyGuard,\n    guards: params.guards,\n    groups: params.groups,\n  });\n\n  let args: {\n    candyGuard: PublicKey;\n    guards: Partial<T>;\n    groups: { label: string; guards: Partial<T> }[];\n  };\n\n  if (Object.keys(guardsToUpdate).length === 0) {\n    return TransactionBuilder.make();\n  }\n\n  if (\n    isCandyMachine<T>(params.candyMachine) &&\n    params.candyMachine.candyGuard\n  ) {\n    args = {\n      candyGuard: params.candyMachine.candyGuard.address,\n      guards: params.candyMachine.candyGuard.guards,\n      groups: params.candyMachine.candyGuard.groups,\n      ...guardsToUpdate,\n    };\n  } else {\n    assertObjectHasDefinedKeys(\n      guardsToUpdate,\n      ['candyGuard', 'guards', 'groups'],\n      onMissingInputError\n    );\n    args = guardsToUpdate;\n  }\n\n  return metaplex\n    .candyMachines()\n    .builders()\n    .updateCandyGuard<T>(\n      {\n        candyGuard: args.candyGuard,\n        guards: args.guards,\n        groups: args.groups,\n        authority: candyGuardAuthority,\n        updateInstructionKey:\n          params.updateCandyGuardInstructionKey ?? 'updateCandyGuard',\n      },\n      { payer, programs }\n    );\n};\n\nconst updateCandyMachineMintAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newMintAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  return TransactionBuilder.make().add({\n    instruction: createSetMintAuthorityInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n        mintAuthority: params.newMintAuthority.publicKey,\n      },\n      candyMachineProgram.address\n    ),\n    signers: [authority, params.newMintAuthority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority',\n  });\n};\n\nconst updateCandyMachineAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  authority: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  return TransactionBuilder.make().add({\n    instruction: createSetAuthorityInstruction(\n      {\n        candyMachine: toPublicKey(params.candyMachine),\n        authority: authority.publicKey,\n      },\n      { newAuthority: params.newAuthority },\n      candyMachineProgram.address\n    ),\n    signers: [authority],\n    key: params.setAuthorityInstructionKey ?? 'setCandyMachineAuthority',\n  });\n};\n\nconst updateCandyGuardAuthorityBuilder = <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: UpdateCandyMachineBuilderParams<T>,\n  candyGuardAuthority: Signer,\n  payer: Signer,\n  programs?: Program[]\n): TransactionBuilder => {\n  if (!params.newCandyGuardAuthority) {\n    return TransactionBuilder.make();\n  }\n\n  const candyGuardAddress =\n    params.candyGuard ??\n    (isCandyMachine<T>(params.candyMachine) && params.candyMachine.candyGuard\n      ? params.candyMachine.candyGuard.address\n      : null);\n\n  if (!candyGuardAddress) {\n    throw onMissingInputError(['candyGuard']);\n  }\n\n  return TransactionBuilder.make().add(\n    metaplex.candyMachines().builders().updateCandyGuardAuthority(\n      {\n        candyGuard: candyGuardAddress,\n        authority: candyGuardAuthority,\n        newAuthority: params.newCandyGuardAuthority,\n        instructionKey: params.setCandyGuardAuthorityInstructionKey,\n      },\n      { payer, programs }\n    )\n  );\n};\n\nconst onMissingInputError = (missingKeys: string[]) =>\n  new MissingInputDataError(\n    missingKeys,\n    'When passing the Candy Machine as a `PublicKey` instead of a Candy Machine model ' +\n      'the SDK cannot rely on current data to fill the gaps within the provided input. ' +\n      'Alternatively, you can pass the Candy Machine model instead.'\n  );\n"],"names":["Key","updateCandyMachineOperation","_updateCandyMachineOperation","input","key","updateCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","updateCandyMachineBuilder","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","authority","identity","candyGuardAuthority","TransactionBuilder","make","setFeePayer","add","updateCandyMachineDataBuilder","updateCandyMachineCollectionBuilder","updateCandyGuardsBuilder","updateCandyMachineMintAuthorityBuilder","updateCandyMachineAuthorityBuilder","updateCandyGuardAuthorityBuilder","dataToUpdate","removeUndefinedAttributes","itemsAvailable","symbol","sellerFeeBasisPoints","maxEditionSupply","isMutable","creators","itemSettings","candyMachineProgram","getCandyMachine","data","Object","keys","length","isCandyMachine","candyMachine","toCandyMachineData","assertObjectHasDefinedKeys","onMissingInputError","instruction","createUpdateCandyMachineInstruction","toPublicKey","publicKey","address","signers","updateDataInstructionKey","collection","currentCollectionAddress","collectionMintAddress","tokenMetadataProgram","getTokenMetadata","candyMachineAddress","collectionAddress","collectionUpdateAuthority","updateAuthority","authorityPda","candyMachines","pdas","currentCollectionMetadata","nfts","metadata","mint","currentCollectionAuthorityRecord","collectionAuthorityRecord","collectionAuthority","collectionMetadata","collectionMasterEdition","masterEdition","createSetCollectionInstruction","collectionMint","newCollectionUpdateAuthority","newCollectionMetadata","newCollectionMint","newCollectionMasterEdition","newCollectionAuthorityRecord","setCollectionInstructionKey","guardsToUpdate","candyGuard","guards","groups","args","builders","updateCandyGuard","updateInstructionKey","updateCandyGuardInstructionKey","newMintAuthority","createSetMintAuthorityInstruction","mintAuthority","setAuthorityInstructionKey","newAuthority","createSetAuthorityInstruction","newCandyGuardAuthority","candyGuardAddress","updateCandyGuardAuthority","instructionKey","setCandyGuardAuthorityInstructionKey","missingKeys","MissingInputDataError"],"mappings":";;;;;;;;AAoCA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAsC,CAAA;;AAElD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,2BAA2B,GAAGC,6BAA4B;AACvE;AACA,SAASA,4BAA4B,CAEnCC,KAAiC,EAAkC;EACnE,OAAO;AAAEC,IAAAA,GAAG,EAAEJ,GAAG;AAAEG,IAAAA,KAAAA;GAAO,CAAA;AAC5B,CAAA;AACAD,4BAA4B,CAACE,GAAG,GAAGJ,GAAG,CAAA;;AAEtC;AACA;AACA;AACA;;AAoOA;AACA;AACA;AACA;AACO,MAAMK,kCAAiF,GAC5F;AACE,EAAA,MAAMC,MAAM,CACVC,SAAyC,EACzCC,QAAkB,EAClBC,KAAqB,EACc;IACnC,MAAMC,OAAO,GAAGC,yBAAyB,CACvCH,QAAQ,EACRD,SAAS,CAACJ,KAAK,EACfM,KAAK,CACN,CAAA;AAED,IAAA,IAAIC,OAAO,CAACE,OAAO,EAAE,EAAE;AACrB,MAAA,MAAM,IAAIC,yBAAyB,CAACb,GAAG,CAAC,CAAA;AAC1C,KAAA;IAEA,OAAOU,OAAO,CAACI,cAAc,CAACN,QAAQ,EAAEC,KAAK,CAACM,cAAc,CAAC,CAAA;AAC/D,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaJ,MAAAA,yBAAyB,GAAG,CAGvCH,QAAkB,EAClBQ,MAA0C,EAC1CC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGX,QAAQ,CAACY,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;AAAEK,IAAAA,SAAS,GAAGd,QAAQ,CAACe,QAAQ,EAAE;AAAEC,IAAAA,mBAAmB,GAAGF,SAAAA;AAAU,GAAC,GACxEN,MAAM,CAAA;AAER,EAAA,OACES,kBAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACR,KAAK,CAAA;;AAElB;GACCS,GAAG,CACFC,6BAA6B,CAAIrB,QAAQ,EAAEQ,MAAM,EAAEM,SAAS,EAAEJ,QAAQ,CAAC,CAAA;;AAGzE;AAAA,GACCU,GAAG,CACFE,mCAAmC,CACjCtB,QAAQ,EACRQ,MAAM,EACNM,SAAS,EACTH,KAAK,EACLD,QAAQ,CACT,CAAA;;AAGH;AAAA,GACCU,GAAG,CACFG,wBAAwB,CACtBvB,QAAQ,EACRQ,MAAM,EACNQ,mBAAmB,EACnBL,KAAK,EACLD,QAAQ,CACT,CAAA;;AAGH;GACCU,GAAG,CACFI,sCAAsC,CACpCxB,QAAQ,EACRQ,MAAM,EACNM,SAAS,EACTJ,QAAQ,CACT,CAAA;;AAGH;GACCU,GAAG,CACFK,kCAAkC,CAChCzB,QAAQ,EACRQ,MAAM,EACNM,SAAS,EACTJ,QAAQ,CACT,CAAA;;AAGH;AAAA,GACCU,GAAG,CACFM,gCAAgC,CAC9B1B,QAAQ,EACRQ,MAAM,EACNQ,mBAAmB,EACnBL,KAAK,EACLD,QAAQ,CACT,CACF,CAAA;AAEP,EAAC;AAED,MAAMW,6BAA6B,GAAG,CAGpCrB,QAAkB,EAClBQ,MAA0C,EAC1CM,SAAiB,EACjBJ,QAAoB,KACG;EACvB,MAAMiB,YAAmC,GAAGC,yBAAyB,CAAC;IACpEC,cAAc,EAAErB,MAAM,CAACqB,cAAc;IACrCC,MAAM,EAAEtB,MAAM,CAACsB,MAAM;IACrBC,oBAAoB,EAAEvB,MAAM,CAACuB,oBAAoB;IACjDC,gBAAgB,EAAExB,MAAM,CAACwB,gBAAgB;IACzCC,SAAS,EAAEzB,MAAM,CAACyB,SAAS;IAC3BC,QAAQ,EAAE1B,MAAM,CAAC0B,QAAQ;IACzBC,YAAY,EAAE3B,MAAM,CAAC2B,YAAAA;AACvB,GAAC,CAAC,CAAA;EAEF,MAAMC,mBAAmB,GAAGpC,QAAQ,CAACU,QAAQ,EAAE,CAAC2B,eAAe,CAAC3B,QAAQ,CAAC,CAAA;AAEzE,EAAA,IAAI4B,IAAsB,CAAA;EAC1B,IAAIC,MAAM,CAACC,IAAI,CAACb,YAAY,CAAC,CAACc,MAAM,KAAK,CAAC,EAAE;IAC1C,OAAOxB,kBAAkB,CAACC,IAAI,EAAE,CAAA;GACjC,MAAM,IAAIwB,cAAc,CAAClC,MAAM,CAACmC,YAAY,CAAC,EAAE;IAC9CL,IAAI,GAAGM,kBAAkB,CAAC;MAAE,GAAGpC,MAAM,CAACmC,YAAY;MAAE,GAAGhB,YAAAA;AAAa,KAAC,CAAC,CAAA;AACxE,GAAC,MAAM;IACLkB,0BAA0B,CACxBlB,YAAY,EACZ,CACE,gBAAgB,EAChB,QAAQ,EACR,sBAAsB,EACtB,kBAAkB,EAClB,WAAW,EACX,UAAU,EACV,cAAc,CACf,EACDmB,mBAAmB,CACpB,CAAA;AACDR,IAAAA,IAAI,GAAGM,kBAAkB,CAACjB,YAAY,CAAC,CAAA;AACzC,GAAA;AAEA,EAAA,OAAOV,kBAAkB,CAACC,IAAI,EAAE,CAACE,GAAG,CAAC;IACnC2B,WAAW,EAAEC,uBAAmC,CAC9C;AACEL,MAAAA,YAAY,EAAEM,WAAW,CAACzC,MAAM,CAACmC,YAAY,CAAC;MAC9C7B,SAAS,EAAEA,SAAS,CAACoC,SAAAA;AACvB,KAAC,EACD;AAAEZ,MAAAA,IAAAA;AAAK,KAAC,EACRF,mBAAmB,CAACe,OAAO,CAC5B;IACDC,OAAO,EAAE,CAACtC,SAAS,CAAC;AACpBlB,IAAAA,GAAG,EAAEY,MAAM,CAAC6C,wBAAwB,IAAI,wBAAA;AAC1C,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM/B,mCAAmC,GAAG,CAG1CtB,QAAkB,EAClBQ,MAA0C,EAC1CM,SAAiB,EACjBH,KAAa,EACbD,QAAoB,KACG;AACvB,EAAA,IAAI,CAACF,MAAM,CAAC8C,UAAU,EAAE;IACtB,OAAOrC,kBAAkB,CAACC,IAAI,EAAE,CAAA;AAClC,GAAA;EAEA,MAAMqC,wBAAwB,GAC5B/C,MAAM,CAAC8C,UAAU,CAACC,wBAAwB,KACzCb,cAAc,CAAClC,MAAM,CAACmC,YAAY,CAAC,GAChCnC,MAAM,CAACmC,YAAY,CAACa,qBAAqB,GACzC,IAAI,CAAC,CAAA;EAEX,IAAI,CAACD,wBAAwB,EAAE;AAC7B,IAAA,MAAMT,mBAAmB,CAAC,CAAC,qCAAqC,CAAC,CAAC,CAAA;AACpE,GAAA;;AAEA;EACA,MAAMW,oBAAoB,GAAGzD,QAAQ,CAACU,QAAQ,EAAE,CAACgD,gBAAgB,CAAChD,QAAQ,CAAC,CAAA;EAC3E,MAAM0B,mBAAmB,GAAGpC,QAAQ,CAACU,QAAQ,EAAE,CAAC2B,eAAe,CAAC3B,QAAQ,CAAC,CAAA;;AAEzE;AACA,EAAA,MAAMiD,mBAAmB,GAAGV,WAAW,CAACzC,MAAM,CAACmC,YAAY,CAAC,CAAA;AAC5D,EAAA,MAAMiB,iBAAiB,GAAGpD,MAAM,CAAC8C,UAAU,CAACH,OAAO,CAAA;AACnD,EAAA,MAAMU,yBAAyB,GAAGrD,MAAM,CAAC8C,UAAU,CAACQ,eAAe,CAAA;;AAEnE;EACA,MAAMC,YAAY,GAAG/D,QAAQ,CAACgE,aAAa,EAAE,CAACC,IAAI,EAAE,CAACnD,SAAS,CAAC;AAC7D6B,IAAAA,YAAY,EAAEgB,mBAAmB;AACjCjD,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAMwD,yBAAyB,GAAGlE,QAAQ,CAACmE,IAAI,EAAE,CAACF,IAAI,EAAE,CAACG,QAAQ,CAAC;AAChEC,IAAAA,IAAI,EAAEd,wBAAAA;AACR,GAAC,CAAC,CAAA;EACF,MAAMe,gCAAgC,GAAGtE,QAAQ,CAC9CmE,IAAI,EAAE,CACNF,IAAI,EAAE,CACNM,yBAAyB,CAAC;AACzBF,IAAAA,IAAI,EAAEd,wBAAwB;AAC9BiB,IAAAA,mBAAmB,EAAET,YAAAA;AACvB,GAAC,CAAC,CAAA;EACJ,MAAMU,kBAAkB,GAAGzE,QAAQ,CAACmE,IAAI,EAAE,CAACF,IAAI,EAAE,CAACG,QAAQ,CAAC;AACzDC,IAAAA,IAAI,EAAET,iBAAAA;AACR,GAAC,CAAC,CAAA;EACF,MAAMc,uBAAuB,GAAG1E,QAAQ,CAACmE,IAAI,EAAE,CAACF,IAAI,EAAE,CAACU,aAAa,CAAC;AACnEN,IAAAA,IAAI,EAAET,iBAAAA;AACR,GAAC,CAAC,CAAA;EACF,MAAMW,yBAAyB,GAAGvE,QAAQ,CACvCmE,IAAI,EAAE,CACNF,IAAI,EAAE,CACNM,yBAAyB,CAAC;AACzBF,IAAAA,IAAI,EAAET,iBAAiB;AACvBY,IAAAA,mBAAmB,EAAET,YAAAA;AACvB,GAAC,CAAC,CAAA;AAEJ,EAAA,OAAO9C,kBAAkB,CAACC,IAAI,EAAE,CAACE,GAAG,CAAC;IACnC2B,WAAW,EAAE6B,8BAA8B,CACzC;AACEjC,MAAAA,YAAY,EAAEgB,mBAAmB;MACjC7C,SAAS,EAAEA,SAAS,CAACoC,SAAS;MAC9Ba,YAAY;MACZpD,KAAK,EAAEA,KAAK,CAACuC,SAAS;AACtB2B,MAAAA,cAAc,EAAEtB,wBAAwB;AACxCkB,MAAAA,kBAAkB,EAAEP,yBAAyB;AAC7CK,MAAAA,yBAAyB,EAAED,gCAAgC;MAC3DQ,4BAA4B,EAAEjB,yBAAyB,CAACX,SAAS;AACjE6B,MAAAA,qBAAqB,EAAEN,kBAAkB;AACzCO,MAAAA,iBAAiB,EAAEpB,iBAAiB;AACpCqB,MAAAA,0BAA0B,EAAEP,uBAAuB;AACnDQ,MAAAA,4BAA4B,EAAEX,yBAAyB;MACvDd,oBAAoB,EAAEA,oBAAoB,CAACN,OAAAA;AAC7C,KAAC,EACDf,mBAAmB,CAACe,OAAO,CAC5B;AACDC,IAAAA,OAAO,EAAE,CAACtC,SAAS,EAAEH,KAAK,EAAEkD,yBAAyB,CAAC;AACtDjE,IAAAA,GAAG,EAAEY,MAAM,CAAC2E,2BAA2B,IAAI,2BAAA;AAC7C,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAM5D,wBAAwB,GAAG,CAG/BvB,QAAkB,EAClBQ,MAA0C,EAC1CQ,mBAA2B,EAC3BL,KAAa,EACbD,QAAoB,KACG;EACvB,MAAM0E,cAIL,GAAGxD,yBAAyB,CAAC;IAC5ByD,UAAU,EAAE7E,MAAM,CAAC6E,UAAU;IAC7BC,MAAM,EAAE9E,MAAM,CAAC8E,MAAM;IACrBC,MAAM,EAAE/E,MAAM,CAAC+E,MAAAA;AACjB,GAAC,CAAC,CAAA;AAEF,EAAA,IAAIC,IAIH,CAAA;EAED,IAAIjD,MAAM,CAACC,IAAI,CAAC4C,cAAc,CAAC,CAAC3C,MAAM,KAAK,CAAC,EAAE;IAC5C,OAAOxB,kBAAkB,CAACC,IAAI,EAAE,CAAA;AAClC,GAAA;AAEA,EAAA,IACEwB,cAAc,CAAIlC,MAAM,CAACmC,YAAY,CAAC,IACtCnC,MAAM,CAACmC,YAAY,CAAC0C,UAAU,EAC9B;AACAG,IAAAA,IAAI,GAAG;AACLH,MAAAA,UAAU,EAAE7E,MAAM,CAACmC,YAAY,CAAC0C,UAAU,CAAClC,OAAO;AAClDmC,MAAAA,MAAM,EAAE9E,MAAM,CAACmC,YAAY,CAAC0C,UAAU,CAACC,MAAM;AAC7CC,MAAAA,MAAM,EAAE/E,MAAM,CAACmC,YAAY,CAAC0C,UAAU,CAACE,MAAM;MAC7C,GAAGH,cAAAA;KACJ,CAAA;AACH,GAAC,MAAM;AACLvC,IAAAA,0BAA0B,CACxBuC,cAAc,EACd,CAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,CAAC,EAClCtC,mBAAmB,CACpB,CAAA;AACD0C,IAAAA,IAAI,GAAGJ,cAAc,CAAA;AACvB,GAAA;EAEA,OAAOpF,QAAQ,CACZgE,aAAa,EAAE,CACfyB,QAAQ,EAAE,CACVC,gBAAgB,CACf;IACEL,UAAU,EAAEG,IAAI,CAACH,UAAU;IAC3BC,MAAM,EAAEE,IAAI,CAACF,MAAM;IACnBC,MAAM,EAAEC,IAAI,CAACD,MAAM;AACnBzE,IAAAA,SAAS,EAAEE,mBAAmB;AAC9B2E,IAAAA,oBAAoB,EAClBnF,MAAM,CAACoF,8BAA8B,IAAI,kBAAA;AAC7C,GAAC,EACD;IAAEjF,KAAK;AAAED,IAAAA,QAAAA;AAAS,GAAC,CACpB,CAAA;AACL,CAAC,CAAA;AAED,MAAMc,sCAAsC,GAAG,CAG7CxB,QAAkB,EAClBQ,MAA0C,EAC1CM,SAAiB,EACjBJ,QAAoB,KACG;AACvB,EAAA,IAAI,CAACF,MAAM,CAACqF,gBAAgB,EAAE;IAC5B,OAAO5E,kBAAkB,CAACC,IAAI,EAAE,CAAA;AAClC,GAAA;EAEA,MAAMkB,mBAAmB,GAAGpC,QAAQ,CAACU,QAAQ,EAAE,CAAC2B,eAAe,CAAC3B,QAAQ,CAAC,CAAA;AAEzE,EAAA,OAAOO,kBAAkB,CAACC,IAAI,EAAE,CAACE,GAAG,CAAC;IACnC2B,WAAW,EAAE+C,iCAAiC,CAC5C;AACEnD,MAAAA,YAAY,EAAEM,WAAW,CAACzC,MAAM,CAACmC,YAAY,CAAC;MAC9C7B,SAAS,EAAEA,SAAS,CAACoC,SAAS;AAC9B6C,MAAAA,aAAa,EAAEvF,MAAM,CAACqF,gBAAgB,CAAC3C,SAAAA;AACzC,KAAC,EACDd,mBAAmB,CAACe,OAAO,CAC5B;AACDC,IAAAA,OAAO,EAAE,CAACtC,SAAS,EAAEN,MAAM,CAACqF,gBAAgB,CAAC;AAC7CjG,IAAAA,GAAG,EAAEY,MAAM,CAACwF,0BAA0B,IAAI,0BAAA;AAC5C,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAMvE,kCAAkC,GAAG,CAGzCzB,QAAkB,EAClBQ,MAA0C,EAC1CM,SAAiB,EACjBJ,QAAoB,KACG;AACvB,EAAA,IAAI,CAACF,MAAM,CAACyF,YAAY,EAAE;IACxB,OAAOhF,kBAAkB,CAACC,IAAI,EAAE,CAAA;AAClC,GAAA;EAEA,MAAMkB,mBAAmB,GAAGpC,QAAQ,CAACU,QAAQ,EAAE,CAAC2B,eAAe,CAAC3B,QAAQ,CAAC,CAAA;AAEzE,EAAA,OAAOO,kBAAkB,CAACC,IAAI,EAAE,CAACE,GAAG,CAAC;IACnC2B,WAAW,EAAEmD,6BAA6B,CACxC;AACEvD,MAAAA,YAAY,EAAEM,WAAW,CAACzC,MAAM,CAACmC,YAAY,CAAC;MAC9C7B,SAAS,EAAEA,SAAS,CAACoC,SAAAA;AACvB,KAAC,EACD;MAAE+C,YAAY,EAAEzF,MAAM,CAACyF,YAAAA;AAAa,KAAC,EACrC7D,mBAAmB,CAACe,OAAO,CAC5B;IACDC,OAAO,EAAE,CAACtC,SAAS,CAAC;AACpBlB,IAAAA,GAAG,EAAEY,MAAM,CAACwF,0BAA0B,IAAI,0BAAA;AAC5C,GAAC,CAAC,CAAA;AACJ,CAAC,CAAA;AAED,MAAMtE,gCAAgC,GAAG,CAGvC1B,QAAkB,EAClBQ,MAA0C,EAC1CQ,mBAA2B,EAC3BL,KAAa,EACbD,QAAoB,KACG;AACvB,EAAA,IAAI,CAACF,MAAM,CAAC2F,sBAAsB,EAAE;IAClC,OAAOlF,kBAAkB,CAACC,IAAI,EAAE,CAAA;AAClC,GAAA;AAEA,EAAA,MAAMkF,iBAAiB,GACrB5F,MAAM,CAAC6E,UAAU,KAChB3C,cAAc,CAAIlC,MAAM,CAACmC,YAAY,CAAC,IAAInC,MAAM,CAACmC,YAAY,CAAC0C,UAAU,GACrE7E,MAAM,CAACmC,YAAY,CAAC0C,UAAU,CAAClC,OAAO,GACtC,IAAI,CAAC,CAAA;EAEX,IAAI,CAACiD,iBAAiB,EAAE;AACtB,IAAA,MAAMtD,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAAC,CAAA;AAC3C,GAAA;AAEA,EAAA,OAAO7B,kBAAkB,CAACC,IAAI,EAAE,CAACE,GAAG,CAClCpB,QAAQ,CAACgE,aAAa,EAAE,CAACyB,QAAQ,EAAE,CAACY,yBAAyB,CAC3D;AACEhB,IAAAA,UAAU,EAAEe,iBAAiB;AAC7BtF,IAAAA,SAAS,EAAEE,mBAAmB;IAC9BiF,YAAY,EAAEzF,MAAM,CAAC2F,sBAAsB;IAC3CG,cAAc,EAAE9F,MAAM,CAAC+F,oCAAAA;AACzB,GAAC,EACD;IAAE5F,KAAK;AAAED,IAAAA,QAAAA;AAAS,GAAC,CACpB,CACF,CAAA;AACH,CAAC,CAAA;AAED,MAAMoC,mBAAmB,GAAI0D,WAAqB,IAChD,IAAIC,qBAAqB,CACvBD,WAAW,EACX,mFAAmF,GACjF,kFAAkF,GAClF,8DAA8D,CACjE;;;;"}