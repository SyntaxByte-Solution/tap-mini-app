/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { Key, KeyArgs } from '../types';
export type UseAuthorityRecord = Account<UseAuthorityRecordAccountData>;
export type UseAuthorityRecordAccountData = {
    key: Key;
    allowedUses: bigint;
    bump: number;
};
export type UseAuthorityRecordAccountDataArgs = {
    allowedUses: number | bigint;
    bump: number;
};
export declare function getUseAuthorityRecordAccountDataSerializer(): Serializer<UseAuthorityRecordAccountDataArgs, UseAuthorityRecordAccountData>;
export declare function deserializeUseAuthorityRecord(rawAccount: RpcAccount): UseAuthorityRecord;
export declare function fetchUseAuthorityRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<UseAuthorityRecord>;
export declare function safeFetchUseAuthorityRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<UseAuthorityRecord | null>;
export declare function fetchAllUseAuthorityRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<UseAuthorityRecord[]>;
export declare function safeFetchAllUseAuthorityRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<UseAuthorityRecord[]>;
export declare function getUseAuthorityRecordGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<UseAuthorityRecord, {
    key: KeyArgs;
    allowedUses: number | bigint;
    bump: number;
}>;
export declare function getUseAuthorityRecordSize(): number;
export declare function findUseAuthorityRecordPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The address of the mint account */
    mint: PublicKey;
    /** The address of the use authority */
    useAuthority: PublicKey;
}): Pda;
export declare function fetchUseAuthorityRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findUseAuthorityRecordPda>[1], options?: RpcGetAccountOptions): Promise<UseAuthorityRecord>;
export declare function safeFetchUseAuthorityRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findUseAuthorityRecordPda>[1], options?: RpcGetAccountOptions): Promise<UseAuthorityRecord | null>;
