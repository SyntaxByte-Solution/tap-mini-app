'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var beet = require('@metaplex-foundation/beet');
var errors = require('../errors.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var beet__namespace = /*#__PURE__*/_interopNamespace(beet);

const MAXIMUM_SIZE = 5;
const SETTINGS_BYTES = 4 + MAXIMUM_SIZE * 32;

/** @internal */
const programGateGuardManifest = {
  name: 'programGate',
  settingsBytes: SETTINGS_BYTES,
  settingsSerializer: {
    description: mplCandyGuard.programGateBeet.description,
    serialize: value => {
      // Maximum of 5 additional programs allowed.
      if (value.additional.length >= MAXIMUM_SIZE) {
        throw new errors.MaximumOfFiveAdditionalProgramsError();
      }

      // Create buffer with beet.
      const fixedBeet = mplCandyGuard.programGateBeet.toFixedFromValue(value);
      const writer = new beet__namespace.BeetWriter(fixedBeet.byteSize);
      writer.write(fixedBeet, value);

      // Create 164 byte buffer and fill with previous buffer.
      // This allows for < 5 additional programs.
      const bufferFullSize = Buffer.alloc(SETTINGS_BYTES);
      bufferFullSize.fill(writer.buffer);
      return bufferFullSize;
    },
    deserialize: (buffer, offset) => {
      const fixedBeet = mplCandyGuard.programGateBeet.toFixedFromData(buffer, offset ?? 0);
      const reader = new beet__namespace.BeetReader(buffer, offset ?? 0);
      const value = reader.read(fixedBeet);
      return [value, reader.offset];
    }
  }
};

exports.programGateGuardManifest = programGateGuardManifest;
//# sourceMappingURL=programGate.cjs.map
