{"version":3,"file":"RpcClient.cjs","sources":["../../../../src/plugins/rpcModule/RpcClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  AccountInfo,\n  Blockhash,\n  BlockhashWithExpiryBlockHeight,\n  Commitment,\n  ConfirmOptions,\n  GetLatestBlockhashConfig,\n  GetProgramAccountsConfig,\n  PublicKey,\n  RpcResponseAndContext,\n  SendOptions,\n  SignatureResult,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport {\n  FailedToConfirmTransactionError,\n  FailedToConfirmTransactionWithResponseError,\n  FailedToSendTransactionError,\n  MetaplexError,\n  ParsedProgramError,\n  RpcError,\n  UnknownProgramError,\n} from '@/errors';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  getSignerHistogram,\n  isErrorWithLogs,\n  lamports,\n  Program,\n  Signer,\n  SolAmount,\n  UnparsedAccount,\n  UnparsedMaybeAccount,\n} from '@/types';\nimport { TransactionBuilder, zipMap } from '@/utils';\n\nimport type {\n  ReadApiAsset,\n  ReadApiAssetList,\n  GetAssetProofRpcResponse,\n  GetAssetsByGroupRpcInput,\n  GetAssetsByOwnerRpcInput,\n} from '@/types/ReadApi';\nimport { ReadApiConnection } from '@/utils/readApiConnection';\n\nexport type ConfirmTransactionResponse = RpcResponseAndContext<SignatureResult>;\nexport type SendAndConfirmTransactionResponse = {\n  signature: TransactionSignature;\n  confirmResponse: ConfirmTransactionResponse;\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n};\n\n/**\n * @group Modules\n */\nexport class RpcClient {\n  protected defaultFeePayer?: Signer;\n\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  protected async prepareTransaction(\n    transaction: Transaction | TransactionBuilder,\n    signers: Signer[]\n  ): Promise<{\n    transaction: Transaction;\n    signers: Signer[];\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n  }> {\n    let blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n    if (\n      !('records' in transaction) &&\n      transaction.recentBlockhash &&\n      transaction.lastValidBlockHeight\n    ) {\n      blockhashWithExpiryBlockHeight = {\n        blockhash: transaction.recentBlockhash,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n      };\n    } else {\n      blockhashWithExpiryBlockHeight = await this.getLatestBlockhash();\n    }\n\n    if ('records' in transaction) {\n      signers = [...transaction.getSigners(), ...signers];\n      transaction = transaction.toTransaction(blockhashWithExpiryBlockHeight);\n    }\n\n    return { transaction, signers, blockhashWithExpiryBlockHeight };\n  }\n\n  async signTransaction(\n    transaction: Transaction,\n    signers: Signer[]\n  ): Promise<Transaction> {\n    const { keypairs, identities } = getSignerHistogram(signers);\n\n    // Keypair signers.\n    if (keypairs.length > 0) {\n      transaction.partialSign(...keypairs);\n    }\n\n    // Identity signers.\n    for (let i = 0; i < identities.length; i++) {\n      transaction = await identities[i].signTransaction(transaction);\n    }\n\n    return transaction;\n  }\n\n  async sendTransaction(\n    transaction: Transaction | TransactionBuilder,\n    sendOptions: SendOptions = {},\n    signers: Signer[] = []\n  ): Promise<TransactionSignature> {\n    const prepared = await this.prepareTransaction(transaction, signers);\n    transaction = prepared.transaction;\n    signers = prepared.signers;\n\n    const defaultFeePayer = this.getDefaultFeePayer();\n    if (!transaction.feePayer && defaultFeePayer) {\n      transaction.feePayer = defaultFeePayer.publicKey;\n      signers = [defaultFeePayer, ...signers];\n    }\n\n    transaction = await this.signTransaction(transaction, signers);\n    const rawTransaction = transaction.serialize();\n\n    try {\n      return await this.metaplex.connection.sendRawTransaction(\n        rawTransaction,\n        sendOptions\n      );\n    } catch (error) {\n      throw this.parseProgramError(error, transaction);\n    }\n  }\n\n  async confirmTransaction(\n    signature: TransactionSignature,\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight,\n    commitment?: Commitment\n  ): Promise<ConfirmTransactionResponse> {\n    let rpcResponse: ConfirmTransactionResponse;\n    try {\n      rpcResponse = await this.metaplex.connection.confirmTransaction(\n        { signature, ...blockhashWithExpiryBlockHeight },\n        commitment\n      );\n    } catch (error) {\n      throw new FailedToConfirmTransactionError(error as Error);\n    }\n\n    if (rpcResponse.value.err) {\n      throw new FailedToConfirmTransactionWithResponseError(rpcResponse);\n    }\n\n    return rpcResponse;\n  }\n\n  async sendAndConfirmTransaction(\n    transaction: Transaction | TransactionBuilder,\n    confirmOptions?: ConfirmOptions,\n    signers: Signer[] = []\n  ): Promise<SendAndConfirmTransactionResponse> {\n    const prepared = await this.prepareTransaction(transaction, signers);\n    const { blockhashWithExpiryBlockHeight } = prepared;\n    transaction = prepared.transaction;\n    signers = prepared.signers;\n\n    const signature = await this.sendTransaction(\n      transaction,\n      confirmOptions,\n      signers\n    );\n\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      blockhashWithExpiryBlockHeight,\n      confirmOptions?.commitment\n    );\n\n    return { signature, confirmResponse, ...blockhashWithExpiryBlockHeight };\n  }\n\n  async getAccount(publicKey: PublicKey, commitment?: Commitment) {\n    const accountInfo = await this.metaplex.connection.getAccountInfo(\n      publicKey,\n      commitment\n    );\n\n    return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n  }\n\n  async accountExists(publicKey: PublicKey, commitment?: Commitment) {\n    const balance = await this.metaplex.connection.getBalance(\n      publicKey,\n      commitment\n    );\n\n    return balance > 0;\n  }\n\n  async getMultipleAccounts(publicKeys: PublicKey[], commitment?: Commitment) {\n    const accountInfos = await this.metaplex.connection.getMultipleAccountsInfo(\n      publicKeys,\n      commitment\n    );\n\n    return zipMap(publicKeys, accountInfos, (publicKey, accountInfo) => {\n      return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n    });\n  }\n\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment\n  ): Promise<UnparsedAccount[]> {\n    const accounts = await this.metaplex.connection.getProgramAccounts(\n      programId,\n      configOrCommitment\n    );\n\n    return accounts.map(({ pubkey, account }) => ({\n      ...account,\n      publicKey: pubkey,\n      lamports: lamports(account.lamports),\n    }));\n  }\n\n  async airdrop(\n    publicKey: PublicKey,\n    amount: SolAmount,\n    commitment?: Commitment\n  ): Promise<SendAndConfirmTransactionResponse> {\n    assertSol(amount);\n\n    const signature = await this.metaplex.connection.requestAirdrop(\n      publicKey,\n      amount.basisPoints.toNumber()\n    );\n\n    const blockhashWithExpiryBlockHeight = await this.getLatestBlockhash();\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      blockhashWithExpiryBlockHeight,\n      commitment\n    );\n\n    return { signature, confirmResponse, ...blockhashWithExpiryBlockHeight };\n  }\n\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment\n  ): Promise<SolAmount> {\n    const balance = await this.metaplex.connection.getBalance(\n      publicKey,\n      commitment\n    );\n\n    return lamports(balance);\n  }\n\n  async getRent(bytes: number, commitment?: Commitment): Promise<SolAmount> {\n    const rent =\n      await this.metaplex.connection.getMinimumBalanceForRentExemption(\n        bytes,\n        commitment\n      );\n\n    return lamports(rent);\n  }\n\n  async getLatestBlockhash(\n    commitmentOrConfig: Commitment | GetLatestBlockhashConfig = 'finalized'\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    return this.metaplex.connection.getLatestBlockhash(commitmentOrConfig);\n  }\n\n  getSolanaExporerUrl(signature: string): string {\n    let clusterParam = '';\n    switch (this.metaplex.cluster) {\n      case 'devnet':\n        clusterParam = '?cluster=devnet';\n        break;\n      case 'testnet':\n        clusterParam = '?cluster=testnet';\n        break;\n      case 'localnet':\n      case 'custom':\n        const url = encodeURIComponent(this.metaplex.connection.rpcEndpoint);\n        clusterParam = `?cluster=custom&customUrl=${url}`;\n        break;\n    }\n\n    return `https://explorer.solana.com/tx/${signature}${clusterParam}`;\n  }\n\n  setDefaultFeePayer(payer: Signer) {\n    this.defaultFeePayer = payer;\n\n    return this;\n  }\n\n  getDefaultFeePayer(): Signer {\n    return this.defaultFeePayer\n      ? this.defaultFeePayer\n      : this.metaplex.identity();\n  }\n\n  protected getUnparsedMaybeAccount(\n    publicKey: PublicKey,\n    accountInfo: AccountInfo<Buffer> | null\n  ): UnparsedMaybeAccount {\n    if (!accountInfo) {\n      return { publicKey, exists: false };\n    }\n\n    return {\n      ...accountInfo,\n      publicKey,\n      exists: true,\n      lamports: lamports(accountInfo.lamports),\n    };\n  }\n\n  async getAsset(assetId: PublicKey): Promise<ReadApiAsset | MetaplexError> {\n    if (this.metaplex.connection instanceof ReadApiConnection) {\n      return await this.metaplex.connection.getAsset(assetId);\n    }\n\n    return new RpcError(\n      'Method not supported! Use a ReadApiConnection instead'\n    );\n  }\n\n  async getAssetProof(\n    assetId: PublicKey\n  ): Promise<GetAssetProofRpcResponse | MetaplexError> {\n    if (this.metaplex.connection instanceof ReadApiConnection) {\n      return await this.metaplex.connection.getAssetProof(assetId);\n    }\n\n    return new RpcError(\n      'Method not supported! Use a ReadApiConnection instead'\n    );\n  }\n\n  async getAssetsByGroup({\n    groupKey,\n    groupValue,\n    page,\n    limit,\n    sortBy,\n    before,\n    after,\n  }: GetAssetsByGroupRpcInput): Promise<ReadApiAssetList | MetaplexError> {\n    if (this.metaplex.connection instanceof ReadApiConnection) {\n      return await this.metaplex.connection.getAssetsByGroup({\n        groupKey,\n        groupValue,\n        page,\n        limit,\n        sortBy,\n        before,\n        after,\n      });\n    }\n\n    return new RpcError(\n      'Method not supported! Use a ReadApiConnection instead'\n    );\n  }\n\n  async getAssetsByOwner({\n    ownerAddress,\n    page,\n    limit,\n    sortBy,\n    before,\n    after,\n  }: GetAssetsByOwnerRpcInput): Promise<ReadApiAssetList | MetaplexError> {\n    if (this.metaplex.connection instanceof ReadApiConnection) {\n      return await this.metaplex.connection.getAssetsByOwner({\n        ownerAddress,\n        page,\n        limit,\n        sortBy,\n        before,\n        after,\n      });\n    }\n\n    return new RpcError(\n      'Method not supported! Use a ReadApiConnection instead'\n    );\n  }\n\n  protected parseProgramError(\n    error: unknown,\n    transaction: Transaction\n  ): MetaplexError {\n    // Ensure the error as logs.\n    if (!isErrorWithLogs(error)) {\n      return new FailedToSendTransactionError(error as Error);\n    }\n\n    // Parse the instruction number.\n    const regex = /Error processing Instruction (\\d+):/;\n    const instruction: string | null = error.message.match(regex)?.[1] ?? null;\n\n    // Ensure there is an instruction number given to find the program.\n    if (!instruction) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Get the program ID from the instruction in the transaction.\n    const instructionNumber: number = parseInt(instruction, 10);\n    const programId: PublicKey | null =\n      transaction.instructions?.[instructionNumber]?.programId ?? null;\n\n    // Ensure we were able to find a program ID for the instruction.\n    if (!programId) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Find a registered program if any.\n    let program: Program;\n    try {\n      program = this.metaplex.programs().get(programId);\n    } catch (_programNotFoundError) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Ensure an error resolver exists on the program.\n    if (!program.errorResolver) {\n      return new UnknownProgramError(program, error);\n    }\n\n    // Finally, resolve the error.\n    const resolvedError = program.errorResolver(error);\n\n    return resolvedError\n      ? new ParsedProgramError(program, resolvedError, error.logs)\n      : new UnknownProgramError(program, error);\n  }\n}\n"],"names":["RpcClient","constructor","metaplex","prepareTransaction","transaction","signers","blockhashWithExpiryBlockHeight","recentBlockhash","lastValidBlockHeight","blockhash","getLatestBlockhash","getSigners","toTransaction","signTransaction","keypairs","identities","getSignerHistogram","length","partialSign","i","sendTransaction","sendOptions","prepared","defaultFeePayer","getDefaultFeePayer","feePayer","publicKey","rawTransaction","serialize","connection","sendRawTransaction","error","parseProgramError","confirmTransaction","signature","commitment","rpcResponse","FailedToConfirmTransactionError","value","err","FailedToConfirmTransactionWithResponseError","sendAndConfirmTransaction","confirmOptions","confirmResponse","getAccount","accountInfo","getAccountInfo","getUnparsedMaybeAccount","accountExists","balance","getBalance","getMultipleAccounts","publicKeys","accountInfos","getMultipleAccountsInfo","zipMap","getProgramAccounts","programId","configOrCommitment","accounts","map","pubkey","account","lamports","airdrop","amount","assertSol","requestAirdrop","basisPoints","toNumber","getRent","bytes","rent","getMinimumBalanceForRentExemption","commitmentOrConfig","getSolanaExporerUrl","clusterParam","cluster","url","encodeURIComponent","rpcEndpoint","setDefaultFeePayer","payer","identity","exists","getAsset","assetId","ReadApiConnection","RpcError","getAssetProof","getAssetsByGroup","groupKey","groupValue","page","limit","sortBy","before","after","getAssetsByOwner","ownerAddress","isErrorWithLogs","FailedToSendTransactionError","regex","instruction","message","match","instructionNumber","parseInt","instructions","program","programs","get","_programNotFoundError","errorResolver","UnknownProgramError","resolvedError","ParsedProgramError","logs"],"mappings":"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"}