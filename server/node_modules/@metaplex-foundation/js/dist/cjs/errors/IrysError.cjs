'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
var MetaplexError = require('./MetaplexError.cjs');

/** @group Errors */
class IrysError extends MetaplexError.MetaplexError {
  constructor(message, cause) {
    super(message, 'plugin', 'Irys', cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'IrysError');
  }
}

/** @group Errors */
class FailedToInitializeIrysError extends IrysError {
  constructor(cause) {
    const message = 'Irys could not be initialized. ' + 'Please check the underlying error below for more details.';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToInitializeIrysError');
  }
}

/** @group Errors */
class FailedToConnectToIrysAddressError extends IrysError {
  constructor(address, cause) {
    const message = `Irys could not connect to the provided address [${address}]. ` + 'Please ensure the provided address is valid. Some valid addresses include: ' + '"https://node1.irys.xyz" for mainnet and "https://devnet.irys.xyz" for devnet';
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToConnectToIrysAddressError');
  }
}

/** @group Errors */
class AssetUploadFailedError extends IrysError {
  constructor(status) {
    const message = `The asset could not be uploaded to the Irys network and ` + `returned the following status code [${status}].`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'AssetUploadFailedError');
  }
}

/** @group Errors */
class IrysWithdrawError extends IrysError {
  constructor(error) {
    const message = `The balance could not be withdrawn from the Irys network and ` + `returned the following error: ${error}.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'IrysWithdrawError');
  }
}

exports.AssetUploadFailedError = AssetUploadFailedError;
exports.FailedToConnectToIrysAddressError = FailedToConnectToIrysAddressError;
exports.FailedToInitializeIrysError = FailedToInitializeIrysError;
exports.IrysError = IrysError;
exports.IrysWithdrawError = IrysWithdrawError;
//# sourceMappingURL=IrysError.cjs.map
