'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../_virtual/_rollupPluginBabelHelpers.cjs');
var MetaplexError = require('./MetaplexError.cjs');

/** @group Errors */
class SdkError extends MetaplexError.MetaplexError {
  constructor(message, cause) {
    super(message, 'sdk', undefined, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'SdkError');
  }
}

/** @group Errors */
class OperationHandlerMissingError extends SdkError {
  constructor(operationKey) {
    const message = `No operation handler was registered for the [${operationKey}] operation. ` + `Did you forget to register it? You may do this by using: ` + `"metaplex.operations().register(operation, operationHandler)".`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'OperationHandlerMissingError');
  }
}

/** @group Errors */
class DriverNotProvidedError extends SdkError {
  constructor(driver) {
    const message = `The SDK tried to access the driver [${driver}] but was not provided. ` + `Make sure the driver is registered by using the "setDriver(myDriver)" method.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'DriverNotProvidedError');
  }
}

/** @group Errors */
class UnexpectedCurrencyError extends SdkError {
  constructor(actual, expected) {
    const message = `Expected currency [${expected}] but got [${actual}]. ` + `Ensure the provided Amount or Currency is of the expected type.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'UnexpectedCurrencyError');
    this.actual = actual;
    this.expected = expected;
  }
}

/** @group Errors */
class CurrencyMismatchError extends SdkError {
  constructor(left, right, operation) {
    const wrappedOperation = operation ? ` [${operation}]` : '';
    const message = `The SDK tried to execute an operation${wrappedOperation} on two different currencies: ` + `${left.symbol} and ${right.symbol}. ` + `Provide both amounts in the same currency to perform this operation.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'CurrencyMismatchError');
    this.left = left;
    this.right = right;
    this.operation = operation;
  }
}

/** @group Errors */
class InvalidJsonVariableError extends SdkError {
  constructor(cause) {
    super('The provided JSON variable could not be parsed into a string.', cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'InvalidJsonVariableError');
  }
}

/** @group Errors */
class InvalidJsonStringError extends SdkError {
  constructor(cause) {
    super('The provided string could not be parsed into a JSON variable.', cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'InvalidJsonStringError');
  }
}

/** @group Errors */
class OperationUnauthorizedForGuestsError extends SdkError {
  constructor(operation) {
    const message = `Trying to access the [${operation}] operation as a guest. ` + `Ensure your wallet is connected using the identity driver. ` + `For instance, by using "metaplex.use(walletAdapterIdentity(wallet))" or ` + `"metaplex.use(keypairIdentity(keypair))".`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'OperationUnauthorizedForGuestsError');
  }
}

/** @group Errors */
class UninitializedWalletAdapterError extends SdkError {
  constructor() {
    const message = `The current wallet adapter is not initialized. ` + 'You likely have selected a wallet adapter but forgot to initialize it. ' + 'You may do this by running the following asynchronous method: "wallet.connect();".';
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'UninitializedWalletAdapterError');
  }
}

/** @group Errors */
class OperationNotSupportedByWalletAdapterError extends SdkError {
  constructor(operation) {
    const message = `The current wallet adapter does not support the following operation: [${operation}]. ` + 'Ensure your wallet is connected using a compatible wallet adapter.';
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'OperationNotSupportedByWalletAdapterError');
  }
}

/** @group Errors */
class TaskIsAlreadyRunningError extends SdkError {
  constructor() {
    const message = `Trying to re-run a task that hasn't completed yet. ` + `Ensure the task has completed using "await" before trying to run it again.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'TaskIsAlreadyRunningError');
  }
}

/** @group Errors */
class AssetNotFoundError extends SdkError {
  constructor(location) {
    super(`The asset at [${location}] could not be found.`);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'AssetNotFoundError');
  }
}

/** @group Errors */
class AccountNotFoundError extends SdkError {
  constructor(address, accountType, solution) {
    const message = (accountType ? `The account of type [${accountType}] was not found` : 'No account was found') + ` at the provided address [${address.toString()}].` + (solution ? ` ${solution}` : '');
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'AccountNotFoundError');
  }
}

/** @group Errors */
class UnexpectedAccountError extends SdkError {
  constructor(address, expectedType, cause) {
    const message = `The account at the provided address [${address.toString()}] ` + `is not of the expected type [${expectedType}].`;
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'UnexpectedAccountError');
  }
}

/** @group Errors */
class UnexpectedTypeError extends SdkError {
  constructor(variable, actualType, expectedType) {
    const message = `Expected variable [${variable}] to be ` + `of type [${expectedType}] but got [${actualType}].`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'UnexpectedTypeError');
  }
}

/** @group Errors */
class ExpectedSignerError extends SdkError {
  constructor(variable, actualType, solution) {
    const message = `Expected variable [${variable}] to be of type [Signer] but got [${actualType}]. ` + (solution ?? 'Please check that you are providing the variable as a signer. ' + 'Note that, it may be allowed to provide a non-signer variable for certain use cases but not this one.');
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'ExpectedSignerError');
  }
}

/** @group Errors */
class ProgramNotRecognizedError extends SdkError {
  constructor(nameOrAddress, cluster) {
    const isName = typeof nameOrAddress === 'string';
    const toString = isName ? nameOrAddress : nameOrAddress.toString();
    const message = `The provided program ${isName ? 'name' : 'address'} [${toString}] ` + `is not recognized in the [${cluster}] cluster.` + 'Did you forget to register this program? ' + 'If so, you may use "metaplex.programs().register(myProgram)" to fix this.';
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'ProgramNotRecognizedError');
    this.nameOrAddress = nameOrAddress;
    this.cluster = cluster;
  }
}

/** @group Errors */
class NoInstructionsToSendError extends SdkError {
  constructor(operation, solution) {
    const message = `The input provided to the [${operation}] resulted ` + `in a Transaction containing no Instructions. ` + (solution ?? `Ensure that the provided input has an effect on the operation. ` + `This typically happens when trying to update an account with ` + `the same data it already contains.`);
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'NoInstructionsToSendError');
  }
}

/** @group Errors */
class FailedToSerializeDataError extends SdkError {
  constructor(dataDescription, cause) {
    const message = `The received data could not be serialized as a [${dataDescription}].`;
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToSerializeDataError');
  }
}

/** @group Errors */
class FailedToDeserializeDataError extends SdkError {
  constructor(dataDescription, cause) {
    const message = `The received serialized data could not be deserialized to a [${dataDescription}].`;
    super(message, cause);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'FailedToDeserializeDataError');
  }
}

/** @group Errors */
class MissingInputDataError extends SdkError {
  constructor(missingParameters, solution) {
    const message = `Some parameters are missing from the provided input object. ` + 'Please provide the following missing parameters ' + `[${missingParameters.join(', ')}].` + (solution ? ` ${solution}` : '');
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'MissingInputDataError');
  }
}

/** @group Errors */
class NotYetImplementedError extends SdkError {
  constructor() {
    const message = `This feature is not yet implemented. Please check back later.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'NotYetImplementedError');
  }
}

/** @group Errors */
class UnreachableCaseError extends SdkError {
  constructor(value) {
    const message = `A switch statement is not handling the provided case [${value}]. ` + `Check your inputs or raise an issue to have ensure all cases are handled properly.`;
    super(message);
    _rollupPluginBabelHelpers.defineProperty(this, "name", 'UnreachableCaseError');
  }
}

exports.AccountNotFoundError = AccountNotFoundError;
exports.AssetNotFoundError = AssetNotFoundError;
exports.CurrencyMismatchError = CurrencyMismatchError;
exports.DriverNotProvidedError = DriverNotProvidedError;
exports.ExpectedSignerError = ExpectedSignerError;
exports.FailedToDeserializeDataError = FailedToDeserializeDataError;
exports.FailedToSerializeDataError = FailedToSerializeDataError;
exports.InvalidJsonStringError = InvalidJsonStringError;
exports.InvalidJsonVariableError = InvalidJsonVariableError;
exports.MissingInputDataError = MissingInputDataError;
exports.NoInstructionsToSendError = NoInstructionsToSendError;
exports.NotYetImplementedError = NotYetImplementedError;
exports.OperationHandlerMissingError = OperationHandlerMissingError;
exports.OperationNotSupportedByWalletAdapterError = OperationNotSupportedByWalletAdapterError;
exports.OperationUnauthorizedForGuestsError = OperationUnauthorizedForGuestsError;
exports.ProgramNotRecognizedError = ProgramNotRecognizedError;
exports.SdkError = SdkError;
exports.TaskIsAlreadyRunningError = TaskIsAlreadyRunningError;
exports.UnexpectedAccountError = UnexpectedAccountError;
exports.UnexpectedCurrencyError = UnexpectedCurrencyError;
exports.UnexpectedTypeError = UnexpectedTypeError;
exports.UninitializedWalletAdapterError = UninitializedWalletAdapterError;
exports.UnreachableCaseError = UnreachableCaseError;
//# sourceMappingURL=SdkError.cjs.map
