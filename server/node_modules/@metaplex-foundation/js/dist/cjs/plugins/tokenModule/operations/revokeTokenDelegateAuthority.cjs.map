{"version":3,"file":"revokeTokenDelegateAuthority.cjs","sources":["../../../../../src/plugins/tokenModule/operations/revokeTokenDelegateAuthority.ts"],"sourcesContent":["import { createRevokeInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeTokenDelegateAuthorityOperation' as const;\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .revokeDelegateAuthority({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityOperation =\n  useOperation<RevokeTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  RevokeTokenDelegateAuthorityInput,\n  RevokeTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityInput = {\n  mintAddress: PublicKey;\n\n  /**\n   * The owner of the token account as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer | PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeTokenDelegateAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeTokenDelegateAuthorityOperationHandler: OperationHandler<RevokeTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeTokenDelegateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeTokenDelegateAuthorityOutput> => {\n      return revokeTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityBuilderParams = Omit<\n  RevokeTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the delegated authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .builders()\n *   .revokeDelegateAuthority({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeTokenDelegateAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAccount =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: ownerPublicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createRevokeInstruction(\n        tokenAccount,\n        ownerPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'revokeDelegateAuthority',\n    });\n};\n"],"names":["Key","revokeTokenDelegateAuthorityOperation","useOperation","revokeTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","scope","revokeTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","owner","identity","tokenAddress","multiSigners","ownerPublicKey","signers","isSigner","publicKey","tokenProgram","getToken","tokenAccount","tokens","pdas","associatedTokenAccount","mint","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeInstruction","address","key","instructionKey"],"mappings":";;;;;;;;;AAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAgD,CAAA;;AAE5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,qCAAqC,GAChDC,sBAAY,CAAwCF,GAAG,EAAC;;AAE1D;AACA;AACA;AACA;;AAiDA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAgD,EAChDC,QAAkB,EAClBC,KAAqB,KAC2B;AAChD,IAAA,OAAOC,mCAAmC,CACxCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,mCAAmC,GAAG,CACjDF,QAAkB,EAClBM,MAAiD,EACjDC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;AACXC,IAAAA,KAAK,GAAGb,QAAQ,CAACc,QAAQ,EAAE;IAC3BC,YAAY;AACZC,IAAAA,YAAY,GAAG,EAAA;AACjB,GAAC,GAAGV,MAAM,CAAA;EAEV,MAAM,CAACW,cAAc,EAAEC,OAAO,CAAC,GAAGC,eAAQ,CAACN,KAAK,CAAC,GAC7C,CAACA,KAAK,CAACO,SAAS,EAAE,CAACP,KAAK,CAAC,CAAC,GAC1B,CAACA,KAAK,EAAEG,YAAY,CAAC,CAAA;EAEzB,MAAMK,YAAY,GAAGrB,QAAQ,CAACQ,QAAQ,EAAE,CAACc,QAAQ,CAACd,QAAQ,CAAC,CAAA;AAC3D,EAAA,MAAMe,YAAY,GAChBR,YAAY,IACZf,QAAQ,CAACwB,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;AAC9CC,IAAAA,IAAI,EAAEf,WAAW;AACjBC,IAAAA,KAAK,EAAEI,cAAc;AACrBT,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEJ,OAAOoB,qCAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACrB,KAAK,CAAC,CAClBsB,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEC,gCAAuB,CAClCV,YAAY,EACZN,cAAc,EACdD,YAAY,EACZK,YAAY,CAACa,OAAO,CACrB;IACDhB,OAAO;AACPiB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAc,IAAI,yBAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}