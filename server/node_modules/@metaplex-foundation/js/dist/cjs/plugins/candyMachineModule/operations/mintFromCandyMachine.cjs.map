{"version":3,"file":"mintFromCandyMachine.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/mintFromCandyMachine.ts"],"sourcesContent":["import { createMintInstruction as createMintFromGuardInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { createMintInstruction as createMintFromMachineInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport {\n  Keypair,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n  SYSVAR_SLOT_HASHES_PUBKEY,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyMachineBotTaxError } from '../errors';\nimport {\n  CandyGuardsMintSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardMintSettings,\n  DefaultCandyGuardSettings,\n} from '../guards';\nimport { CandyMachine } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  token as tokenAmount,\n} from '@/types';\nimport { NftWithToken } from '@/plugins/nftModule';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintFromCandyMachineOperation' as const;\n\n/**\n * Mints the next NFT from a given candy machine.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .candyMachines()\n *   .mint({\n *     candyMachine,\n *     collectionUpdateAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintFromCandyMachineOperation = _mintFromCandyMachineOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _mintFromCandyMachineOperation<\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n>(\n  input: MintFromCandyMachineInput<Settings, MintSettings>\n): MintFromCandyMachineOperation<Settings, MintSettings> {\n  return { key: Key, input };\n}\n_mintFromCandyMachineOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintFromCandyMachineOperation<\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n> = Operation<\n  typeof Key,\n  MintFromCandyMachineInput<Settings, MintSettings>,\n  MintFromCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintFromCandyMachineInput<\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n> = {\n  /**\n   * The Candy Machine to mint from.\n   * We only need a subset of the `CandyMachine` model but we\n   * need enough information regarding its settings to know how\n   * to mint from it.\n   *\n   * This includes its address, the address of its Collection NFT and,\n   * optionally, the Candy Guard account associated with it.\n   */\n  candyMachine: Pick<\n    CandyMachine<Settings>,\n    'address' | 'collectionMintAddress' | 'candyGuard'\n  >;\n\n  /**\n   * The address of the update authority of the Collection NFT\n   * that is being assigned to each minted NFT.\n   */\n  collectionUpdateAuthority: PublicKey;\n\n  /**\n   * The authority that is allowed to mint NFTs from the Candy Machine.\n   *\n   * @defaultValue\n   * `metaplex.identity()` if the Candy Machine has no associated Candy Guard.\n   * Otherwise, this parameter will be ignored.\n   */\n  mintAuthority?: Signer;\n\n  /**\n   * The mint account to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  mint?: Signer;\n\n  /**\n   * The owner of the minted NFT.\n   *\n   * Defaults to the wallet that is paying for it, i.e. `payer`.\n   *\n   * @defaultValue `payer.publicKey`\n   */\n  owner?: PublicKey;\n\n  /**\n   * The new token account to create as a Signer.\n   *\n   * This property would typically be ignored as, by default, it will create a\n   * associated token account from the `owner` and `mint` properties.\n   *\n   * When provided, the `owner` property will be ignored.\n   *\n   * @defaultValue associated token address of `owner` and `mint`.\n   */\n  token?: Signer;\n\n  /**\n   * The label of the group to mint from.\n   *\n   * If groups are configured on the Candy Machine,\n   * you must specify a group label to mint from.\n   *\n   * When set to `null` it will mint using the default\n   * guards, provided no groups are configured.\n   *\n   * @defaultValue `null`\n   */\n  group?: Option<string>;\n\n  /**\n   * Guard-specific data required to mint from the Candy Machine.\n   *\n   * Some guards require additional data to be provided at mint time.\n   * For instance, the `allowList` guard will require a Merkle proof\n   * ensuring the minting address is allowed to mint.\n   *\n   * You only need to provide configuration data for the guards\n   * that are set up within the group your are minting from.\n   *\n   * @defaultValue `{}`\n   */\n  guards?: Partial<MintSettings>;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintFromCandyMachineOutput = {\n  /** The minted NFT. */\n  nft: NftWithToken;\n\n  /** The mint account of the minted NFT as a Signer. */\n  mintSigner: Signer;\n\n  /** The address of the minted NFT's token account. */\n  tokenAddress: PublicKey;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintFromCandyMachineOperationHandler: OperationHandler<MintFromCandyMachineOperation> =\n  {\n    async handle<\n      Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n      MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n    >(\n      operation: MintFromCandyMachineOperation<Settings, MintSettings>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MintFromCandyMachineOutput> {\n      const builder = await mintFromCandyMachineBuilder<Settings, MintSettings>(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      let nft: NftWithToken;\n      try {\n        nft = (await metaplex.nfts().findByMint(\n          {\n            mintAddress: output.mintSigner.publicKey,\n            tokenAddress: output.tokenAddress,\n          },\n          scope\n        )) as NftWithToken;\n      } catch (error) {\n        const { candyGuard } = operation.input.candyMachine;\n        if (!candyGuard) {\n          throw error;\n        }\n\n        const activeGuards = metaplex\n          .candyMachines()\n          .guards()\n          .resolveGroupSettings(\n            candyGuard.guards,\n            candyGuard.groups,\n            operation.input.group ?? null\n          );\n\n        if (!('botTax' in activeGuards)) {\n          throw error;\n        }\n\n        throw new CandyMachineBotTaxError(\n          metaplex.rpc().getSolanaExporerUrl(output.response.signature),\n          error as Error\n        );\n      }\n\n      return { nft, ...output };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintFromCandyMachineBuilderParams<\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n> = Omit<\n  MintFromCandyMachineInput<Settings, MintSettings>,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the mint account of the NFT. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account of the NFT. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associated token account of the NFT. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account of the NFT. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account of the NFT. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints the one token. */\n  mintTokensInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints from the Candy Machine. */\n  mintFromCandyMachineInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type MintFromCandyMachineBuilderContext = Omit<\n  MintFromCandyMachineOutput,\n  'response' | 'nft'\n>;\n\n/**\n * Mints the next NFT from a given candy machine.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .mint({\n *     candyMachine,\n *     collectionUpdateAuthority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintFromCandyMachineBuilder = async <\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  MintSettings extends CandyGuardsMintSettings = DefaultCandyGuardMintSettings\n>(\n  metaplex: Metaplex,\n  params: MintFromCandyMachineBuilderParams<Settings, MintSettings>,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<MintFromCandyMachineBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    collectionUpdateAuthority,\n    mintAuthority = metaplex.identity(),\n    mint = Keypair.generate(),\n    owner = payer.publicKey,\n    group = null,\n    guards = {},\n    token,\n  } = params;\n\n  // Programs.\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // PDAs.\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachine.address,\n    programs,\n  });\n  const nftMetadata = metaplex.nfts().pdas().metadata({\n    mint: mint.publicKey,\n    programs,\n  });\n  const nftMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: mint.publicKey,\n    programs,\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: candyMachine.collectionMintAddress,\n    programs,\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: candyMachine.collectionMintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: candyMachine.collectionMintAddress,\n      collectionAuthority: authorityPda,\n      programs,\n    });\n\n  // Transaction Builder that prepares the mint and token accounts.\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint(\n      {\n        decimals: 0,\n        initialSupply: tokenAmount(1),\n        mint,\n        mintAuthority: payer,\n        freezeAuthority: payer.publicKey,\n        owner,\n        token,\n        createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n        initializeMintInstructionKey: params.initializeMintInstructionKey,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey,\n        createTokenAccountInstructionKey:\n          params.createTokenAccountInstructionKey,\n        initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      },\n      { payer, programs }\n    );\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n\n  // Shared mint accounts\n  const sharedMintAccounts = {\n    candyMachine: candyMachine.address,\n    payer: payer.publicKey,\n    nftMetadata,\n    nftMint: mint.publicKey,\n    nftMintAuthority: payer.publicKey,\n    nftMasterEdition,\n    collectionAuthorityRecord,\n    collectionMint: candyMachine.collectionMintAddress,\n    collectionMetadata,\n    collectionMasterEdition,\n    collectionUpdateAuthority,\n    candyMachineProgram: candyMachineProgram.address,\n    tokenMetadataProgram: tokenMetadataProgram.address,\n    tokenProgram: tokenProgram.address,\n    systemProgram: systemProgram.address,\n    recentSlothashes: SYSVAR_SLOT_HASHES_PUBKEY,\n    instructionSysvarAccount: SYSVAR_INSTRUCTIONS_PUBKEY,\n  };\n\n  // Mint instruction.\n  let mintNftInstruction: TransactionInstruction;\n  let mintNftSigners: Signer[];\n  if (!!candyMachine.candyGuard) {\n    const { candyGuard } = candyMachine;\n    const guardClient = metaplex.candyMachines().guards();\n    const parsedMintSettings = guardClient.parseMintSettings(\n      candyMachine.address,\n      candyGuard,\n      owner,\n      payer,\n      mint,\n      guards,\n      group,\n      programs\n    );\n\n    mintNftSigners = [payer, mint, ...parsedMintSettings.signers];\n    mintNftInstruction = createMintFromGuardInstruction(\n      {\n        ...sharedMintAccounts,\n        candyGuard: candyMachine.candyGuard.address,\n        candyMachineAuthorityPda: authorityPda,\n      },\n      {\n        mintArgs: parsedMintSettings.arguments,\n        label: group,\n      },\n      candyGuardProgram.address\n    );\n    mintNftInstruction.keys.push(...parsedMintSettings.accountMetas);\n  } else {\n    mintNftSigners = [payer, mint, mintAuthority];\n    mintNftInstruction = createMintFromMachineInstruction(\n      {\n        ...sharedMintAccounts,\n        authorityPda,\n        mintAuthority: mintAuthority.publicKey,\n      },\n      candyMachineProgram.address\n    );\n  }\n\n  return (\n    TransactionBuilder.make<MintFromCandyMachineBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ tokenAddress, mintSigner: mint })\n\n      // Create token and mint accounts.\n      .add(tokenWithMintBuilder)\n\n      // Mint the new NFT.\n      .add({\n        instruction: mintNftInstruction,\n        signers: mintNftSigners,\n        key: params.mintFromCandyMachineInstructionKey ?? 'mintNft',\n      })\n  );\n};\n"],"names":["Key","mintFromCandyMachineOperation","_mintFromCandyMachineOperation","input","key","mintFromCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","mintFromCandyMachineBuilder","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","nft","nfts","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","error","candyGuard","candyMachine","activeGuards","candyMachines","guards","resolveGroupSettings","groups","group","CandyMachineBotTaxError","rpc","getSolanaExporerUrl","response","signature","params","options","programs","payer","getDefaultFeePayer","collectionUpdateAuthority","mintAuthority","identity","mint","Keypair","generate","owner","token","candyMachineProgram","getCandyMachine","candyGuardProgram","getCandyGuard","tokenMetadataProgram","getTokenMetadata","tokenProgram","getToken","systemProgram","getSystem","authorityPda","pdas","authority","address","nftMetadata","metadata","nftMasterEdition","masterEdition","collectionMetadata","collectionMintAddress","collectionMasterEdition","collectionAuthorityRecord","collectionAuthority","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","tokenAmount","freezeAuthority","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","sharedMintAccounts","nftMint","nftMintAuthority","collectionMint","recentSlothashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","mintNftInstruction","mintNftSigners","guardClient","parsedMintSettings","parseMintSettings","signers","createMintFromGuardInstruction","candyMachineAuthorityPda","mintArgs","arguments","label","keys","push","accountMetas","createMintFromMachineInstruction","TransactionBuilder","make","setFeePayer","setContext","add","instruction","mintFromCandyMachineInstructionKey"],"mappings":"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"}