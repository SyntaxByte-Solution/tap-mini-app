import { PublicKey, Signer, SplTokenAmount } from '../../../types';
/**
 * The freezeTokenPayment guard allows minting frozen NFTs by charging
 * the payer a specific amount of tokens from a certain mint acount.
 * Frozen NFTs cannot be transferred or listed on any marketplaces until thawed.
 *
 * The funds are transferred to a freeze escrow until all NFTs are thaw,
 * at which point, they can be transferred (unlocked) to the configured
 * destination account.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 *
 * @see {@link FreezeTokenPaymentGuardRouteSettings} to learn more about
 * the instructions that can be executed against this guard.
 */
export type FreezeTokenPaymentGuardSettings = {
    /** The mint address of the required tokens. */
    mint: PublicKey;
    /** The amount of tokens required to mint an NFT. */
    amount: SplTokenAmount;
    /** The associated token address to send the tokens to. */
    destinationAta: PublicKey;
};
/**
 * The settings for the freezeTokenPayment guard that should be provided
 * when accessing the guard's special "route" instruction.
 *
 * ## Initialize
 * The `initialize` path creates the freeze escrow account that will
 * hold the funds until all NFTs are thawed. It must be called before
 * any NFTs can be minted.
 *
 * ```ts
 * await metaplex.candyMachines().callGuardRoute({
 *   candyMachine,
 *   guard: 'freezeTokenPayment',
 *   settings: {
 *     path: 'initialize',
 *     period: 15 * 24 * 60 * 60, // 15 days.
 *     candyGuardAuthority,
 *   },
 * });
 * ```
 *
 * ## Thaw
 * The `thaw` path unfreezes one NFT if one of the following conditions are met:
 * - All NFTs have been minted.
 * - The configured period has elapsed (max 30 days).
 * - The Candy Machine account was deleted.
 *
 * Anyone can call this instruction. Since the funds are not transferrable
 * until all NFTs are thawed, it creates an incentive for the treasury to
 * thaw all NFTs as soon as possible.
 *
 * ```ts
 * await metaplex.candyMachines().callGuardRoute({
 *   candyMachine,
 *   guard: 'freezeTokenPayment',
 *   settings: {
 *     path: 'thaw',
 *     nftMint: nftToThaw.address,
 *     nftOwner: nftToThaw.token.ownerAddress,
 *   },
 * });
 * ```
 *
 * ## Unlock Funds
 * The `unlockFunds` path transfers all of the escrow funds to the
 * configured destination token address once all NFTs have been thawed.
 *
 * ```ts
 * await metaplex.candyMachines().callGuardRoute({
 *   candyMachine,
 *   guard: 'freezeTokenPayment',
 *   settings: {
 *     path: 'unlockFunds',
 *     candyGuardAuthority,
 *   },
 * });
 * ```
 *
 * @see {@link FreezeTokenPaymentGuardSettings} for more
 * information on the freezeTokenPayment guard itself.
 */
export type FreezeTokenPaymentGuardRouteSettings = {
    /** Selects the path to execute in the route instruction. */
    path: 'initialize';
    /** The freeze period in seconds (maximum 30 days). */
    period: number;
    /** The authority of the Candy Guard as a Signer. */
    candyGuardAuthority: Signer;
} | {
    /** Selects the path to execute in the route instruction. */
    path: 'thaw';
    /** The mint address of the NFT to thaw. */
    nftMint: PublicKey;
    /** The owner address of the NFT to thaw. */
    nftOwner: PublicKey;
} | {
    /** Selects the path to execute in the route instruction. */
    path: 'unlockFunds';
    /** The authority of the Candy Guard as a Signer. */
    candyGuardAuthority: Signer;
};
