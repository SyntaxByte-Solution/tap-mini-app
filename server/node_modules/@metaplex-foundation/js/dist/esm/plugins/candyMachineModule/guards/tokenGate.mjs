import { tokenGateBeet } from '@metaplex-foundation/mpl-candy-guard';
import { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';
import { token } from '../../../types/Amount.mjs';

/**
 * The tokenGate guard restricts minting to token holders
 * of a specified mint account. The `amount` determines
 * how many tokens are required.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 */

/** @internal */
const tokenGateGuardManifest = {
  name: 'tokenGate',
  settingsBytes: 40,
  settingsSerializer: mapSerializer(createSerializerFromBeet(tokenGateBeet), settings => ({
    ...settings,
    amount: token(settings.amount)
  }), settings => ({
    ...settings,
    amount: settings.amount.basisPoints
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    programs
  }) => {
    const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({
      mint: settings.mint,
      owner: payer.publicKey,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        isSigner: false,
        address: tokenAccount,
        isWritable: false
      }]
    };
  }
};

export { tokenGateGuardManifest };
//# sourceMappingURL=tokenGate.mjs.map
