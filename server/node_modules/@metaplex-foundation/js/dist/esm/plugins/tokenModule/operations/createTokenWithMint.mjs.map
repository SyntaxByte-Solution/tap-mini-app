{"version":3,"file":"createTokenWithMint.mjs","sources":["../../../../../src/plugins/tokenModule/operations/createTokenWithMint.ts"],"sourcesContent":["import { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { MintAuthorityMustBeSignerToMintInitialSupplyError } from '../errors';\nimport { TokenWithMint } from '../models/Token';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenWithMintOperation' as const;\n\n/**\n * Creates both mint and token accounts in the same transaction.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * const mint = token.mint;\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createTokenWithMintOperation =\n  useOperation<CreateTokenWithMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateTokenWithMintOperation = Operation<\n  typeof Key,\n  CreateTokenWithMintInput,\n  CreateTokenWithMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateTokenWithMintInput = {\n  /**\n   * The number of decimal points used to define token amounts.\n   *\n   * @defaultValue `0`\n   */\n  decimals?: number;\n\n  /**\n   * The initial amount of tokens to mint to the new token account.\n   *\n   * @defaultValue `0`\n   */\n  initialSupply?: SplTokenAmount;\n\n  /**\n   * The address of the new mint account as a Signer.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  mint?: Signer;\n\n  /**\n   * The address of the authority that is allowed\n   * to mint new tokens to token accounts.\n   *\n   * It may be required as a Signer in order to\n   * mint the initial supply.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: Signer | PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to freeze token accounts.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  freezeAuthority?: Option<PublicKey>;\n\n  /**\n   * The address of the owner of the new token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  owner?: PublicKey;\n\n  /**\n   * The token account as a Signer if we want to create\n   * a new token account with a specific address instead of\n   * creating a new associated token account.\n   *\n   * @defaultValue Defaults to creating a new associated token account\n   * using the `mint` and `owner` parameters.\n   */\n  token?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateTokenWithMintOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The new mint account as a Signer. */\n  mintSigner: Signer;\n\n  /**\n   * A model representing the newly created token\n   * account and its associated mint account.\n   */\n  token: TokenWithMint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createTokenWithMintOperationHandler: OperationHandler<CreateTokenWithMintOperation> =\n  {\n    async handle(\n      operation: CreateTokenWithMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateTokenWithMintOutput> {\n      const builder = await createTokenWithMintBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const token = await metaplex.tokens().findTokenWithMintByMint(\n        {\n          mint: output.mintSigner.publicKey,\n          address: output.tokenAddress,\n          addressType: 'token',\n        },\n        scope\n      );\n\n      return { ...output, token };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenWithMintBuilderParams = Omit<\n  CreateTokenWithMintInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the mint account. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associates token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens to the token account. */\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateTokenWithMintBuilderContext = {\n  /** The mint account to create as a Signer. */\n  mintSigner: Signer;\n\n  /** The computed address of the token account to create. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * Creates both mint and token accounts in the same transaction.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createTokenWithMint();\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createTokenWithMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenWithMintBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateTokenWithMintBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    decimals = 0,\n    initialSupply,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    owner = metaplex.identity().publicKey,\n    token,\n  } = params;\n\n  const createMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createMint(\n      {\n        decimals,\n        mint,\n        mintAuthority: toPublicKey(mintAuthority),\n        freezeAuthority,\n        createAccountInstructionKey:\n          params.createMintAccountInstructionKey ?? 'createMintAccount',\n        initializeMintInstructionKey:\n          params.initializeMintInstructionKey ?? 'initializeMint',\n      },\n      { programs, payer }\n    );\n\n  const createTokenBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createToken(\n      {\n        mint: mint.publicKey,\n        owner,\n        token,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey ??\n          'createAssociatedTokenAccount',\n        createAccountInstructionKey:\n          params.createTokenAccountInstructionKey ?? 'createTokenAccount',\n        initializeTokenInstructionKey:\n          params.initializeTokenInstructionKey ?? 'initializeToken',\n      },\n      { payer, programs }\n    );\n\n  const { tokenAddress } = createTokenBuilder.getContext();\n\n  const builder = TransactionBuilder.make<CreateTokenWithMintBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ mintSigner: mint, tokenAddress })\n\n    // Create the Mint account.\n    .add(createMintBuilder)\n\n    // Create the Token account.\n    .add(createTokenBuilder);\n\n  // Potentially mint the initial supply to the token account.\n  if (!!initialSupply) {\n    if (!isSigner(mintAuthority)) {\n      throw new MintAuthorityMustBeSignerToMintInitialSupplyError();\n    }\n\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .mint(\n          {\n            mintAddress: mint.publicKey,\n            toToken: tokenAddress,\n            amount: initialSupply,\n            mintAuthority,\n            mintTokensInstructionKey:\n              params.mintTokensInstructionKey ?? 'mintTokens',\n          },\n          { payer, programs }\n        )\n    );\n  }\n\n  return builder;\n};\n"],"names":["Key","createTokenWithMintOperation","useOperation","createTokenWithMintOperationHandler","handle","operation","metaplex","scope","builder","createTokenWithMintBuilder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","token","tokens","findTokenWithMintByMint","mint","mintSigner","publicKey","address","tokenAddress","addressType","params","options","programs","payer","rpc","getDefaultFeePayer","decimals","initialSupply","Keypair","generate","mintAuthority","identity","freezeAuthority","owner","createMintBuilder","builders","createMint","toPublicKey","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","createTokenBuilder","createToken","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","getContext","TransactionBuilder","make","setFeePayer","setContext","add","isSigner","MintAuthorityMustBeSignerToMintInitialSupplyError","mintAddress","toToken","amount","mintTokensInstructionKey"],"mappings":"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"}