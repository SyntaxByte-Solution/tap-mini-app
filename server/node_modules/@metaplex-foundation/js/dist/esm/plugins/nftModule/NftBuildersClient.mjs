import { createNftBuilder } from './operations/createNft.mjs';
import { createSftBuilder } from './operations/createSft.mjs';
import { printNewEditionBuilder } from './operations/printNewEdition.mjs';
import { updateNftBuilder } from './operations/updateNft.mjs';
import { deleteNftBuilder } from './operations/deleteNft.mjs';
import { approveNftDelegateBuilder } from './operations/approveNftDelegate.mjs';
import { revokeNftDelegateBuilder } from './operations/revokeNftDelegate.mjs';
import { useNftBuilder } from './operations/useNft.mjs';
import { approveNftUseAuthorityBuilder } from './operations/approveNftUseAuthority.mjs';
import { revokeNftUseAuthorityBuilder } from './operations/revokeNftUseAuthority.mjs';
import { verifyNftCreatorBuilder } from './operations/verifyNftCreator.mjs';
import { unverifyNftCreatorBuilder } from './operations/unverifyNftCreator.mjs';
import { verifyNftCollectionBuilder } from './operations/verifyNftCollection.mjs';
import { unverifyNftCollectionBuilder } from './operations/unverifyNftCollection.mjs';
import { approveNftCollectionAuthorityBuilder } from './operations/approveNftCollectionAuthority.mjs';
import { revokeNftCollectionAuthorityBuilder } from './operations/revokeNftCollectionAuthority.mjs';
import { migrateToSizedCollectionNftBuilder } from './operations/migrateToSizedCollectionNft.mjs';
import { lockNftBuilder } from './operations/lockNft.mjs';
import { unlockNftBuilder } from './operations/unlockNft.mjs';
import { mintNftBuilder } from './operations/mintNft.mjs';
import { transferNftBuilder } from './operations/transferNft.mjs';
import { freezeDelegatedNftBuilder } from './operations/freezeDelegatedNft.mjs';
import { thawDelegatedNftBuilder } from './operations/thawDelegatedNft.mjs';

/**
 * This client allows you to access the underlying Transaction Builders
 * for the write operations of the NFT module.
 *
 * @see {@link NftClient}
 * @group Module Builders
 * */
class NftBuildersClient {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  // -----------------
  // Create, Update and Delete
  // -----------------

  /** {@inheritDoc createNftBuilder} */
  create(input, options) {
    return createNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc createSftBuilder} */
  createSft(input, options) {
    return createSftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc printNewEditionBuilder} */
  printNewEdition(input, options) {
    return printNewEditionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc updateNftBuilder} */
  update(input, options) {
    return updateNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc deleteNftBuilder} */
  delete(input, options) {
    return deleteNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Delegates
  // -----------------

  /** {@inheritDoc approveNftDelegateBuilder} */
  delegate(input, options) {
    return approveNftDelegateBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftDelegateBuilder} */
  revoke(input, options) {
    return revokeNftDelegateBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Use
  // -----------------

  /** {@inheritDoc useNftBuilder} */
  use(input, options) {
    return useNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc approveNftUseAuthorityBuilder} */
  approveUseAuthority(input, options) {
    return approveNftUseAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftUseAuthorityBuilder} */
  revokeUseAuthority(input, options) {
    return revokeNftUseAuthorityBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Creators
  // -----------------

  /** {@inheritDoc verifyNftCreatorBuilder} */
  verifyCreator(input, options) {
    return verifyNftCreatorBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unverifyNftCreatorBuilder} */
  unverifyCreator(input, options) {
    return unverifyNftCreatorBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Collections
  // -----------------

  /** {@inheritDoc verifyNftCollectionBuilder} */
  verifyCollection(input, options) {
    return verifyNftCollectionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unverifyNftCollectionBuilder} */
  unverifyCollection(input, options) {
    return unverifyNftCollectionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc approveNftCollectionAuthorityBuilder} */
  approveCollectionAuthority(input, options) {
    return approveNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftCollectionAuthorityBuilder} */
  revokeCollectionAuthority(input, options) {
    return revokeNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc migrateToSizedCollectionNftBuilder} */
  migrateToSizedCollection(input, options) {
    return migrateToSizedCollectionNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Programmables
  // -----------------

  /** {@inheritDoc lockNftBuilder} */
  lock(input, options) {
    return lockNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unlockNftBuilder} */
  unlock(input, options) {
    return unlockNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Token
  // -----------------

  /** {@inheritDoc mintNftBuilder} */
  mint(input, options) {
    return mintNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc transferNftBuilder} */
  transfer(input, options) {
    return transferNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc freezeDelegatedNftBuilder} */
  freezeDelegatedNft(input, options) {
    return freezeDelegatedNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc thawDelegatedNftBuilder} */
  thawDelegatedNft(input, options) {
    return thawDelegatedNftBuilder(this.metaplex, input, options);
  }
}

export { NftBuildersClient };
//# sourceMappingURL=NftBuildersClient.mjs.map
