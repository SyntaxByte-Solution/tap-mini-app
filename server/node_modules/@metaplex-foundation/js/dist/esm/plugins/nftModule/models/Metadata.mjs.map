{"version":3,"file":"Metadata.mjs","sources":["../../../../../src/plugins/nftModule/models/Metadata.ts"],"sourcesContent":["import {\n  ProgrammableConfig,\n  TokenStandard,\n  UseMethod,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { MetadataAccount } from '../accounts';\nimport { JsonMetadata } from './JsonMetadata';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport {\n  BigNumber,\n  Creator,\n  Pda,\n  toBigNumber,\n  ReadApiCompressionMetadata,\n} from '@/types';\n\n/** @group Models */\nexport type Metadata<Json extends object = JsonMetadata> = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'metadata';\n\n  /** The address of the Metadata account. */\n  readonly address: Pda;\n\n  /** The address of the Mint account. */\n  readonly mintAddress: PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to make changes to the Metadata account.\n   */\n  readonly updateAuthorityAddress: PublicKey;\n\n  /** The JSON metadata associated with the metadata account. */\n  readonly json: Option<Json>;\n\n  /**\n   * Whether or not the JSON metadata was loaded in the first place.\n   * When this is `false`, the `json` property is should be ignored.\n   */\n  readonly jsonLoaded: boolean;\n\n  /**\n   * The on-chain name of the asset, stored in the Metadata account.\n   * E.g. \"My NFT #123\"\n   */\n  readonly name: string;\n\n  /**\n   * The on-chain symbol of the asset, stored in the Metadata account.\n   * E.g. \"MYNFT\"\n   */\n  readonly symbol: string;\n\n  /**\n   * The URI that points to the JSON metadata of the asset.\n   * This URI is used to load the `json` property of this object.\n   */\n  readonly uri: string;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   */\n  readonly isMutable: boolean;\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * When set to `false`, all royalties should be paid to the creators.\n   * When set to `true`, royalties should be calculate as usual.\n   */\n  readonly primarySaleHappened: boolean;\n\n  /**\n   * The royalties in percent basis point (i.e. 250 is 2.5%) that\n   * should be paid to the creators on each secondary sale.\n   */\n  readonly sellerFeeBasisPoints: number;\n\n  /** Stores the bump of the edition PDA. */\n  readonly editionNonce: Option<number>;\n\n  /**\n   * The creators of the asset.\n   * Each object within the array contains the address,\n   * the shares in percent (i.e. 5 is 5%) and whether or not the\n   * creator is verified (i.e. they signed the asset).\n   */\n  readonly creators: Creator[];\n\n  /**\n   * This enum indicates which type of asset we are dealing with.\n   * It can be an NFT, a limited edition of an original NFT,\n   * a fungible asset (i.e. it has zero decimals)\n   * or a fungible token (i.e. it has more than zero decimals).\n   */\n  readonly tokenStandard: Option<TokenStandard>;\n\n  /**\n   * The parent collection the asset belongs to.\n   */\n  readonly collection: Option<{\n    /** The mint address of the collection asset. */\n    address: PublicKey;\n\n    /**\n     * Whether a collection authority signed this asset to\n     * ensure it is part of the collection.\n     * If `verified` is `false`, you should not trust\n     * the asset as being part of the collection.\n     */\n    verified: boolean;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that\n   * the asset is a collection. Every time an asset is\n   * verified/unverified as part of this collection,\n   * the `size` field inside this object will be updated accordingly.\n   */\n  readonly collectionDetails: Option<{\n    /** The collection details version. For now, there's only one version. */\n    version: 'V1';\n\n    /** The size of the collection, automatically kept up-to-date by the program. */\n    size: BigNumber;\n  }>;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   */\n  readonly uses: Option<{\n    /** An enum selecting a strategy for using the asset. */\n    useMethod: UseMethod;\n\n    /** The amount of remaining uses. */\n    remaining: BigNumber;\n\n    /** The total amount of uses that was initially allowed. */\n    total: BigNumber;\n  }>;\n\n  /** Programmable configuration for the asset. */\n  readonly programmableConfig: Option<ProgrammableConfig>;\n\n  /* Compression metadata only provided via the ReadApi */\n  readonly compression?: ReadApiCompressionMetadata;\n};\n\n/** @group Model Helpers */\nexport const isMetadata = (value: any): value is Metadata =>\n  typeof value === 'object' && value.model === 'metadata';\n\n/** @group Model Helpers */\nexport function assertMetadata(value: any): asserts value is Metadata {\n  assert(isMetadata(value), `Expected Metadata model`);\n}\n\n/** @group Model Helpers */\nexport const toMetadata = (\n  account: MetadataAccount,\n  json?: Option<JsonMetadata>\n): Metadata => ({\n  model: 'metadata',\n  address: Pda.find(account.owner, [\n    Buffer.from('metadata', 'utf8'),\n    account.owner.toBuffer(),\n    account.data.mint.toBuffer(),\n  ]),\n  mintAddress: account.data.mint,\n  updateAuthorityAddress: account.data.updateAuthority,\n  json: json ?? null,\n  jsonLoaded: json !== undefined,\n  name: removeEmptyChars(account.data.data.name),\n  symbol: removeEmptyChars(account.data.data.symbol),\n  uri: removeEmptyChars(account.data.data.uri),\n  isMutable: account.data.isMutable,\n  primarySaleHappened: account.data.primarySaleHappened,\n  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n  editionNonce: account.data.editionNonce,\n  creators: account.data.data.creators ?? [],\n  tokenStandard: account.data.tokenStandard,\n  collection: account.data.collection\n    ? {\n        ...account.data.collection,\n        address: account.data.collection.key,\n      }\n    : null,\n  collectionDetails: account.data.collectionDetails\n    ? {\n        version: account.data.collectionDetails.__kind,\n        size: toBigNumber(account.data.collectionDetails.size),\n      }\n    : null,\n  uses: account.data.uses\n    ? {\n        ...account.data.uses,\n        remaining: toBigNumber(account.data.uses.remaining),\n        total: toBigNumber(account.data.uses.total),\n      }\n    : null,\n  programmableConfig: account.data.programmableConfig,\n});\n\nexport const isNonFungible = (nftOrSft: {\n  tokenStandard: Option<TokenStandard>;\n}): boolean =>\n  nftOrSft.tokenStandard === null ||\n  nftOrSft.tokenStandard === TokenStandard.NonFungible ||\n  nftOrSft.tokenStandard === TokenStandard.NonFungibleEdition ||\n  nftOrSft.tokenStandard === TokenStandard.ProgrammableNonFungible;\n\nexport const isProgrammable = (nftOrSft: {\n  tokenStandard: Option<TokenStandard>;\n}): boolean => nftOrSft.tokenStandard === TokenStandard.ProgrammableNonFungible;\n"],"names":["isMetadata","value","model","assertMetadata","assert","toMetadata","account","json","address","Pda","find","owner","Buffer","from","toBuffer","data","mint","mintAddress","updateAuthorityAddress","updateAuthority","jsonLoaded","undefined","name","removeEmptyChars","symbol","uri","isMutable","primarySaleHappened","sellerFeeBasisPoints","editionNonce","creators","tokenStandard","collection","key","collectionDetails","version","__kind","size","toBigNumber","uses","remaining","total","programmableConfig","isNonFungible","nftOrSft","TokenStandard","NonFungible","NonFungibleEdition","ProgrammableNonFungible","isProgrammable"],"mappings":"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"}