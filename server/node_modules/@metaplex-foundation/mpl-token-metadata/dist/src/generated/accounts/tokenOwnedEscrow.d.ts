/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { EscrowAuthority, EscrowAuthorityArgs, Key, KeyArgs } from '../types';
export type TokenOwnedEscrow = Account<TokenOwnedEscrowAccountData>;
export type TokenOwnedEscrowAccountData = {
    key: Key;
    baseToken: PublicKey;
    authority: EscrowAuthority;
    bump: number;
};
export type TokenOwnedEscrowAccountDataArgs = {
    baseToken: PublicKey;
    authority: EscrowAuthorityArgs;
    bump: number;
};
export declare function getTokenOwnedEscrowAccountDataSerializer(): Serializer<TokenOwnedEscrowAccountDataArgs, TokenOwnedEscrowAccountData>;
export declare function deserializeTokenOwnedEscrow(rawAccount: RpcAccount): TokenOwnedEscrow;
export declare function fetchTokenOwnedEscrow(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TokenOwnedEscrow>;
export declare function safeFetchTokenOwnedEscrow(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<TokenOwnedEscrow | null>;
export declare function fetchAllTokenOwnedEscrow(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TokenOwnedEscrow[]>;
export declare function safeFetchAllTokenOwnedEscrow(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<TokenOwnedEscrow[]>;
export declare function getTokenOwnedEscrowGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<TokenOwnedEscrow, {
    key: KeyArgs;
    baseToken: PublicKey;
    authority: EscrowAuthorityArgs;
    bump: number;
}>;
