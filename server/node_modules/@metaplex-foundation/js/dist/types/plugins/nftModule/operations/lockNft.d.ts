import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { Sft } from '../models';
import { TokenMetadataAuthorityTokenDelegate, TokenMetadataAuthorizationDetails } from '../Authorization';
import { Metaplex } from '../../../Metaplex';
import { Operation, OperationHandler } from '../../../types';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
declare const Key: "LockNftOperation";
/**
 * Lock a programmable NFT.
 *
 * ```ts
 * await metaplex.nfts().lock({ nftOrSft, authority });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const lockNftOperation: import("../../../types").OperationConstructor<LockNftOperation, "LockNftOperation", LockNftInput, LockNftOutput>;
/**
 * @group Operations
 * @category Types
 */
export type LockNftOperation = Operation<typeof Key, LockNftInput, LockNftOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type LockNftInput = {
    /**
     * The NFT or SFT to lock.
     * We only need its address and token standard.
     *
     * Note that locking only works for programmable assets.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to lock the asset.
     *
     * This must be a token delegate.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority: TokenMetadataAuthorityTokenDelegate;
    /**
     * The authorization rules and data to use for the operation.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
};
/**
 * @group Operations
 * @category Outputs
 */
export type LockNftOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const lockNftOperationHandler: OperationHandler<LockNftOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type LockNftBuilderParams = Omit<LockNftInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Lock a programmable NFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .lock({ nftOrSft, authority });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const lockNftBuilder: (metaplex: Metaplex, params: LockNftBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
