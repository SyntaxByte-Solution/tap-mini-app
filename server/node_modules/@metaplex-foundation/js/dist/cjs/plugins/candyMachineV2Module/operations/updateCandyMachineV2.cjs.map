{"version":3,"file":"updateCandyMachineV2.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/updateCandyMachineV2.ts"],"sourcesContent":["import {\n  CandyMachineData,\n  createRemoveCollectionInstruction,\n  createSetCollectionInstruction,\n  createUpdateAuthorityInstruction,\n  createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport type { PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  CandyMachineV2,\n  CandyMachineV2Configs,\n  toCandyMachineV2Configs,\n  toCandyMachineV2InstructionData,\n} from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineV2Operation' as const;\n\n/**\n * Updates an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachinesV2()\n *   .update({\n *     candyMachine,\n *     price: sol(2), // Updates the price only.\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyMachineV2Operation =\n  useOperation<UpdateCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyMachineV2Operation = Operation<\n  typeof Key,\n  UpdateCandyMachineV2Input,\n  UpdateCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyMachineV2Input = Partial<CandyMachineV2Configs> & {\n  /**\n   * The Candy Machine to update.\n   * We need the full model in order to compare the current data with\n   * the provided data to update. For instance, if you only want to\n   * update the `price`, we need to send an instruction that updates\n   * the data whilst keeping all other properties the same.\n   *\n   * If you want more control over how this transaction is built,\n   * you may use the associated transaction builder instead using\n   * `metaplex.candyMachinesV2().builders().updateCandyMachineV2({...})`.\n   */\n  candyMachine: CandyMachineV2;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The new Candy Machine authority.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The mint address of the new Candy Machine collection.\n   * When `null` is provided, the collection is removed.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCollection?: Option<PublicKey>;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyMachineV2OperationHandler: OperationHandler<UpdateCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: UpdateCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyMachineV2Output> {\n      const {\n        candyMachine,\n        authority = metaplex.identity(),\n        newAuthority,\n        newCollection,\n        ...updatableFields\n      } = operation.input;\n\n      const currentConfigs = toCandyMachineV2Configs(candyMachine);\n      const instructionDataWithoutChanges = toCandyMachineV2InstructionData(\n        candyMachine.address,\n        currentConfigs\n      );\n      const instructionData = toCandyMachineV2InstructionData(\n        candyMachine.address,\n        {\n          ...currentConfigs,\n          ...updatableFields,\n        }\n      );\n      const { data, wallet, tokenMint } = instructionData;\n      const shouldUpdateData = !isEqual(\n        instructionData,\n        instructionDataWithoutChanges\n      );\n\n      const builder = updateCandyMachineV2Builder(\n        metaplex,\n        {\n          candyMachine,\n          authority,\n          newData: shouldUpdateData\n            ? { ...data, wallet, tokenMint }\n            : undefined,\n          newCollection,\n          newAuthority,\n        },\n        scope\n      );\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyMachineV2BuilderParams = {\n  /**\n   * The Candy Machine to update.\n   * We only need a subset of the `CandyMachine` model to figure out\n   * the current values for the wallet and collection addresses.\n   */\n  candyMachine: Pick<\n    CandyMachineV2,\n    'address' | 'walletAddress' | 'collectionMintAddress'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The new Candy Machine data.\n   * This includes the wallet and token mint addresses\n   * which can both be updated.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newData?: CandyMachineData & {\n    wallet: PublicKey;\n    tokenMint: Option<PublicKey>;\n  };\n\n  /**\n   * The new Candy Machine authority.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The mint address of the new Candy Machine collection.\n   * When `null` is provided, the collection is removed.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCollection?: Option<PublicKey>;\n\n  /** A key to distinguish the instruction that updates the data. */\n  updateInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the authority. */\n  updateAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that sets the collection. */\n  setCollectionInstructionKey?: string;\n\n  /** A key to distinguish the instruction that removes the collection. */\n  removeCollectionInstructionKey?: string;\n};\n\n/**\n * Updates an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .update({\n *     candyMachine: { address, walletAddress, collectionMintAddress },\n *     newData: {...}, // Updates the provided data.\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: UpdateCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    authority = metaplex.identity(),\n    newData,\n    newAuthority,\n    newCollection,\n  } = params;\n  const tokenMetadataProgram = metaplex\n    .programs()\n    .getTokenMetadata(programs).address;\n  const shouldUpdateAuthority =\n    !!newAuthority && !newAuthority.equals(authority.publicKey);\n  const sameCollection =\n    newCollection &&\n    candyMachine.collectionMintAddress &&\n    candyMachine.collectionMintAddress.equals(newCollection);\n  const shouldUpdateCollection = !!newCollection && !sameCollection;\n  const shouldRemoveCollection =\n    !shouldUpdateCollection &&\n    newCollection === null &&\n    candyMachine.collectionMintAddress !== null;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update data.\n      .when(!!newData, (builder) => {\n        const data = newData as CandyMachineData;\n        const wallet = newData?.wallet as PublicKey;\n        const tokenMint = newData?.tokenMint as Option<PublicKey>;\n        const updateInstruction = createUpdateCandyMachineInstruction(\n          {\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            wallet,\n          },\n          { data }\n        );\n\n        if (tokenMint) {\n          updateInstruction.keys.push({\n            pubkey: tokenMint,\n            isWritable: false,\n            isSigner: false,\n          });\n        }\n\n        return builder.add({\n          instruction: updateInstruction,\n          signers: [authority],\n          key: params.updateInstructionKey ?? 'update',\n        });\n      })\n\n      // Set or update collection.\n      .when(shouldUpdateCollection, (builder) => {\n        const collectionMint = newCollection as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const edition = metaplex.nfts().pdas().masterEdition({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram,\n          }),\n          signers: [payer, authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n\n      // Remove collection.\n      .when(shouldRemoveCollection, (builder) => {\n        const collectionMint = candyMachine.collectionMintAddress as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createRemoveCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            metadata,\n            mint: collectionMint,\n            collectionAuthorityRecord,\n            tokenMetadataProgram,\n          }),\n          signers: [authority],\n          key: params.removeCollectionInstructionKey ?? 'removeCollection',\n        });\n      })\n\n      // Update authority.\n      .when(shouldUpdateAuthority, (builder) =>\n        builder.add({\n          instruction: createUpdateAuthorityInstruction(\n            {\n              candyMachine: candyMachine.address,\n              authority: authority.publicKey,\n              wallet: newData?.wallet ?? candyMachine.walletAddress,\n            },\n            { newAuthority: newAuthority as PublicKey }\n          ),\n          signers: [authority],\n          key: params.updateAuthorityInstructionKey ?? 'updateAuthority',\n        })\n      )\n  );\n};\n"],"names":["Key","updateCandyMachineV2Operation","useOperation","updateCandyMachineV2OperationHandler","handle","operation","metaplex","scope","candyMachine","authority","identity","newAuthority","newCollection","updatableFields","input","currentConfigs","toCandyMachineV2Configs","instructionDataWithoutChanges","toCandyMachineV2InstructionData","address","instructionData","data","wallet","tokenMint","shouldUpdateData","isEqual","builder","updateCandyMachineV2Builder","newData","undefined","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","tokenMetadataProgram","getTokenMetadata","shouldUpdateAuthority","equals","publicKey","sameCollection","collectionMintAddress","shouldUpdateCollection","shouldRemoveCollection","TransactionBuilder","make","setFeePayer","when","updateInstruction","createUpdateCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","add","instruction","signers","key","updateInstructionKey","collectionMint","metadata","nfts","pdas","mint","edition","masterEdition","collectionPda","findCandyMachineV2CollectionPda","collectionAuthorityRecord","collectionAuthority","createSetCollectionInstruction","setCollectionInstructionKey","createRemoveCollectionInstruction","removeCollectionInstructionKey","createUpdateAuthorityInstruction","walletAddress","updateAuthorityInstructionKey"],"mappings":"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"}