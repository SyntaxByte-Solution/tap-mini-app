{"version":3,"file":"unwrapCandyGuard.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/unwrapCandyGuard.ts"],"sourcesContent":["import { createUnwrapInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnwrapCandyGuardOperation' as const;\n\n/**\n * Unwraps the given Candy Machine from its Candy Guard.\n *\n * This makes the Candy Machine authority its own mint authority again\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .unwrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const unwrapCandyGuardOperation =\n  useOperation<UnwrapCandyGuardOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnwrapCandyGuardOperation = Operation<\n  typeof Key,\n  UnwrapCandyGuardInput,\n  UnwrapCandyGuardOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnwrapCandyGuardInput = {\n  /** The address of the Candy Machine to unwrap. */\n  candyMachine: PublicKey;\n\n  /** The address of the Candy Guard to unwrap the Candy Machine from. */\n  candyGuard: PublicKey;\n\n  /**\n   * The authority of the Candy Machine as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyMachineAuthority?: Signer;\n\n  /**\n   * The authority of the Candy Guard as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyGuardAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnwrapCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unwrapCandyGuardOperationHandler: OperationHandler<UnwrapCandyGuardOperation> =\n  {\n    async handle(\n      operation: UnwrapCandyGuardOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UnwrapCandyGuardOutput> {\n      return unwrapCandyGuardBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnwrapCandyGuardBuilderParams = Omit<\n  UnwrapCandyGuardInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that unwraps the Candy Machine from its Candy Guard. */\n  unwrapCandyGuardInstructionKey?: string;\n};\n\n/**\n * Unwraps the given Candy Machine from its Candy Guard.\n *\n * This makes the Candy Machine authority its own mint authority again\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .unwrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unwrapCandyGuardBuilder = (\n  metaplex: Metaplex,\n  params: UnwrapCandyGuardBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyGuard,\n    candyGuardAuthority = metaplex.identity(),\n    candyMachine,\n    candyMachineAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createUnwrapInstruction(\n        {\n          candyGuard,\n          authority: candyGuardAuthority.publicKey,\n          candyMachine,\n          candyMachineProgram: candyMachineProgram.address,\n          candyMachineAuthority: candyMachineAuthority.publicKey,\n        },\n        candyGuardProgram.address\n      ),\n      signers: [candyGuardAuthority, candyMachineAuthority],\n      key: params.unwrapCandyGuardInstructionKey ?? 'unwrapCandyGuard',\n    });\n};\n"],"names":["Key","unwrapCandyGuardOperation","useOperation","unwrapCandyGuardOperationHandler","handle","operation","metaplex","scope","unwrapCandyGuardBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","candyGuardAuthority","identity","candyMachine","candyMachineAuthority","candyMachineProgram","getCandyMachine","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createUnwrapInstruction","authority","publicKey","address","signers","key","unwrapCandyGuardInstructionKey"],"mappings":";;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAoC,CAAA;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,yBAAyB,GACpCC,YAAY,CAA4BF,GAAG,EAAC;;AAE9C;AACA;AACA;AACA;;AA0CA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACE,EAAA,MAAMC,MAAM,CACVC,SAAoC,EACpCC,QAAkB,EAClBC,KAAqB,EACY;AACjC,IAAA,OAAOC,uBAAuB,CAC5BF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,uBAAuB,GAAG,CACrCF,QAAkB,EAClBM,MAAqC,EACrCC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,UAAU;AACVC,IAAAA,mBAAmB,GAAGb,QAAQ,CAACc,QAAQ,EAAE;IACzCC,YAAY;IACZC,qBAAqB,GAAGhB,QAAQ,CAACc,QAAQ,EAAA;AAC3C,GAAC,GAAGR,MAAM,CAAA;;AAEV;EACA,MAAMW,mBAAmB,GAAGjB,QAAQ,CAACQ,QAAQ,EAAE,CAACU,eAAe,CAACV,QAAQ,CAAC,CAAA;EACzE,MAAMW,iBAAiB,GAAGnB,QAAQ,CAACQ,QAAQ,EAAE,CAACY,aAAa,CAACZ,QAAQ,CAAC,CAAA;EAErE,OAAOa,kBAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACd,KAAK,CAAC,CAClBe,GAAG,CAAC;IACHC,WAAW,EAAEC,uBAAuB,CAClC;MACEd,UAAU;MACVe,SAAS,EAAEd,mBAAmB,CAACe,SAAS;MACxCb,YAAY;MACZE,mBAAmB,EAAEA,mBAAmB,CAACY,OAAO;MAChDb,qBAAqB,EAAEA,qBAAqB,CAACY,SAAAA;AAC/C,KAAC,EACDT,iBAAiB,CAACU,OAAO,CAC1B;AACDC,IAAAA,OAAO,EAAE,CAACjB,mBAAmB,EAAEG,qBAAqB,CAAC;AACrDe,IAAAA,GAAG,EAAEzB,MAAM,CAAC0B,8BAA8B,IAAI,kBAAA;AAChD,GAAC,CAAC,CAAA;AACN;;;;"}