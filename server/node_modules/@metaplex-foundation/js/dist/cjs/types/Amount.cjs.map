{"version":3,"file":"Amount.cjs","sources":["../../../src/types/Amount.ts"],"sourcesContent":["import { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { BigNumber, BigNumberValues, toBigNumber } from './BigNumber';\nimport { CurrencyMismatchError, UnexpectedCurrencyError } from '@/errors';\n\nexport type Amount<T extends Currency = Currency> = {\n  basisPoints: BigNumber;\n  currency: T;\n};\n\nexport type Currency = {\n  symbol: string;\n  decimals: number;\n  namespace?: 'spl-token';\n};\n\nexport type SplTokenCurrency = {\n  symbol: string;\n  decimals: number;\n  namespace: 'spl-token';\n};\nexport type SplTokenAmount = Amount<SplTokenCurrency>;\n\n/** @group Constants */\nexport const SOL = {\n  symbol: 'SOL',\n  decimals: 9,\n} as const;\nexport type SolCurrency = typeof SOL;\nexport type SolAmount = Amount<SolCurrency>;\n\n/** @group Constants */\nexport const USD = {\n  symbol: 'USD',\n  decimals: 2,\n} as const;\nexport type UsdCurrency = typeof USD;\nexport type UsdAmount = Amount<UsdCurrency>;\n\nexport const amount = <T extends Currency = Currency>(\n  basisPoints: BigNumberValues,\n  currency: T\n): Amount<T> => {\n  return {\n    basisPoints: toBigNumber(basisPoints),\n    currency,\n  };\n};\n\nexport const lamports = (lamports: BigNumberValues): SolAmount => {\n  return amount(lamports, SOL);\n};\n\nexport const sol = (sol: number): SolAmount => {\n  return lamports(sol * LAMPORTS_PER_SOL);\n};\n\nexport const usd = (usd: number): UsdAmount => {\n  return amount(usd * 100, USD);\n};\n\nexport const token = (\n  amount: BigNumberValues,\n  decimals = 0,\n  symbol = 'Token'\n): SplTokenAmount => {\n  if (typeof amount !== 'number') {\n    amount = toBigNumber(amount).toNumber();\n  }\n\n  return {\n    basisPoints: toBigNumber(amount * Math.pow(10, decimals)),\n    currency: {\n      symbol,\n      decimals,\n      namespace: 'spl-token',\n    },\n  };\n};\n\nexport const isSol = (currencyOrAmount: Currency | Amount): boolean => {\n  return sameCurrencies(currencyOrAmount, SOL);\n};\n\nexport const sameAmounts = (left: Amount, right: Amount): boolean => {\n  return sameCurrencies(left, right) && left.basisPoints.eq(right.basisPoints);\n};\n\nexport const sameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount\n): boolean => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  return (\n    left.symbol === right.symbol &&\n    left.decimals === right.decimals &&\n    left.namespace === right.namespace\n  );\n};\n\nexport function assertCurrency<T extends Currency>(\n  actual: Currency,\n  expected: T\n): asserts actual is T;\nexport function assertCurrency<T extends Currency>(\n  actual: Amount,\n  expected: T\n): asserts actual is Amount<T>;\nexport function assertCurrency<T extends Currency>(\n  actual: Currency | Amount,\n  expected: T\n): asserts actual is T | Amount<T>;\nexport function assertCurrency<T extends Currency>(\n  actual: Currency | Amount,\n  expected: T\n): asserts actual is T | Amount<T> {\n  if ('currency' in actual) {\n    actual = actual.currency;\n  }\n\n  if (!sameCurrencies(actual, expected)) {\n    throw new UnexpectedCurrencyError(actual, expected);\n  }\n}\nexport function assertSol(actual: Amount): asserts actual is SolAmount;\nexport function assertSol(actual: Currency): asserts actual is SolCurrency;\nexport function assertSol(\n  actual: Currency | Amount\n): asserts actual is SolCurrency | SolAmount;\nexport function assertSol(\n  actual: Currency | Amount\n): asserts actual is SolCurrency | SolAmount {\n  assertCurrency(actual, SOL);\n}\n\nexport function assertSameCurrencies<L extends Currency, R extends Currency>(\n  left: L | Amount<L>,\n  right: R | Amount<R>,\n  operation?: string\n) {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  if (!sameCurrencies(left, right)) {\n    throw new CurrencyMismatchError(left, right, operation);\n  }\n}\n\nexport const addAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): Amount<T> => {\n  assertSameCurrencies(left, right, 'add');\n\n  return amount(left.basisPoints.add(right.basisPoints), left.currency);\n};\n\nexport const subtractAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): Amount<T> => {\n  assertSameCurrencies(left, right, 'subtract');\n\n  return amount(left.basisPoints.sub(right.basisPoints), left.currency);\n};\n\nexport const multiplyAmount = <T extends Currency>(\n  left: Amount<T>,\n  multiplier: number\n): Amount<T> => {\n  return amount(left.basisPoints.muln(multiplier), left.currency);\n};\n\nexport const divideAmount = <T extends Currency>(\n  left: Amount<T>,\n  divisor: number\n): Amount<T> => {\n  return amount(left.basisPoints.divn(divisor), left.currency);\n};\n\nexport const absoluteAmount = <T extends Currency>(\n  value: Amount<T>\n): Amount<T> => {\n  return amount(value.basisPoints.abs(), value.currency);\n};\n\nexport const compareAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): -1 | 0 | 1 => {\n  assertSameCurrencies(left, right, 'compare');\n\n  return left.basisPoints.cmp(right.basisPoints);\n};\n\nexport const isEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>,\n  tolerance?: Amount<T>\n): boolean => {\n  tolerance = tolerance ?? amount(0, left.currency);\n  assertSameCurrencies(left, right, 'isEqualToAmount');\n  assertSameCurrencies(left, tolerance, 'isEqualToAmount');\n\n  const delta = absoluteAmount(subtractAmounts(left, right));\n\n  return isLessThanOrEqualToAmount(delta, tolerance);\n};\n\nexport const isLessThanAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) < 0;\n\nexport const isLessThanOrEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) <= 0;\n\nexport const isGreaterThanAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) > 0;\n\nexport const isGreaterThanOrEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) >= 0;\n\nexport const isZeroAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) === 0;\n\nexport const isPositiveAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) >= 0;\n\nexport const isNegativeAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) < 0;\n\nexport const formatAmount = (value: Amount): string => {\n  if (value.currency.decimals === 0) {\n    return `${value.currency.symbol} ${value.basisPoints.toString()}`;\n  }\n\n  const power = new BN(10).pow(new BN(value.currency.decimals));\n  const basisPoints = value.basisPoints as unknown as BN & {\n    divmod: (other: BN) => { div: BN; mod: BN };\n  };\n\n  const { div, mod } = basisPoints.divmod(power);\n  const units = `${div.toString()}.${mod\n    .abs()\n    .toString(10, value.currency.decimals)}`;\n\n  return `${value.currency.symbol} ${units}`;\n};\n"],"names":["SOL","symbol","decimals","USD","amount","basisPoints","currency","toBigNumber","lamports","sol","LAMPORTS_PER_SOL","usd","token","toNumber","Math","pow","namespace","isSol","currencyOrAmount","sameCurrencies","sameAmounts","left","right","eq","assertCurrency","actual","expected","UnexpectedCurrencyError","assertSol","assertSameCurrencies","operation","CurrencyMismatchError","addAmounts","add","subtractAmounts","sub","multiplyAmount","multiplier","muln","divideAmount","divisor","divn","absoluteAmount","value","abs","compareAmounts","cmp","isEqualToAmount","tolerance","delta","isLessThanOrEqualToAmount","isLessThanAmount","isGreaterThanAmount","isGreaterThanOrEqualToAmount","isZeroAmount","isPositiveAmount","isNegativeAmount","formatAmount","toString","power","BN","div","mod","divmod","units"],"mappings":"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"}