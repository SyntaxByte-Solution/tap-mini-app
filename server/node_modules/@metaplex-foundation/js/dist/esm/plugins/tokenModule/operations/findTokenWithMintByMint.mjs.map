{"version":3,"file":"findTokenWithMintByMint.mjs","sources":["../../../../../src/plugins/tokenModule/operations/findTokenWithMintByMint.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toMintAccount, toTokenAccount } from '../accounts';\nimport { TokenAndMintDoNotMatchError } from '../errors';\nimport { toMint } from '../models/Mint';\nimport { TokenWithMint, toTokenWithMint } from '../models/Token';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindTokenWithMintByMintOperation' as const;\n\n/**\n * Finds a token account and its associated mint account\n * by providing the mint address and either:\n * - the token address or\n * - the address of the token's owner.\n *\n * ```ts\n * const tokenWithMint = await metaplex\n *   .tokens()\n *   .findTokenWithMintByMint({ mint, address: tokenAddress, type: \"token\" };\n *\n * const tokenWithMint = await metaplex\n *   .tokens()\n *   .findTokenWithMintByMint({ mint, address: ownerAddress, type: \"owner\" };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findTokenWithMintByMintOperation =\n  useOperation<FindTokenWithMintByMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindTokenWithMintByMintOperation = Operation<\n  typeof Key,\n  FindTokenWithMintByMintInput,\n  TokenWithMint\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindTokenWithMintByMintInput = {\n  /** The address of the mint account. */\n  mint: PublicKey;\n\n  /**\n   * The address of the token account or its owner,\n   * distinguished by the `addressType`` parameter.\n   */\n  address: PublicKey;\n\n  /**\n   * Determines whether the `address` parameter is the token address\n   * or the address of its owner.\n   */\n  addressType: 'owner' | 'token';\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findTokenWithMintByMintOperationHandler: OperationHandler<FindTokenWithMintByMintOperation> =\n  {\n    handle: async (\n      operation: FindTokenWithMintByMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<TokenWithMint> => {\n      const { commitment, programs } = scope;\n      const { mint, address, addressType } = operation.input;\n      const tokenAddress =\n        addressType === 'owner'\n          ? metaplex.tokens().pdas().associatedTokenAccount({\n              mint,\n              owner: address,\n              programs,\n            })\n          : address;\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts([mint, tokenAddress], commitment);\n\n      const mintAccount = toMintAccount(accounts[0]);\n      const tokenAccount = toTokenAccount(accounts[1]);\n\n      if (!tokenAccount.data.mint.equals(mint)) {\n        throw new TokenAndMintDoNotMatchError(\n          tokenAddress,\n          tokenAccount.data.mint,\n          mint\n        );\n      }\n\n      return toTokenWithMint(tokenAccount, toMint(mintAccount));\n    },\n  };\n"],"names":["Key","findTokenWithMintByMintOperation","useOperation","findTokenWithMintByMintOperationHandler","handle","operation","metaplex","scope","commitment","programs","mint","address","addressType","input","tokenAddress","tokens","pdas","associatedTokenAccount","owner","accounts","rpc","getMultipleAccounts","mintAccount","toMintAccount","tokenAccount","toTokenAccount","data","equals","TokenAndMintDoNotMatchError","toTokenWithMint","toMint"],"mappings":";;;;;;AAaA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,kCAA2C,CAAA;;AAEvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,gCAAgC,GAC3CC,YAAY,CAAmCF,GAAG,EAAC;;AAErD;AACA;AACA;AACA;;AA4BA;AACA;AACA;AACA;AACO,MAAMG,uCAA2F,GACtG;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA2C,EAC3CC,QAAkB,EAClBC,KAAqB,KACM;IAC3B,MAAM;MAAEC,UAAU;AAAEC,MAAAA,QAAAA;AAAS,KAAC,GAAGF,KAAK,CAAA;IACtC,MAAM;MAAEG,IAAI;MAAEC,OAAO;AAAEC,MAAAA,WAAAA;KAAa,GAAGP,SAAS,CAACQ,KAAK,CAAA;AACtD,IAAA,MAAMC,YAAY,GAChBF,WAAW,KAAK,OAAO,GACnBN,QAAQ,CAACS,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MAC9CP,IAAI;AACJQ,MAAAA,KAAK,EAAEP,OAAO;AACdF,MAAAA,QAAAA;KACD,CAAC,GACFE,OAAO,CAAA;AAEb,IAAA,MAAMQ,QAAQ,GAAG,MAAMb,QAAQ,CAC5Bc,GAAG,EAAE,CACLC,mBAAmB,CAAC,CAACX,IAAI,EAAEI,YAAY,CAAC,EAAEN,UAAU,CAAC,CAAA;IAExD,MAAMc,WAAW,GAAGC,aAAa,CAACJ,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9C,MAAMK,YAAY,GAAGC,cAAc,CAACN,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAEhD,IAAI,CAACK,YAAY,CAACE,IAAI,CAAChB,IAAI,CAACiB,MAAM,CAACjB,IAAI,CAAC,EAAE;AACxC,MAAA,MAAM,IAAIkB,2BAA2B,CACnCd,YAAY,EACZU,YAAY,CAACE,IAAI,CAAChB,IAAI,EACtBA,IAAI,CACL,CAAA;AACH,KAAA;IAEA,OAAOmB,eAAe,CAACL,YAAY,EAAEM,MAAM,CAACR,WAAW,CAAC,CAAC,CAAA;AAC3D,GAAA;AACF;;;;"}