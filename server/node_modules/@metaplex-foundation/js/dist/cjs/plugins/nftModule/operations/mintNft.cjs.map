{"version":3,"file":"mintNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/mintNft.ts"],"sourcesContent":["import { createMintInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthorityMetadata,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport { isNonFungible, Sft } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintNftOperation' as const;\n\n/**\n * Mint token(s) for an NFT or SFT.\n *\n * ```ts\n * await metaplex.nfts().mint({\n *   nftOrSft,\n *   toOwner,\n *   amount: token(5),\n * });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintNftOperation = useOperation<MintNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintNftOperation = Operation<\n  typeof Key,\n  MintNftInput,\n  MintNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintNftInput = {\n  /**\n   * The NFT or SFT to mint from.\n   * We only need its address and token standard.\n   */\n  nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;\n\n  /**\n   * An authority allowed to mint the asset.\n   *\n   * This must be the update authority for Non-Fungible assets\n   * and the mint authority for Semi-Fungible assets.\n   *\n   * Note that Delegate and Holder authorities\n   * are not supported for this instruction.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer | TokenMetadataAuthorityMetadata;\n\n  /**\n   * The authorization rules and data to use for the mint.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n\n  /**\n   * The owner of the destination token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the destination token account.\n   *\n   * This may be a regular token account or an associated token account.\n   * If the token account does not exist, then it will be created but\n   * only if it is an associated token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `nftOrSft.address` and `toOwner` parameters.\n   */\n  toToken?: PublicKey;\n\n  /**\n   * The amount of tokens to mint.\n   *\n   * @defaultValue `token(1)`\n   */\n  amount?: SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintNftOperationHandler: OperationHandler<MintNftOperation> = {\n  handle: async (\n    operation: MintNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<MintNftOutput> => {\n    return mintNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintNftBuilderParams = Omit<MintNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Mint token(s) for an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .mint({\n *     nftOrSft,\n *     toOwner,\n *     amount: token(5),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintNftBuilder = (\n  metaplex: Metaplex,\n  params: MintNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    nftOrSft,\n    authority = metaplex.identity(),\n    authorizationDetails,\n    toOwner = metaplex.identity().publicKey,\n    amount = token(1),\n  } = params;\n\n  // Auth.\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority:\n      '__kind' in authority\n        ? authority\n        : { __kind: 'metadata', updateAuthority: authority },\n    authorizationDetails,\n    programs,\n  });\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const ataProgram = metaplex.programs().getAssociatedToken(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const masterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: nftOrSft.address,\n    programs,\n  });\n\n  // Destination token account.\n  const toToken =\n    params.toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: nftOrSft.address,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createMintInstruction(\n          {\n            token: toToken,\n            tokenOwner: toOwner,\n            metadata,\n            masterEdition: isNonFungible(nftOrSft) ? masterEdition : undefined,\n            tokenRecord: metaplex.nfts().pdas().tokenRecord({\n              mint: nftOrSft.address,\n              token: toToken,\n              programs,\n            }),\n            mint: nftOrSft.address,\n            authority: auth.accounts.authority,\n            // delegateRecord, // TODO: add when program supports Authority delegate.\n            payer: payer.publicKey,\n            systemProgram: systemProgram.address,\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            splTokenProgram: tokenProgram.address,\n            splAtaProgram: ataProgram.address,\n            authorizationRules: auth.accounts.authorizationRules,\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n          },\n          {\n            mintArgs: {\n              __kind: 'V1',\n              amount: amount.basisPoints,\n              ...auth.data,\n            },\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, ...auth.signers],\n        key: params.instructionKey ?? 'mintNft',\n      })\n  );\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","mintNftOperation","useOperation","mintNftOperationHandler","handle","operation","metaplex","scope","mintNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","authority","identity","authorizationDetails","toOwner","publicKey","amount","token","auth","parseTokenMetadataAuthorization","mint","address","__kind","updateAuthority","tokenMetadataProgram","getTokenMetadata","ataProgram","getAssociatedToken","tokenProgram","getToken","systemProgram","getSystem","metadata","nfts","pdas","masterEdition","toToken","tokens","associatedTokenAccount","owner","TransactionBuilder","make","setFeePayer","add","instruction","createMintInstruction","tokenOwner","isNonFungible","undefined","tokenRecord","accounts","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","splAtaProgram","authorizationRules","authorizationRulesProgram","mintArgs","basisPoints","data","signers","key","instructionKey"],"mappings":";;;;;;;;;;;;AAqBA,MAAMA,mBAAmB,GAAG,IAAIC,iBAAS,CACvC,6CAA6C,CAC9C,CAAA;;AAED;AACA;AACA;;AAEA,MAAMC,GAAG,GAAG,kBAA2B,CAAA;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,gBAAgB,GAAGC,sBAAY,CAAmBF,GAAG,EAAC;;AAEnE;AACA;AACA;AACA;;AA4EA;AACA;AACA;AACA;AACO,MAAMG,uBAA2D,GAAG;AACzEC,EAAAA,MAAM,EAAE,OACNC,SAA2B,EAC3BC,QAAkB,EAClBC,KAAqB,KACM;AAC3B,IAAA,OAAOC,cAAc,CAACF,QAAQ,EAAED,SAAS,CAACI,KAAK,EAAEF,KAAK,CAAC,CAACG,cAAc,CACpEJ,QAAQ,EACRC,KAAK,CAACI,cAAc,CACrB,CAAA;AACH,GAAA;AACF,EAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,cAAc,GAAG,CAC5BF,QAAkB,EAClBM,MAA4B,EAC5BC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,QAAQ;AACRC,IAAAA,SAAS,GAAGb,QAAQ,CAACc,QAAQ,EAAE;IAC/BC,oBAAoB;AACpBC,IAAAA,OAAO,GAAGhB,QAAQ,CAACc,QAAQ,EAAE,CAACG,SAAS;IACvCC,MAAM,GAAGC,YAAK,CAAC,CAAC,CAAA;AAClB,GAAC,GAAGb,MAAM,CAAA;;AAEV;AACA,EAAA,MAAMc,IAAI,GAAGC,6CAA+B,CAACrB,QAAQ,EAAE;IACrDsB,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBV,IAAAA,SAAS,EACP,QAAQ,IAAIA,SAAS,GACjBA,SAAS,GACT;AAAEW,MAAAA,MAAM,EAAE,UAAU;AAAEC,MAAAA,eAAe,EAAEZ,SAAAA;KAAW;IACxDE,oBAAoB;AACpBP,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;;AAEF;EACA,MAAMkB,oBAAoB,GAAG1B,QAAQ,CAACQ,QAAQ,EAAE,CAACmB,gBAAgB,CAACnB,QAAQ,CAAC,CAAA;EAC3E,MAAMoB,UAAU,GAAG5B,QAAQ,CAACQ,QAAQ,EAAE,CAACqB,kBAAkB,CAACrB,QAAQ,CAAC,CAAA;EACnE,MAAMsB,YAAY,GAAG9B,QAAQ,CAACQ,QAAQ,EAAE,CAACuB,QAAQ,CAACvB,QAAQ,CAAC,CAAA;EAC3D,MAAMwB,aAAa,GAAGhC,QAAQ,CAACQ,QAAQ,EAAE,CAACyB,SAAS,CAACzB,QAAQ,CAAC,CAAA;;AAE7D;EACA,MAAM0B,QAAQ,GAAGlC,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACF,QAAQ,CAAC;IAC/CZ,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBf,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EACF,MAAM6B,aAAa,GAAGrC,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACC,aAAa,CAAC;IACzDf,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBf,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;;AAEF;AACA,EAAA,MAAM8B,OAAO,GACXhC,MAAM,CAACgC,OAAO,IACdtC,QAAQ,CAACuC,MAAM,EAAE,CAACH,IAAI,EAAE,CAACI,sBAAsB,CAAC;IAC9ClB,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBkB,IAAAA,KAAK,EAAEzB,OAAO;AACdR,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;AAEJ,EAAA,OACEkC,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACnC,KAAK,CAAA;;AAElB;AAAA,GACCoC,GAAG,CAAC;IACHC,WAAW,EAAEC,sCAAqB,CAChC;AACE5B,MAAAA,KAAK,EAAEmB,OAAO;AACdU,MAAAA,UAAU,EAAEhC,OAAO;MACnBkB,QAAQ;MACRG,aAAa,EAAEY,sBAAa,CAACrC,QAAQ,CAAC,GAAGyB,aAAa,GAAGa,SAAS;MAClEC,WAAW,EAAEnD,QAAQ,CAACmC,IAAI,EAAE,CAACC,IAAI,EAAE,CAACe,WAAW,CAAC;QAC9C7B,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBJ,QAAAA,KAAK,EAAEmB,OAAO;AACd9B,QAAAA,QAAAA;AACF,OAAC,CAAC;MACFc,IAAI,EAAEV,QAAQ,CAACW,OAAO;AACtBV,MAAAA,SAAS,EAAEO,IAAI,CAACgC,QAAQ,CAACvC,SAAS;AAClC;MACAJ,KAAK,EAAEA,KAAK,CAACQ,SAAS;MACtBe,aAAa,EAAEA,aAAa,CAACT,OAAO;AACpC8B,MAAAA,kBAAkB,EAAEC,kCAA0B;MAC9CC,eAAe,EAAEzB,YAAY,CAACP,OAAO;MACrCiC,aAAa,EAAE5B,UAAU,CAACL,OAAO;AACjCkC,MAAAA,kBAAkB,EAAErC,IAAI,CAACgC,QAAQ,CAACK,kBAAkB;AACpDC,MAAAA,yBAAyB,EAAElE,mBAAAA;AAC7B,KAAC,EACD;AACEmE,MAAAA,QAAQ,EAAE;AACRnC,QAAAA,MAAM,EAAE,IAAI;QACZN,MAAM,EAAEA,MAAM,CAAC0C,WAAW;AAC1B,QAAA,GAAGxC,IAAI,CAACyC,IAAAA;AACV,OAAA;AACF,KAAC,EACDnC,oBAAoB,CAACH,OAAO,CAC7B;IACDuC,OAAO,EAAE,CAACrD,KAAK,EAAE,GAAGW,IAAI,CAAC0C,OAAO,CAAC;AACjCC,IAAAA,GAAG,EAAEzD,MAAM,CAAC0D,cAAc,IAAI,SAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;;;"}