declare type ErrorWithCode = Error & {
    code: number;
};
declare type MaybeErrorWithCode = ErrorWithCode | null | undefined;
export declare class InvalidAccountSizeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DeserializationErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class PublicKeyMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DataIncrementLimitExceededError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class IncorrectOwnerError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UninitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingRemainingAccountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class NumericalOverflowErrorError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class RequiredGroupLabelNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class GroupNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ExceededLengthError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class CandyMachineEmptyError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class InstructionNotFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class CollectionKeyMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingCollectionAccountsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class CollectionUpdateAuthorityKeyMismatchError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MintNotLastTransactionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MintNotLiveError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class NotEnoughSOLError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class TokenBurnFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class NotEnoughTokensError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class TokenTransferFailedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingRequiredSignatureError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class GatewayTokenInvalidError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AfterEndDateError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class InvalidMintTimeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AddressNotFoundInAllowedListError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingAllowedListProofError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AllowedListNotEnabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AllowedMintLimitReachedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class InvalidNftCollectionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingNftError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MaximumRedeemedAmountError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AddressNotAuthorizedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingFreezeInstructionError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class FreezeGuardNotEnabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class FreezeNotInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class MissingFreezePeriodError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class FreezeEscrowAlreadyExistsError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ExceededMaximumFreezePeriodError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ThawNotEnabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UnlockNotEnabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DuplicatedGroupLabelError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class DuplicatedMintLimitIdError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class UnauthorizedProgramFoundError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class ExceededProgramListSizeError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AllocationNotInitializedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AllocationLimitReachedError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare class AllocationGuardNotEnabledError extends Error {
    readonly code: number;
    readonly name: string;
    constructor();
}
export declare function errorFromCode(code: number): MaybeErrorWithCode;
export declare function errorFromName(name: string): MaybeErrorWithCode;
export {};
