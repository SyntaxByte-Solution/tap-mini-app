{"version":3,"file":"revokeNftDelegate.cjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftDelegate.ts"],"sourcesContent":["import {\n  createRevokeInstruction,\n  RevokeArgs,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthority,\n  TokenMetadataAuthorityHolder,\n  TokenMetadataAuthorityMetadata,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport {\n  DelegateInput,\n  parseTokenMetadataDelegateInput,\n} from '../DelegateInput';\nimport { isNonFungible, Sft } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftDelegateOperation' as const;\n\n/**\n * Revoke an existing delegate authority for an NFT or SFT.\n *\n * ```ts\n * await metaplex.nfts().revoke({ sftOrNft, delegate });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftDelegateOperation =\n  useOperation<RevokeNftDelegateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftDelegateOperation = Operation<\n  typeof Key,\n  RevokeNftDelegateInput,\n  RevokeNftDelegateOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftDelegateInput = {\n  /**\n   * The NFT or SFT for which we want to revoke a delegate.\n   * We only need its address and token standard.\n   */\n  nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;\n\n  /**\n   * An authority allowed to revoke a new delegate authority.\n   *\n   * Note that Delegate authorities are not supported for this\n   * instruction as delegates cannot revoke other delegates.\n   *\n   * If a `Signer` is provided directly, it will be either\n   * used as the update authority or as the token holder\n   * based on the delegate type, i.g. `delegate.type`.\n   *\n   * If a `{ __kind: 'self'; delegate: Signer }` is\n   * provided, it will assume the delegate\n   * authority is trying to revoke itself.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?:\n    | Signer\n    | { __kind: 'self'; delegate: Signer }\n    | TokenMetadataAuthorityMetadata\n    | TokenMetadataAuthorityHolder;\n\n  /**\n   * The authorization rules and data to use\n   * when revoking the delegate authority.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n\n  /**\n   * The role, address and approver of the delegate to revoke.\n   */\n  delegate: DelegateInput;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftDelegateOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftDelegateOperationHandler: OperationHandler<RevokeNftDelegateOperation> =\n  {\n    handle: async (\n      operation: RevokeNftDelegateOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftDelegateOutput> => {\n      return revokeNftDelegateBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftDelegateBuilderParams = Omit<\n  RevokeNftDelegateInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Revoke an existing delegate authority for an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revoke({ sftOrNft, delegate });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftDelegateBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftDelegateBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    nftOrSft,\n    authority = metaplex.identity(),\n    authorizationDetails,\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const masterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: nftOrSft.address,\n    programs,\n  });\n\n  // Delegate to revoke.\n  const { delegateRecord, delegate, tokenAccount, isTokenDelegate } =\n    parseTokenMetadataDelegateInput(\n      metaplex,\n      nftOrSft.address,\n      params.delegate,\n      programs\n    );\n\n  // Auth.\n  let tokenMetadataAuthority: TokenMetadataAuthority;\n  if (!('__kind' in authority)) {\n    tokenMetadataAuthority =\n      'owner' in params.delegate\n        ? {\n            __kind: 'holder',\n            owner: authority,\n            token: metaplex.tokens().pdas().associatedTokenAccount({\n              mint: nftOrSft.address,\n              owner: authority.publicKey,\n              programs,\n            }),\n          }\n        : { __kind: 'metadata', updateAuthority: authority };\n  } else if (authority.__kind === 'self') {\n    tokenMetadataAuthority = {\n      ...params.delegate,\n      __kind: 'owner' in params.delegate ? 'tokenDelegate' : 'metadataDelegate',\n      delegate: authority.delegate,\n    } as TokenMetadataAuthority;\n  } else {\n    tokenMetadataAuthority = authority;\n  }\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority: tokenMetadataAuthority,\n    authorizationDetails,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createRevokeInstruction(\n          {\n            delegateRecord,\n            delegate,\n            metadata,\n            masterEdition: isNonFungible(nftOrSft) ? masterEdition : undefined,\n            tokenRecord: isTokenDelegate ? delegateRecord : undefined,\n            mint: nftOrSft.address,\n            token: tokenAccount,\n            authority: auth.accounts.authority,\n            payer: payer.publicKey,\n            systemProgram: systemProgram.address,\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            splTokenProgram: tokenProgram.address,\n            authorizationRules: auth.accounts.authorizationRules,\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n          },\n          {\n            revokeArgs: RevokeArgs[params.delegate.type],\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, ...auth.signers],\n        key: params.instructionKey ?? 'revokeNftDelegate',\n      })\n  );\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","revokeNftDelegateOperation","useOperation","revokeNftDelegateOperationHandler","handle","operation","metaplex","scope","revokeNftDelegateBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","authority","identity","authorizationDetails","tokenMetadataProgram","getTokenMetadata","tokenProgram","getToken","systemProgram","getSystem","metadata","nfts","pdas","mint","address","masterEdition","delegateRecord","delegate","tokenAccount","isTokenDelegate","parseTokenMetadataDelegateInput","tokenMetadataAuthority","__kind","owner","token","tokens","associatedTokenAccount","publicKey","updateAuthority","auth","parseTokenMetadataAuthorization","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeInstruction","isNonFungible","undefined","tokenRecord","accounts","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","authorizationRules","authorizationRulesProgram","revokeArgs","RevokeArgs","type","signers","key","instructionKey"],"mappings":"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"}