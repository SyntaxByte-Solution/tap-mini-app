import { createLockInstruction } from '@metaplex-foundation/mpl-token-metadata';
import { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { parseTokenMetadataAuthorization } from '../Authorization.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';
import { isNonFungible } from '../models/Metadata.mjs';

const TOKEN_AUTH_RULES_ID = new PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'LockNftOperation';

/**
 * Lock a programmable NFT.
 *
 * ```ts
 * await metaplex.nfts().lock({ nftOrSft, authority });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const lockNftOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const lockNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return lockNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Lock a programmable NFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .lock({ nftOrSft, authority });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const lockNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft
  } = params;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);

  // Auth.
  const auth = parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: params.authority,
    authorizationDetails: params.authorizationDetails,
    programs
  });

  // PDAs.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const edition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });
  return TransactionBuilder.make().setFeePayer(payer)

  // Update the metadata account.
  .add({
    instruction: createLockInstruction({
      authority: auth.accounts.authority,
      tokenOwner: auth.accounts.approver,
      token: auth.accounts.token,
      mint: nftOrSft.address,
      metadata,
      edition: isNonFungible(nftOrSft) ? edition : undefined,
      tokenRecord: auth.accounts.delegateRecord,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      lockArgs: {
        __kind: 'V1',
        ...auth.data
      }
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? 'lockNft'
  });
};

export { lockNftBuilder, lockNftOperation, lockNftOperationHandler };
//# sourceMappingURL=lockNft.mjs.map
