'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyGuard = require('@metaplex-foundation/mpl-candy-guard');
var beet = require('@metaplex-foundation/beet');
var errors = require('../errors.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var beet__namespace = /*#__PURE__*/_interopNamespace(beet);

// -----------------
// Operation
// -----------------

const Key = 'CallCandyGuardRouteOperation';

/**
 * Calls the special "route" instruction on a specific guard.
 *
 * This allows guards to provide additional features such as creating
 * PDAs that verify a payer before the mint instruction is executed or
 * freezing and thawing minted NFTs.
 *
 * The "route" instruction must select a specific guard on a specific group
 * (if groups are enabled) since it is possible for the same type of guard
 * to have different settings based on its group.
 *
 * Additionally, it is possible for a guard to support multiple "paths" within
 * their "route" instruction. The route settings of the guard will usually use
 * the `path` property to distinguish them.
 *
 * ```ts
 * const { nft } = await metaplex
 *   .candyMachines()
 *   .callGuardRoute({
 *     candyMachine,
 *     guard: 'allowList',
 *     settings: {
 *       path: 'proof',
 *       merkleProof: getMerkleProof(data, leaf)
 *     },
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const callCandyGuardRouteOperation = _callCandyGuardRouteOperation;
// eslint-disable-next-line @typescript-eslint/naming-convention
function _callCandyGuardRouteOperation(input) {
  return {
    key: Key,
    input
  };
}
_callCandyGuardRouteOperation.key = Key;

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const callCandyGuardRouteOperationHandler = {
  async handle(operation, metaplex, scope) {
    const builder = callCandyGuardRouteBuilder(metaplex, operation.input, scope);
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Calls the special "route" instruction on a specific guard.
 *
 * This allows guards to provide additional features such as creating
 * PDAs that verify a payer before the mint instruction is executed or
 * freezing and thawing minted NFTs.
 *
 * The "route" instruction must select a specific guard on a specific group
 * (if groups are enabled) since it is possible for the same type of guard
 * to have different settings based on its group.
 *
 * Additionally, it is possible for a guard to support multiple "paths" within
 * their "route" instruction. The route settings of the guard will usually use
 * the `path` property to distinguish them.
 *
 * ```ts
 * const transactionBuilder = await metaplex
 *   .candyMachines()
 *   .builders()
 *   .callGuardRoute({
 *     candyMachine,
 *     guard: 'allowList',
 *     settings: {
 *       path: 'proof',
 *       merkleProof: getMerkleProof(data, leaf)
 *     },
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const callCandyGuardRouteBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    candyMachine,
    guard,
    settings,
    group = null
  } = params;
  if (!candyMachine.candyGuard) {
    throw new errors.CandyGuardRequiredOnCandyMachineError();
  }

  // Route instruction.
  const parsedRouteSettings = metaplex.candyMachines().guards().parseRouteSettings(candyMachine.address, candyMachine.candyGuard, payer, guard, settings, group, programs);
  const routeSigners = [payer, ...parsedRouteSettings.signers];
  const routeInstruction = mplCandyGuard.createRouteInstruction({
    candyGuard: candyMachine.candyGuard.address,
    candyMachine: candyMachine.address,
    payer: payer.publicKey
  }, {
    args: {
      // "GuardType" is an enum for default guards only and will assert this
      // whereas we want to allow custom guards, so we need to pass anything
      // here to create the instruction and override this data afterwards.
      guard: 0,
      data: parsedRouteSettings.arguments
    },
    label: group
  }, metaplex.programs().getCandyGuard(programs).address);
  routeInstruction.keys.push(...parsedRouteSettings.accountMetas);

  // As promised, we override the guard index here.
  const availableGuards = metaplex.candyMachines().guards().forCandyGuardProgram(programs);
  const guardIndex = availableGuards.findIndex(g => g.name === guard);
  beet__namespace.u8.write(routeInstruction.data, 8, guardIndex);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Route instruction.
  .add({
    instruction: routeInstruction,
    signers: routeSigners,
    key: params.instructionKey ?? 'callGuardRoute'
  });
};

exports.callCandyGuardRouteBuilder = callCandyGuardRouteBuilder;
exports.callCandyGuardRouteOperation = callCandyGuardRouteOperation;
exports.callCandyGuardRouteOperationHandler = callCandyGuardRouteOperationHandler;
//# sourceMappingURL=callCandyGuardRoute.cjs.map
