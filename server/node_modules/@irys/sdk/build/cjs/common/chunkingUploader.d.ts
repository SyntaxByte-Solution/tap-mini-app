/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { DataItem, DataItemCreateOptions } from "arbundles";
import type { Readable } from "stream";
import { EventEmitter } from "events";
import type Api from "./api";
import type { Arbundles, Token, UploadOptions, UploadResponse } from "./types";
import type { AxiosResponse } from "axios";
type ChunkingUploaderEvents = {
    chunkUpload: ({ id, offset, size, totalUploaded }: {
        id: number;
        offset: number;
        size: number;
        totalUploaded: number;
    }) => void;
    chunkError: ({ id, offset, size, res }: {
        id: number;
        offset: number;
        size: number;
        res: AxiosResponse;
    }) => void;
    resume: () => void;
    pause: () => void;
    done: (finishedUpload: any) => void;
};
export declare interface ChunkingUploader {
    on<U extends keyof ChunkingUploaderEvents>(event: U, listener: ChunkingUploaderEvents[U]): this;
    emit<U extends keyof ChunkingUploaderEvents>(event: U, ...args: Parameters<ChunkingUploaderEvents[U]>): boolean;
}
export declare class ChunkingUploader extends EventEmitter {
    protected tokenConfig: Token;
    protected api: Api;
    uploadID: string;
    protected token: string;
    protected chunkSize: number;
    protected batchSize: number;
    protected paused: boolean;
    protected isResume: boolean;
    protected uploadOptions: UploadOptions | undefined;
    protected arbundles: Arbundles;
    constructor(tokenConfig: Token, api: Api);
    setResumeData(uploadID: string | undefined): this;
    /**
     * Note: Will return undefined unless an upload has been started.
     * @returns
     */
    getResumeData(): string | undefined;
    setChunkSize(size: number): this;
    setBatchSize(size: number): this;
    pause(): void;
    resume(): void;
    uploadTransaction(data: Readable | Buffer | DataItem, opts?: UploadOptions): Promise<AxiosResponse<UploadResponse>>;
    uploadData(dataStream: Readable | Buffer, options?: DataItemCreateOptions & {
        upload?: UploadOptions;
    }): Promise<AxiosResponse<UploadResponse>>;
    runUpload(dataStream: Readable | Buffer, transactionOpts?: DataItemCreateOptions): Promise<AxiosResponse<UploadResponse>>;
    get completionPromise(): Promise<AxiosResponse<UploadResponse>>;
}
export {};
