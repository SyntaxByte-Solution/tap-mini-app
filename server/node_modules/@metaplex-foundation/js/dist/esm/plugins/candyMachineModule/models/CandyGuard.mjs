import { candyGuardBeet, CandyGuard } from '@metaplex-foundation/mpl-candy-guard';
import { CANDY_GUARD_DATA } from '../constants.mjs';
import { isModel, assertModel } from '../../../types/Model.mjs';
import { createSerializerFromSolitaType, deserializeAccount } from '../../../types/Serializer.mjs';
import { toAccountInfo } from '../../../types/Account.mjs';
import { Pda } from '../../../types/Pda.mjs';

/** @group Model Helpers */
const isCandyGuard = value => isModel('candyGuard', value);

/** @group Model Helpers */
function assertCandyGuard(value) {
  assertModel(isCandyGuard(value), `Expected CandyGuard model`);
}

/** @group Model Helpers */
const toCandyGuard = (account, metaplex) => {
  const candyGuardSerializer = createSerializerFromSolitaType(CandyGuard, candyGuardBeet.description);
  const parsedCandyGuard = deserializeAccount(account, candyGuardSerializer);
  const {
    guards,
    groups
  } = metaplex.candyMachines().guards().deserializeSettings(account.data.slice(CANDY_GUARD_DATA), account.owner);
  return {
    model: 'candyGuard',
    address: new Pda(parsedCandyGuard.publicKey, parsedCandyGuard.data.bump),
    accountInfo: toAccountInfo(account),
    baseAddress: parsedCandyGuard.data.base,
    authorityAddress: parsedCandyGuard.data.authority,
    guards,
    groups
  };
};

export { assertCandyGuard, isCandyGuard, toCandyGuard };
//# sourceMappingURL=CandyGuard.mjs.map
