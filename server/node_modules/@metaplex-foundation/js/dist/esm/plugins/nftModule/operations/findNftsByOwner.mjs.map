{"version":3,"file":"findNftsByOwner.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByOwner.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { TokenGpaBuilder } from '../../tokenModule';\nimport { Metadata, Nft, Sft } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByOwnerOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given owner.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByOwner({ owner };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByOwnerOperation =\n  useOperation<FindNftsByOwnerOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByOwnerOperation = Operation<\n  typeof Key,\n  FindNftsByOwnerInput,\n  FindNftsByOwnerOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByOwnerInput = {\n  /** The address of the owner. */\n  owner: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByOwnerOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByOwnerOperationHandler: OperationHandler<FindNftsByOwnerOperation> =\n  {\n    handle: async (\n      operation: FindNftsByOwnerOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByOwnerOutput> => {\n      const { programs } = scope;\n      const { owner } = operation.input;\n\n      const tokenProgram = metaplex.programs().getToken(programs);\n      const mints = await new TokenGpaBuilder(metaplex, tokenProgram.address)\n        .selectMint()\n        .whereOwner(owner)\n        .whereAmount(1)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex.nfts().findAllByMintList({ mints }, scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByOwnerOperation","useOperation","findNftsByOwnerOperationHandler","handle","operation","metaplex","scope","programs","owner","input","tokenProgram","getToken","mints","TokenGpaBuilder","address","selectMint","whereOwner","whereAmount","getDataAsPublicKeys","throwIfCanceled","nfts","findAllByMintList","filter","nft"],"mappings":";;;AAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,0BAAmC,CAAA;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,wBAAwB,GACnCC,YAAY,CAA2BF,GAAG,EAAC;;AAE7C;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,+BAA2E,GACtF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAmC,EACnCC,QAAkB,EAClBC,KAAqB,KACc;IACnC,MAAM;AAAEC,MAAAA,QAAAA;AAAS,KAAC,GAAGD,KAAK,CAAA;IAC1B,MAAM;AAAEE,MAAAA,KAAAA;KAAO,GAAGJ,SAAS,CAACK,KAAK,CAAA;IAEjC,MAAMC,YAAY,GAAGL,QAAQ,CAACE,QAAQ,EAAE,CAACI,QAAQ,CAACJ,QAAQ,CAAC,CAAA;IAC3D,MAAMK,KAAK,GAAG,MAAM,IAAIC,eAAe,CAACR,QAAQ,EAAEK,YAAY,CAACI,OAAO,CAAC,CACpEC,UAAU,EAAE,CACZC,UAAU,CAACR,KAAK,CAAC,CACjBS,WAAW,CAAC,CAAC,CAAC,CACdC,mBAAmB,EAAE,CAAA;IACxBZ,KAAK,CAACa,eAAe,EAAE,CAAA;IAEvB,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACe,IAAI,EAAE,CAACC,iBAAiB,CAAC;AAAET,MAAAA,KAAAA;KAAO,EAAEN,KAAK,CAAC,CAAA;IACtEA,KAAK,CAACa,eAAe,EAAE,CAAA;IAEvB,OAAOC,IAAI,CAACE,MAAM,CAAEC,GAAG,IAAkCA,GAAG,KAAK,IAAI,CAAC,CAAA;AACxE,GAAA;AACF;;;;"}