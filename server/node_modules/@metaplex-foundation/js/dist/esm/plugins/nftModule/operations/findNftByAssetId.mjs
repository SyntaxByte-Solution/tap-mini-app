import { toMetadataFromReadApiAsset, toMintFromReadApiAsset, toNftEditionFromReadApiAsset } from '../../../utils/readApiConnection.mjs';
import { toNft } from '../models/Nft.mjs';
import { useOperation } from '../../../types/Operation.mjs';

// -----------------
// Operation
// -----------------

const Key = 'FindNftByAssetIdOperation';

/**
 * Finds an NFT or an SFT by its mint address.
 *
 * ```ts
 * const nft = await metaplex
 *   .nfts()
 *   .findByAssetId({ assetId };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findNftByAssetIdOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findNftByAssetIdOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      assetId
    } = operation.input;

    // Retrieve asset from RPC
    // Massage into the NFT model

    const asset = await metaplex.rpc().getAsset(assetId);
    scope.throwIfCanceled();
    const metadata = toMetadataFromReadApiAsset(asset);
    const mint = toMintFromReadApiAsset(asset);
    const nftEdition = toNftEditionFromReadApiAsset(asset);
    return toNft(metadata, mint, nftEdition);
  }
};

export { findNftByAssetIdOperation, findNftByAssetIdOperationHandler };
//# sourceMappingURL=findNftByAssetId.mjs.map
