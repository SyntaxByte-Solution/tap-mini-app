{"version":3,"file":"callCandyGuardRoute.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/callCandyGuardRoute.ts"],"sourcesContent":["import { createRouteInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport * as beet from '@metaplex-foundation/beet';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  CandyGuardsRouteSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardRouteSettings,\n  DefaultCandyGuardSettings,\n} from '../guards';\nimport { CandyMachine } from '../models';\nimport { CandyGuardRequiredOnCandyMachineError } from '../errors';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport { Operation, OperationHandler, OperationScope, Signer } from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CallCandyGuardRouteOperation' as const;\n\n/**\n * Calls the special \"route\" instruction on a specific guard.\n *\n * This allows guards to provide additional features such as creating\n * PDAs that verify a payer before the mint instruction is executed or\n * freezing and thawing minted NFTs.\n *\n * The \"route\" instruction must select a specific guard on a specific group\n * (if groups are enabled) since it is possible for the same type of guard\n * to have different settings based on its group.\n *\n * Additionally, it is possible for a guard to support multiple \"paths\" within\n * their \"route\" instruction. The route settings of the guard will usually use\n * the `path` property to distinguish them.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .candyMachines()\n *   .callGuardRoute({\n *     candyMachine,\n *     guard: 'allowList',\n *     settings: {\n *       path: 'proof',\n *       merkleProof: getMerkleProof(data, leaf)\n *     },\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const callCandyGuardRouteOperation = _callCandyGuardRouteOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _callCandyGuardRouteOperation<\n  Guard extends keyof RouteSettings & string,\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n>(\n  input: CallCandyGuardRouteInput<Guard, Settings, RouteSettings>\n): CallCandyGuardRouteOperation<Guard, Settings, RouteSettings> {\n  return { key: Key, input };\n}\n_callCandyGuardRouteOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CallCandyGuardRouteOperation<\n  Guard extends keyof RouteSettings & string,\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n> = Operation<\n  typeof Key,\n  CallCandyGuardRouteInput<Guard, Settings, RouteSettings>,\n  CallCandyGuardRouteOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CallCandyGuardRouteInput<\n  Guard extends keyof RouteSettings & string,\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n> = {\n  /**\n   * The Candy Machine containing the guard we are interested in.\n   * We only need a subset of the `CandyMachine` model but we\n   * need enough information regarding its settings to know how\n   * to execute the route instruction on the guard.\n   *\n   * This includes its address and the Candy Guard account associated with it.\n   */\n  candyMachine: Pick<CandyMachine<Settings>, 'address' | 'candyGuard'>;\n\n  /**\n   * The guard to select on the Candy Machine.\n   *\n   * If the Candy Machine uses groups of guards, the `group` property\n   * must also be provided so we known which specific guard to select.\n   */\n  guard: Guard;\n\n  /**\n   * The route settings of the selected guard.\n   *\n   * These will depend on the type of guard selected but they will\n   * usually include a `path` property to distinguish between the\n   * different paths available within their \"route\" instruction.\n   */\n  settings: RouteSettings[Guard];\n\n  /**\n   * The label of the group to mint from.\n   *\n   * If groups are configured on the Candy Machine,\n   * you must specify a group label to mint from.\n   *\n   * When set to `null` it will mint using the default\n   * guards, provided no groups are configured.\n   *\n   * @defaultValue `null`\n   */\n  group?: Option<string>;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CallCandyGuardRouteOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const callCandyGuardRouteOperationHandler: OperationHandler<\n  CallCandyGuardRouteOperation<any>\n> = {\n  async handle<\n    Guard extends keyof RouteSettings & string,\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n  >(\n    operation: CallCandyGuardRouteOperation<Guard, Settings, RouteSettings>,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<CallCandyGuardRouteOutput> {\n    const builder = callCandyGuardRouteBuilder<Guard, Settings, RouteSettings>(\n      metaplex,\n      operation.input,\n      scope\n    );\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CallCandyGuardRouteBuilderParams<\n  Guard extends keyof RouteSettings & string,\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n> = Omit<\n  CallCandyGuardRouteInput<Guard, Settings, RouteSettings>,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that mints from the Candy Machine. */\n  instructionKey?: string;\n};\n\n/**\n * Calls the special \"route\" instruction on a specific guard.\n *\n * This allows guards to provide additional features such as creating\n * PDAs that verify a payer before the mint instruction is executed or\n * freezing and thawing minted NFTs.\n *\n * The \"route\" instruction must select a specific guard on a specific group\n * (if groups are enabled) since it is possible for the same type of guard\n * to have different settings based on its group.\n *\n * Additionally, it is possible for a guard to support multiple \"paths\" within\n * their \"route\" instruction. The route settings of the guard will usually use\n * the `path` property to distinguish them.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .callGuardRoute({\n *     candyMachine,\n *     guard: 'allowList',\n *     settings: {\n *       path: 'proof',\n *       merkleProof: getMerkleProof(data, leaf)\n *     },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const callCandyGuardRouteBuilder = <\n  Guard extends keyof RouteSettings & string,\n  Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n  RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n>(\n  metaplex: Metaplex,\n  params: CallCandyGuardRouteBuilderParams<Guard, Settings, RouteSettings>,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { candyMachine, guard, settings, group = null } = params;\n\n  if (!candyMachine.candyGuard) {\n    throw new CandyGuardRequiredOnCandyMachineError();\n  }\n\n  // Route instruction.\n  const parsedRouteSettings = metaplex\n    .candyMachines()\n    .guards()\n    .parseRouteSettings(\n      candyMachine.address,\n      candyMachine.candyGuard,\n      payer,\n      guard,\n      settings,\n      group,\n      programs\n    );\n\n  const routeSigners: Signer[] = [payer, ...parsedRouteSettings.signers];\n  const routeInstruction = createRouteInstruction(\n    {\n      candyGuard: candyMachine.candyGuard.address,\n      candyMachine: candyMachine.address,\n      payer: payer.publicKey,\n    },\n    {\n      args: {\n        // \"GuardType\" is an enum for default guards only and will assert this\n        // whereas we want to allow custom guards, so we need to pass anything\n        // here to create the instruction and override this data afterwards.\n        guard: 0,\n        data: parsedRouteSettings.arguments,\n      },\n      label: group,\n    },\n    metaplex.programs().getCandyGuard(programs).address\n  );\n  routeInstruction.keys.push(...parsedRouteSettings.accountMetas);\n\n  // As promised, we override the guard index here.\n  const availableGuards = metaplex\n    .candyMachines()\n    .guards()\n    .forCandyGuardProgram(programs);\n  const guardIndex = availableGuards.findIndex((g) => g.name === guard);\n  beet.u8.write(routeInstruction.data, 8, guardIndex);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Route instruction.\n      .add({\n        instruction: routeInstruction,\n        signers: routeSigners,\n        key: params.instructionKey ?? 'callGuardRoute',\n      })\n  );\n};\n"],"names":["Key","callCandyGuardRouteOperation","_callCandyGuardRouteOperation","input","key","callCandyGuardRouteOperationHandler","handle","operation","metaplex","scope","builder","callCandyGuardRouteBuilder","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyMachine","guard","settings","group","candyGuard","CandyGuardRequiredOnCandyMachineError","parsedRouteSettings","candyMachines","guards","parseRouteSettings","address","routeSigners","signers","routeInstruction","createRouteInstruction","publicKey","args","data","arguments","label","getCandyGuard","keys","push","accountMetas","availableGuards","forCandyGuardProgram","guardIndex","findIndex","g","name","beet","u8","write","TransactionBuilder","make","setFeePayer","add","instruction","instructionKey"],"mappings":";;;;;AAeA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,8BAAuC,CAAA;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,4BAA4B,GAAGC,8BAA6B;AACzE;AACA,SAASA,6BAA6B,CAKpCC,KAA+D,EACD;EAC9D,OAAO;AAAEC,IAAAA,GAAG,EAAEJ,GAAG;AAAEG,IAAAA,KAAAA;GAAO,CAAA;AAC5B,CAAA;AACAD,6BAA6B,CAACE,GAAG,GAAGJ,GAAG,CAAA;;AAEvC;AACA;AACA;AACA;;AAsEA;AACA;AACA;AACA;AACO,MAAMK,mCAEZ,GAAG;AACF,EAAA,MAAMC,MAAM,CAKVC,SAAuE,EACvEC,QAAkB,EAClBC,KAAqB,EACe;IACpC,MAAMC,OAAO,GAAGC,0BAA0B,CACxCH,QAAQ,EACRD,SAAS,CAACJ,KAAK,EACfM,KAAK,CACN,CAAA;IAED,OAAOC,OAAO,CAACE,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAC/D,GAAA;AACF,EAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaF,MAAAA,0BAA0B,GAAG,CAKxCH,QAAkB,EAClBM,MAAwE,EACxEC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IAAEK,YAAY;IAAEC,KAAK;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAG,IAAA;AAAK,GAAC,GAAGT,MAAM,CAAA;AAE9D,EAAA,IAAI,CAACM,YAAY,CAACI,UAAU,EAAE;IAC5B,MAAM,IAAIC,qCAAqC,EAAE,CAAA;AACnD,GAAA;;AAEA;AACA,EAAA,MAAMC,mBAAmB,GAAGlB,QAAQ,CACjCmB,aAAa,EAAE,CACfC,MAAM,EAAE,CACRC,kBAAkB,CACjBT,YAAY,CAACU,OAAO,EACpBV,YAAY,CAACI,UAAU,EACvBP,KAAK,EACLI,KAAK,EACLC,QAAQ,EACRC,KAAK,EACLP,QAAQ,CACT,CAAA;EAEH,MAAMe,YAAsB,GAAG,CAACd,KAAK,EAAE,GAAGS,mBAAmB,CAACM,OAAO,CAAC,CAAA;EACtE,MAAMC,gBAAgB,GAAGC,sBAAsB,CAC7C;AACEV,IAAAA,UAAU,EAAEJ,YAAY,CAACI,UAAU,CAACM,OAAO;IAC3CV,YAAY,EAAEA,YAAY,CAACU,OAAO;IAClCb,KAAK,EAAEA,KAAK,CAACkB,SAAAA;AACf,GAAC,EACD;AACEC,IAAAA,IAAI,EAAE;AACJ;AACA;AACA;AACAf,MAAAA,KAAK,EAAE,CAAC;MACRgB,IAAI,EAAEX,mBAAmB,CAACY,SAAAA;KAC3B;AACDC,IAAAA,KAAK,EAAEhB,KAAAA;AACT,GAAC,EACDf,QAAQ,CAACQ,QAAQ,EAAE,CAACwB,aAAa,CAACxB,QAAQ,CAAC,CAACc,OAAO,CACpD,CAAA;EACDG,gBAAgB,CAACQ,IAAI,CAACC,IAAI,CAAC,GAAGhB,mBAAmB,CAACiB,YAAY,CAAC,CAAA;;AAE/D;AACA,EAAA,MAAMC,eAAe,GAAGpC,QAAQ,CAC7BmB,aAAa,EAAE,CACfC,MAAM,EAAE,CACRiB,oBAAoB,CAAC7B,QAAQ,CAAC,CAAA;AACjC,EAAA,MAAM8B,UAAU,GAAGF,eAAe,CAACG,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,IAAI,KAAK5B,KAAK,CAAC,CAAA;AACrE6B,EAAAA,IAAI,CAACC,EAAE,CAACC,KAAK,CAACnB,gBAAgB,CAACI,IAAI,EAAE,CAAC,EAAES,UAAU,CAAC,CAAA;AAEnD,EAAA,OACEO,kBAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACtC,KAAK,CAAA;;AAElB;AAAA,GACCuC,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAExB,gBAAgB;AAC7BD,IAAAA,OAAO,EAAED,YAAY;AACrB3B,IAAAA,GAAG,EAAEU,MAAM,CAAC4C,cAAc,IAAI,gBAAA;AAChC,GAAC,CAAC,CAAA;AAER;;;;"}