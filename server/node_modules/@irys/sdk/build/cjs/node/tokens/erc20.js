"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.erc20abi = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const contracts_1 = require("@ethersproject/contracts");
const wallet_1 = require("@ethersproject/wallet");
const arbundles_1 = require("arbundles");
const token_1 = require("../token");
const ethereum_1 = __importDefault(require("./ethereum"));
class ERC20Config extends ethereum_1.default {
    constructor(config) {
        super(config);
        this.contractAddress = config.contractAddress;
    }
    getContract() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.contractInstance) {
                this.contractInstance = new contracts_1.Contract(this.contractAddress, exports.erc20abi, new wallet_1.Wallet(this.wallet, yield this.getProvider()));
                this.base = ["wei", Math.pow(10, yield this.contractInstance.decimals())];
            }
            return this.contractInstance;
        });
    }
    getTx(txId) {
        const _super = Object.create(null, {
            getProvider: { get: () => super.getProvider }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield (yield _super.getProvider.call(this)).getTransaction(txId);
            if (!response)
                throw new Error("Tx doesn't exist");
            if (response.data.length !== 138 ||
                response.data.slice(2, 10) !== "a9059cbb" // standard ERC20-ABI method ID for transfers
            ) {
                throw new Error("Tx isn't a ERC20 transfer");
            }
            const to = `0x${response.data.slice(34, 74)}`;
            const amount = new bignumber_js_1.default(response.data.slice(74), 16);
            return {
                from: response.from,
                to,
                blockHeight: response.blockNumber ? new bignumber_js_1.default(response.blockNumber) : undefined,
                amount,
                pending: response.blockNumber ? false : true,
                confirmed: response.confirmations >= this.minConfirm,
            };
        });
    }
    /**
     * Returns the fee in CONTRACT TOKEN UNITS equivalent to the fee derived via gas token units, i.e Wei
     * @param amount
     * @param to
     * @returns
     */
    getFee(amount, to) {
        return __awaiter(this, void 0, void 0, function* () {
            const _amount = "0x" + new bignumber_js_1.default(amount).toString(16);
            const contract = yield this.getContract();
            const provider = yield this.getProvider();
            const gasPrice = yield provider.getGasPrice();
            const gasLimit = yield contract.estimateGas.transfer(to, _amount);
            const units = new bignumber_js_1.default(gasPrice.mul(gasLimit).toString()); // price in WEI
            const [fiatGasPrice] = yield this.getGas(); // get price of gas units
            const value = fiatGasPrice.multipliedBy(units); // value of the fee
            // convert value
            const ctPrice = new bignumber_js_1.default(yield this.price()); // price for this token
            const ctAmount = new bignumber_js_1.default(value).dividedToIntegerBy(ctPrice);
            // const b = ctAmount.multipliedBy(ctPrice)
            // const c = value.dividedBy(this.base[1])
            // console.log(b);
            // console.log(c)
            return ctAmount;
        });
    }
    createTx(amount, to, _fee) {
        return __awaiter(this, void 0, void 0, function* () {
            const provider = yield this.getProvider();
            const wallet = new wallet_1.Wallet(this.wallet, provider);
            const contract = yield this.getContract();
            const _amount = "0x" + new bignumber_js_1.default(amount).toString(16);
            const tx = yield contract.populateTransaction.transfer(to, _amount);
            // Needed *specifically* for ERC20
            tx.gasPrice = yield provider.getGasPrice();
            tx.gasLimit = yield contract.estimateGas.transfer(to, _amount);
            tx.chainId = (yield provider.getNetwork()).chainId;
            if (!this.address)
                throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
            tx.nonce = yield provider.getTransactionCount(this.address);
            const signedTx = yield wallet.signTransaction(tx);
            const txId = "0x" + (0, arbundles_1.keccak256)(Buffer.from(signedTx.slice(2), "hex")).toString("hex");
            return { txId, tx: signedTx };
        });
    }
    // TODO: create a nicer solution than just overrides (larger issue: some currencies aren't on redstone)
    getGas() {
        return __awaiter(this, void 0, void 0, function* () {
            return [new bignumber_js_1.default(yield (0, token_1.getRedstonePrice)("ETH")), 1e18];
        });
    }
}
exports.default = ERC20Config;
exports.erc20abi = [
    {
        constant: true,
        inputs: [],
        name: "name",
        outputs: [
            {
                name: "",
                type: "string",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: false,
        inputs: [
            {
                name: "_spender",
                type: "address",
            },
            {
                name: "_value",
                type: "uint256",
            },
        ],
        name: "approve",
        outputs: [
            {
                name: "",
                type: "bool",
            },
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        constant: true,
        inputs: [],
        name: "totalSupply",
        outputs: [
            {
                name: "",
                type: "uint256",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: false,
        inputs: [
            {
                name: "_from",
                type: "address",
            },
            {
                name: "_to",
                type: "address",
            },
            {
                name: "_value",
                type: "uint256",
            },
        ],
        name: "transferFrom",
        outputs: [
            {
                name: "",
                type: "bool",
            },
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        constant: true,
        inputs: [],
        name: "decimals",
        outputs: [
            {
                name: "",
                type: "uint8",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "_owner",
                type: "address",
            },
        ],
        name: "balanceOf",
        outputs: [
            {
                name: "balance",
                type: "uint256",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: true,
        inputs: [],
        name: "symbol",
        outputs: [
            {
                name: "",
                type: "string",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        constant: false,
        inputs: [
            {
                name: "_to",
                type: "address",
            },
            {
                name: "_value",
                type: "uint256",
            },
        ],
        name: "transfer",
        outputs: [
            {
                name: "",
                type: "bool",
            },
        ],
        payable: false,
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        constant: true,
        inputs: [
            {
                name: "_owner",
                type: "address",
            },
            {
                name: "_spender",
                type: "address",
            },
        ],
        name: "allowance",
        outputs: [
            {
                name: "",
                type: "uint256",
            },
        ],
        payable: false,
        stateMutability: "view",
        type: "function",
    },
    {
        payable: true,
        stateMutability: "payable",
        type: "fallback",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                name: "owner",
                type: "address",
            },
            {
                indexed: true,
                name: "spender",
                type: "address",
            },
            {
                indexed: false,
                name: "value",
                type: "uint256",
            },
        ],
        name: "Approval",
        type: "event",
    },
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                name: "from",
                type: "address",
            },
            {
                indexed: true,
                name: "to",
                type: "address",
            },
            {
                indexed: false,
                name: "value",
                type: "uint256",
            },
        ],
        name: "Transfer",
        type: "event",
    },
];
//# sourceMappingURL=erc20.js.map