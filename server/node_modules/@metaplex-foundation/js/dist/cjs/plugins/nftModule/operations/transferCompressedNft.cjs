'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var web3_js = require('@solana/web3.js');
var mplBubblegum = require('@metaplex-foundation/mpl-bubblegum');
var splAccountCompression = require('@solana/spl-account-compression');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'TransferCompressedNftOperation';

/**
 * Transfers a compressed NFT or SFT from one account to another.
 *
 * ```ts
 * await metaplex.nfts().transfer({
 *   nftOrSft,
 *   toOwner,
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const transferCompressedNftOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const transferCompressedNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return transferCompressedNftBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Transfers a compressed NFT from one account to another.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .transfer({
 *     nftOrSft,
 *     toOwner,
 *     compression,
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const transferCompressedNftBuilder = (metaplex, params, options = {}) => {
  const {
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    toOwner,
    compression
  } = params;

  // ensure all required compression data has been supplied
  if (!compression.merkleTree || !compression.assetProof || !compression.data || !compression.ownership) throw Error('Invalid compression data supplied');
  const merkleTree = new web3_js.PublicKey(compression.assetProof.tree_id);
  const treeAuthority = compression.merkleTree?.getAuthority();
  const canopyDepth = compression.merkleTree?.getCanopyDepth();
  const leafOwner = new web3_js.PublicKey(compression.ownership.owner);
  const leafDelegate = !!compression.ownership?.delegate ? new web3_js.PublicKey(compression.ownership.delegate) : leafOwner;

  // check if the provided assetProof path is valid for the provided root
  if (!splAccountCompression.MerkleTree.verify(new web3_js.PublicKey(compression.assetProof.root).toBuffer(), {
    leafIndex: compression.data.leaf_id,
    leaf: new web3_js.PublicKey(compression.assetProof.leaf).toBuffer(),
    root: new web3_js.PublicKey(compression.assetProof.root).toBuffer(),
    proof: compression.assetProof.proof.map(node => new web3_js.PublicKey(node).toBuffer())
  })) throw Error('Provided proof path did not pass verification');

  // parse the list of proof addresses into a valid AccountMeta[]
  const proofPath = compression.assetProof.proof.map(node => ({
    pubkey: new web3_js.PublicKey(node),
    isSigner: false,
    isWritable: false
  })).slice(0, compression.assetProof.proof.length - (!!canopyDepth ? canopyDepth : 0));
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).add({
    instruction: mplBubblegum.createTransferInstruction({
      merkleTree,
      treeAuthority,
      leafOwner,
      leafDelegate,
      newLeafOwner: toOwner,
      logWrapper: splAccountCompression.SPL_NOOP_PROGRAM_ID,
      compressionProgram: splAccountCompression.SPL_ACCOUNT_COMPRESSION_PROGRAM_ID,
      anchorRemainingAccounts: proofPath
    }, {
      root: [...new web3_js.PublicKey(compression.assetProof.root.trim()).toBytes()],
      dataHash: [...new web3_js.PublicKey(compression.data.data_hash.trim()).toBytes()],
      creatorHash: [...new web3_js.PublicKey(compression.data.creator_hash.trim()).toBytes()],
      nonce: compression.data.leaf_id,
      index: compression.data.leaf_id
    }),
    signers: [payer],
    key: params.instructionKey ?? 'transferCompressedNft'
  });
};

/**
 * Helper function to auto fetch the asset proof data from the ReadApi
 */
async function prepareTransferCompressedNftBuilder(metaplex, params) {
  if (!params?.compression) params.compression = {};

  // auto fetch the assetProof data from the ReadApi, when not provided
  if (!params?.compression?.assetProof) {
    params.compression.assetProof = await metaplex.rpc().getAssetProof(params.nftOrSft.address);
  }
  const [asset, merkleTree] = await Promise.all([
  // get the asset from the ReadApi
  metaplex.rpc().getAsset(params.nftOrSft.address),
  // get the on-chain merkle tree AccountInfo (mainly needed for the `canopyHeight`)
  splAccountCompression.ConcurrentMerkleTreeAccount.fromAccountAddress(metaplex.connection, new web3_js.PublicKey(params.compression.assetProof.tree_id))]);

  // update the params data for use by the transfer operation
  params.compression.merkleTree = merkleTree;
  params.compression.data = asset.compression;
  params.compression.ownership = asset.ownership;
  return params;
}

exports.prepareTransferCompressedNftBuilder = prepareTransferCompressedNftBuilder;
exports.transferCompressedNftBuilder = transferCompressedNftBuilder;
exports.transferCompressedNftOperation = transferCompressedNftOperation;
exports.transferCompressedNftOperationHandler = transferCompressedNftOperationHandler;
//# sourceMappingURL=transferCompressedNft.cjs.map
