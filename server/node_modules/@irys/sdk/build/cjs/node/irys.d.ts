import "../common/hack.js";
import Irys from "../common/irys";
import type { CreateAndUploadOptions, IrysConfig, UploadResponse } from "../common/types";
import type { NodeToken } from "./types";
import NodeUploader from "./upload";
import { NodeProvenance } from "./provenance";
export declare class NodeIrys extends Irys {
    uploader: NodeUploader;
    tokenConfig: NodeToken;
    provenance: NodeProvenance;
    /**
     * Constructs a new Irys instance, as well as supporting subclasses
     * @param url - URL to the bundler
     * @param key - private key (in whatever form required)
     */
    constructor({ url, token, key, config }: {
        url: "node1" | "node2" | "devnet" | string;
        token: string;
        key?: any;
        config?: IrysConfig;
    });
    /**
     * Upload a file at the specified path to the bundler
     * @param path path to the file to upload
     * @returns bundler response
     */
    uploadFile(path: string, opts?: CreateAndUploadOptions): Promise<UploadResponse>;
    /**
     * @param path - path to the folder to be uploaded
     * @param indexFile - path to the index file (i.e index.html)
     * @param batchSize - number of items to upload concurrently
     * @param interactivePreflight - whether to interactively prompt the user for confirmation of upload (CLI ONLY)
     * @param keepDeleted - Whether to keep previously uploaded (but now deleted) files in the manifest
     * @param logFunction - for handling logging from the uploader for UX
     * @param manifestTags - For allowing the caller to pass tags that will be added to the manifest transaction.
     * @returns
     */
    uploadFolder(path: string, { batchSize, keepDeleted, indexFile, interactivePreflight, logFunction, manifestTags, itemOptions, }?: {
        batchSize?: number;
        keepDeleted?: boolean;
        indexFile?: string;
        interactivePreflight?: boolean;
        logFunction?: (log: string) => Promise<void>;
        manifestTags?: {
            name: string;
            value: string;
        }[];
        itemOptions?: CreateAndUploadOptions;
    }): Promise<UploadResponse | undefined>;
    static init(opts: {
        url: string;
        token: string;
        privateKey?: string;
        publicKey?: string;
        signingFunction?: (msg: Uint8Array) => Promise<Uint8Array>;
        collectSignatures?: (msg: Uint8Array) => Promise<{
            signatures: string[];
            bitmap: number[];
        }>;
        providerUrl?: string;
        timeout?: number;
        contractAddress?: string;
    }): Promise<NodeIrys>;
}
export default NodeIrys;
