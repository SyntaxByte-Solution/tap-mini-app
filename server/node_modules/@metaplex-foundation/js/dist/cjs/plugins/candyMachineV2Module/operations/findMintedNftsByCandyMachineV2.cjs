'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var pdas = require('../pdas.cjs');
var Operation = require('../../../types/Operation.cjs');

// -----------------
// Operation
// -----------------

const Key = 'FindMintedNftsByCandyMachineV2Operation';

/**
 * Find all minted NFTs from a given Candy Machine address.
 *
 * ```ts
 * const nfts = await metaplex
 *   .candyMachinesV2()
 *   .findMintedNfts({ candyMachine };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findMintedNftsByCandyMachineV2Operation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findMintedNftsByCandyMachineV2OperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      candyMachine,
      version = 2
    } = operation.input;
    const firstCreator = version === 2 ? pdas.findCandyMachineV2CreatorPda(candyMachine) : candyMachine;
    const mintedNfts = await metaplex.nfts().findAllByCreator({
      creator: firstCreator,
      position: 1
    }, scope);
    return mintedNfts;
  }
};

exports.findMintedNftsByCandyMachineV2Operation = findMintedNftsByCandyMachineV2Operation;
exports.findMintedNftsByCandyMachineV2OperationHandler = findMintedNftsByCandyMachineV2OperationHandler;
//# sourceMappingURL=findMintedNftsByCandyMachineV2.cjs.map
