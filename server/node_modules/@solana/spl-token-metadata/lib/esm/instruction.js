import { getBooleanEncoder, getBytesEncoder, getDataEnumCodec, getStructEncoder } from '@solana/codecs-data-structures';
import { getU64Encoder } from '@solana/codecs-numbers';
import { getStringEncoder } from '@solana/codecs-strings';
import { getOptionEncoder } from '@solana/options';
import { splDiscriminate } from '@solana/spl-type-length-value';
import { TransactionInstruction } from '@solana/web3.js';
import { getFieldCodec, getFieldConfig } from './field.js';
function packInstruction(layout, discriminator, values) {
    const encoder = getStructEncoder(layout);
    const data = encoder.encode(values);
    return Buffer.concat([discriminator, data]);
}
export function createInitializeInstruction(args) {
    const { programId, metadata, updateAuthority, mint, mintAuthority, name, symbol, uri } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: false, isWritable: false, pubkey: updateAuthority },
            { isSigner: false, isWritable: false, pubkey: mint },
            { isSigner: true, isWritable: false, pubkey: mintAuthority },
        ],
        data: packInstruction([
            ['name', getStringEncoder()],
            ['symbol', getStringEncoder()],
            ['uri', getStringEncoder()],
        ], splDiscriminate('spl_token_metadata_interface:initialize_account'), { name, symbol, uri }),
    });
}
export function createUpdateFieldInstruction(args) {
    const { programId, metadata, updateAuthority, field, value } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: updateAuthority },
        ],
        data: packInstruction([
            ['field', getDataEnumCodec(getFieldCodec())],
            ['value', getStringEncoder()],
        ], splDiscriminate('spl_token_metadata_interface:updating_field'), { field: getFieldConfig(field), value }),
    });
}
export function createRemoveKeyInstruction(args) {
    const { programId, metadata, updateAuthority, key, idempotent } = args;
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: updateAuthority },
        ],
        data: packInstruction([
            ['idempotent', getBooleanEncoder()],
            ['key', getStringEncoder()],
        ], splDiscriminate('spl_token_metadata_interface:remove_key_ix'), { idempotent, key }),
    });
}
export function createUpdateAuthorityInstruction(args) {
    const { programId, metadata, oldAuthority, newAuthority } = args;
    const newAuthorityBuffer = Buffer.alloc(32);
    if (newAuthority) {
        newAuthorityBuffer.set(newAuthority.toBuffer());
    }
    else {
        newAuthorityBuffer.fill(0);
    }
    return new TransactionInstruction({
        programId,
        keys: [
            { isSigner: false, isWritable: true, pubkey: metadata },
            { isSigner: true, isWritable: false, pubkey: oldAuthority },
        ],
        data: packInstruction([['newAuthority', getBytesEncoder({ size: 32 })]], splDiscriminate('spl_token_metadata_interface:update_the_authority'), { newAuthority: newAuthorityBuffer }),
    });
}
export function createEmitInstruction(args) {
    const { programId, metadata, start, end } = args;
    return new TransactionInstruction({
        programId,
        keys: [{ isSigner: false, isWritable: false, pubkey: metadata }],
        data: packInstruction([
            ['start', getOptionEncoder(getU64Encoder())],
            ['end', getOptionEncoder(getU64Encoder())],
        ], splDiscriminate('spl_token_metadata_interface:emitter'), { start: start ?? null, end: end ?? null }),
    });
}
//# sourceMappingURL=instruction.js.map