import { createVerifySizedCollectionItemInstruction, createVerifyCollectionInstruction, createVerifyInstruction, VerificationArgs } from '@metaplex-foundation/mpl-token-metadata';
import { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';
import { useOperation } from '../../../types/Operation.mjs';
import { TransactionBuilder } from '../../../utils/TransactionBuilder.mjs';

// -----------------
// Operation
// -----------------

const Key = 'VerifyNftCollectionOperation';

/**
 * Verifies the collection of an NFT or SFT.
 *
 * ```ts
 * await metaplex
 *   .nfts()
 *   .verifyCollection({ mintAddress, collectionMintAddress };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const verifyNftCollectionOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const verifyNftCollectionOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return verifyNftCollectionBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Verifies the collection of an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .verifyCollection({ mintAddress, collectionMintAddress });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const verifyNftCollectionBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    mintAddress,
    collectionMintAddress,
    isSizedCollection = true,
    isDelegated = false,
    collectionAuthority = metaplex.identity(),
    collectionUpdateAuthority = metaplex.identity().publicKey
  } = params;

  // Programs.
  const systemProgram = metaplex.programs().getSystem(programs);
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);

  // Accounts.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: mintAddress,
    programs
  });
  const collectionMetadata = metaplex.nfts().pdas().metadata({
    mint: collectionMintAddress,
    programs
  });
  const collectionEdition = metaplex.nfts().pdas().masterEdition({
    mint: collectionMintAddress,
    programs
  });
  if (isDelegated === 'legacyDelegate' || isDelegated === true) {
    const accounts = {
      metadata,
      collectionAuthority: collectionAuthority.publicKey,
      payer: payer.publicKey,
      collectionMint: collectionMintAddress,
      collection: collectionMetadata,
      collectionMasterEditionAccount: collectionEdition
    };
    const instruction = isSizedCollection ? createVerifySizedCollectionItemInstruction(accounts, tokenMetadataProgram.address) : createVerifyCollectionInstruction(accounts, tokenMetadataProgram.address);
    instruction.keys.push({
      pubkey: metaplex.nfts().pdas().collectionAuthorityRecord({
        mint: collectionMintAddress,
        collectionAuthority: collectionAuthority.publicKey,
        programs
      }),
      isWritable: false,
      isSigner: false
    });
    return TransactionBuilder.make().setFeePayer(payer).add({
      instruction,
      signers: [payer, collectionAuthority],
      key: params.instructionKey ?? 'verifyCollection'
    });
  }
  const delegateRecord = isDelegated === 'metadataDelegate' ? metaplex.nfts().pdas().metadataDelegateRecord({
    mint: collectionMintAddress,
    type: 'CollectionV1',
    updateAuthority: collectionUpdateAuthority,
    delegate: collectionAuthority.publicKey,
    programs
  }) : undefined;
  return TransactionBuilder.make().setFeePayer(payer).add({
    instruction: createVerifyInstruction({
      authority: collectionAuthority.publicKey,
      delegateRecord,
      metadata,
      collectionMint: collectionMintAddress,
      collectionMetadata,
      collectionMasterEdition: collectionEdition,
      systemProgram: systemProgram.address,
      sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY
    }, {
      verificationArgs: VerificationArgs.CollectionV1
    }, tokenMetadataProgram.address),
    signers: [collectionAuthority],
    key: params.instructionKey ?? 'verifyCollection'
  });
};

export { verifyNftCollectionBuilder, verifyNftCollectionOperation, verifyNftCollectionOperationHandler };
//# sourceMappingURL=verifyNftCollection.mjs.map
