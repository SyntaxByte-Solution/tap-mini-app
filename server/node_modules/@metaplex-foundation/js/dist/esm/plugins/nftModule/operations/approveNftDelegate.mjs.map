{"version":3,"file":"approveNftDelegate.mjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftDelegate.ts"],"sourcesContent":["import {\n  createDelegateInstruction,\n  DelegateArgs,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthority,\n  TokenMetadataAuthorityHolder,\n  TokenMetadataAuthorityMetadata,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport {\n  DelegateInputWithData,\n  parseTokenMetadataDelegateInput,\n} from '../DelegateInput';\nimport { getDefaultDelegateArgs } from '../DelegateType';\nimport { isNonFungible, Sft } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftDelegateOperation' as const;\n\n/**\n * Approve a new delegate authority for an NFT or SFT.\n *\n * ```ts\n * await metaplex.nfts().delegate({\n *   nftOrSft,\n *   delegate,\n *   delegateArgs\n * });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftDelegateOperation =\n  useOperation<ApproveNftDelegateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftDelegateOperation = Operation<\n  typeof Key,\n  ApproveNftDelegateInput,\n  ApproveNftDelegateOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftDelegateInput = {\n  /**\n   * The NFT or SFT for which we want to approve a delegate.\n   * We only need its address and token standard.\n   */\n  nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;\n\n  /**\n   * An authority allowed to approve a new delegate authority.\n   *\n   * Note that Delegate authorities are not supported for this\n   * instruction as delegates cannot approve other delegates.\n   *\n   * If a `Signer` is provided directly, it will be either\n   * used as the update authority or as the token holder\n   * based on the delegate type, i.g. `delegate.type`.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?:\n    | Signer\n    | TokenMetadataAuthorityMetadata\n    | TokenMetadataAuthorityHolder;\n\n  /**\n   * The authorization rules and data to use\n   * when approving the delegate authority.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n\n  /**\n   * The role, address, approver and data of the delegate to approve.\n   */\n  delegate: DelegateInputWithData;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftDelegateOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftDelegateOperationHandler: OperationHandler<ApproveNftDelegateOperation> =\n  {\n    handle: async (\n      operation: ApproveNftDelegateOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftDelegateOutput> => {\n      return approveNftDelegateBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftDelegateBuilderParams = Omit<\n  ApproveNftDelegateInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Approve a new delegate authority for an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .delegate({\n *     nftOrSft,\n *     delegate,\n *     delegateArgs\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftDelegateBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftDelegateBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    nftOrSft,\n    authority = metaplex.identity(),\n    authorizationDetails,\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const masterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: nftOrSft.address,\n    programs,\n  });\n\n  // New Delegate.\n  const { delegateRecord, delegate, isTokenDelegate } =\n    parseTokenMetadataDelegateInput(\n      metaplex,\n      nftOrSft.address,\n      params.delegate,\n      programs\n    );\n\n  // Auth.\n  let tokenMetadataAuthority: TokenMetadataAuthority;\n  if ('__kind' in authority) {\n    tokenMetadataAuthority = authority;\n  } else if ('owner' in params.delegate) {\n    tokenMetadataAuthority = {\n      __kind: 'holder',\n      owner: authority,\n      token: metaplex.tokens().pdas().associatedTokenAccount({\n        mint: nftOrSft.address,\n        owner: authority.publicKey,\n        programs,\n      }),\n    };\n  } else {\n    tokenMetadataAuthority = { __kind: 'metadata', updateAuthority: authority };\n  }\n\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority: tokenMetadataAuthority,\n    authorizationDetails,\n    programs,\n  });\n\n  const delegateArgsWithoutAuthData: Omit<DelegateArgs, 'authorizationData'> =\n    params.delegate.data === undefined\n      ? getDefaultDelegateArgs(params.delegate.type)\n      : {\n          __kind: params.delegate.type,\n          ...params.delegate.data,\n        };\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createDelegateInstruction(\n          {\n            delegateRecord,\n            delegate,\n            metadata,\n            masterEdition: isNonFungible(nftOrSft) ? masterEdition : undefined,\n            tokenRecord: isTokenDelegate ? delegateRecord : undefined,\n            mint: nftOrSft.address,\n            token: auth.accounts.token,\n            authority: auth.accounts.authority,\n            payer: payer.publicKey,\n            systemProgram: systemProgram.address,\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            splTokenProgram: tokenProgram.address,\n            authorizationRules: auth.accounts.authorizationRules,\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n          },\n          {\n            delegateArgs: {\n              ...delegateArgsWithoutAuthData,\n              ...auth.data,\n            } as DelegateArgs,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, ...auth.signers],\n        key: params.instructionKey ?? 'approveNftDelegate',\n      })\n  );\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","approveNftDelegateOperation","useOperation","approveNftDelegateOperationHandler","handle","operation","metaplex","scope","approveNftDelegateBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","authority","identity","authorizationDetails","tokenMetadataProgram","getTokenMetadata","tokenProgram","getToken","systemProgram","getSystem","metadata","nfts","pdas","mint","address","masterEdition","delegateRecord","delegate","isTokenDelegate","parseTokenMetadataDelegateInput","tokenMetadataAuthority","__kind","owner","token","tokens","associatedTokenAccount","publicKey","updateAuthority","auth","parseTokenMetadataAuthorization","delegateArgsWithoutAuthData","data","undefined","getDefaultDelegateArgs","type","TransactionBuilder","make","setFeePayer","add","instruction","createDelegateInstruction","isNonFungible","tokenRecord","accounts","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","authorizationRules","authorizationRulesProgram","delegateArgs","signers","key","instructionKey"],"mappings":"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"}