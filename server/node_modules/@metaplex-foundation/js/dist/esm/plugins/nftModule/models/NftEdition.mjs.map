{"version":3,"file":"NftEdition.mjs","sources":["../../../../../src/plugins/nftModule/models/NftEdition.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  isOriginalEditionAccount,\n  OriginalEditionAccount,\n  OriginalOrPrintEditionAccount,\n  PrintEditionAccount,\n} from '../accounts';\nimport { BigNumber, toBigNumber, toOptionBigNumber } from '@/types';\nimport { assert, Option } from '@/utils';\n\n/** @group Models */\nexport type NftEdition = NftOriginalEdition | NftPrintEdition;\n\n/** @group Model Helpers */\nexport const isNftEdition = (value: any): value is NftEdition =>\n  typeof value === 'object' && value.model === 'nftEdition';\n\n/** @group Model Helpers */\nexport function assertNftEdition(value: any): asserts value is NftEdition {\n  assert(isNftEdition(value), `Expected NftEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftEdition = (\n  account: OriginalOrPrintEditionAccount\n): NftEdition =>\n  isOriginalEditionAccount(account)\n    ? toNftOriginalEdition(account)\n    : toNftPrintEdition(account as PrintEditionAccount);\n\n/** @group Models */\nexport type NftOriginalEdition = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nftEdition';\n\n  /**\n   * Whether or not this is an original edition.\n   * This field helps distinguish between the `NftOriginalEdition`\n   * and the `NftPrintEdition` models.\n   */\n  readonly isOriginal: true;\n\n  /** The address of the edition account. */\n  readonly address: PublicKey;\n\n  /** The current supply of printed editions. */\n  readonly supply: BigNumber;\n\n  /**\n   * The maximum supply of printed editions.\n   * When this is `null`, an unlimited amount of editions\n   * can be printed from the original edition.\n   */\n  readonly maxSupply: Option<BigNumber>;\n};\n\n/** @group Model Helpers */\nexport const isNftOriginalEdition = (value: any): value is NftOriginalEdition =>\n  isNftEdition(value) && value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftOriginalEdition(\n  value: any\n): asserts value is NftOriginalEdition {\n  assert(isNftOriginalEdition(value), `Expected NftOriginalEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftOriginalEdition = (\n  account: OriginalEditionAccount\n): NftOriginalEdition => ({\n  model: 'nftEdition',\n  isOriginal: true,\n  address: account.publicKey,\n  supply: toBigNumber(account.data.supply),\n  maxSupply: toOptionBigNumber(account.data.maxSupply),\n});\n\n/** @group Models */\nexport type NftPrintEdition = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'nftEdition';\n\n  /**\n   * Whether or not this is an original edition.\n   * This field helps distinguish between the `NftOriginalEdition`\n   * and the `NftPrintEdition` models.\n   */\n  readonly isOriginal: false;\n\n  /** The address of the edition account. */\n  readonly address: PublicKey;\n\n  /** The address of the original edition account this was printed from. */\n  readonly parent: PublicKey;\n\n  /**\n   * The number of this printed edition.\n   *\n   * For instance, `1` means this was the very first edition printed\n   * from the original edition. This is a key difference between\n   * printed editions and SFTs as SFTs do not keep track of any\n   * ordering.\n   */\n  readonly number: BigNumber;\n};\n\n/** @group Model Helpers */\nexport const isNftPrintEdition = (value: any): value is NftPrintEdition =>\n  isNftEdition(value) && !value.isOriginal;\n\n/** @group Model Helpers */\nexport function assertNftPrintEdition(\n  value: any\n): asserts value is NftPrintEdition {\n  assert(isNftPrintEdition(value), `Expected NftPrintEdition model`);\n}\n\n/** @group Model Helpers */\nexport const toNftPrintEdition = (\n  account: PrintEditionAccount\n): NftPrintEdition => ({\n  model: 'nftEdition',\n  isOriginal: false,\n  address: account.publicKey,\n  parent: account.data.parent,\n  number: toBigNumber(account.data.edition),\n});\n"],"names":["isNftEdition","value","model","assertNftEdition","assert","toNftEdition","account","isOriginalEditionAccount","toNftOriginalEdition","toNftPrintEdition","isNftOriginalEdition","isOriginal","assertNftOriginalEdition","address","publicKey","supply","toBigNumber","data","maxSupply","toOptionBigNumber","isNftPrintEdition","assertNftPrintEdition","parent","number","edition"],"mappings":";;;;AAUA;;AAGA;AACaA,MAAAA,YAAY,GAAIC,KAAU,IACrC,OAAOA,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,KAAK,KAAK,aAAY;;AAE3D;AACO,SAASC,gBAAgB,CAACF,KAAU,EAA+B;AACxEG,EAAAA,MAAM,CAACJ,YAAY,CAACC,KAAK,CAAC,EAAG,2BAA0B,CAAC,CAAA;AAC1D,CAAA;;AAEA;MACaI,YAAY,GACvBC,OAAsC,IAEtCC,wBAAwB,CAACD,OAAO,CAAC,GAC7BE,oBAAoB,CAACF,OAAO,CAAC,GAC7BG,iBAAiB,CAACH,OAAO,EAAwB;;AAEvD;;AA0BA;AACaI,MAAAA,oBAAoB,GAAIT,KAAU,IAC7CD,YAAY,CAACC,KAAK,CAAC,IAAIA,KAAK,CAACU,WAAU;;AAEzC;AACO,SAASC,wBAAwB,CACtCX,KAAU,EAC2B;AACrCG,EAAAA,MAAM,CAACM,oBAAoB,CAACT,KAAK,CAAC,EAAG,mCAAkC,CAAC,CAAA;AAC1E,CAAA;;AAEA;AACaO,MAAAA,oBAAoB,GAC/BF,OAA+B,KACP;AACxBJ,EAAAA,KAAK,EAAE,YAAY;AACnBS,EAAAA,UAAU,EAAE,IAAI;EAChBE,OAAO,EAAEP,OAAO,CAACQ,SAAS;EAC1BC,MAAM,EAAEC,WAAW,CAACV,OAAO,CAACW,IAAI,CAACF,MAAM,CAAC;AACxCG,EAAAA,SAAS,EAAEC,iBAAiB,CAACb,OAAO,CAACW,IAAI,CAACC,SAAS,CAAA;AACrD,CAAC,EAAC;;AAEF;;AA6BA;AACaE,MAAAA,iBAAiB,GAAInB,KAAU,IAC1CD,YAAY,CAACC,KAAK,CAAC,IAAI,CAACA,KAAK,CAACU,WAAU;;AAE1C;AACO,SAASU,qBAAqB,CACnCpB,KAAU,EACwB;AAClCG,EAAAA,MAAM,CAACgB,iBAAiB,CAACnB,KAAK,CAAC,EAAG,gCAA+B,CAAC,CAAA;AACpE,CAAA;;AAEA;AACaQ,MAAAA,iBAAiB,GAC5BH,OAA4B,KACP;AACrBJ,EAAAA,KAAK,EAAE,YAAY;AACnBS,EAAAA,UAAU,EAAE,KAAK;EACjBE,OAAO,EAAEP,OAAO,CAACQ,SAAS;AAC1BQ,EAAAA,MAAM,EAAEhB,OAAO,CAACW,IAAI,CAACK,MAAM;AAC3BC,EAAAA,MAAM,EAAEP,WAAW,CAACV,OAAO,CAACW,IAAI,CAACO,OAAO,CAAA;AAC1C,CAAC;;;;"}