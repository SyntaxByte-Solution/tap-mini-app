{"version":3,"file":"nftGate.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/nftGate.ts"],"sourcesContent":["import { nftGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftGate guard restricts minting to holders\n * of a specified NFT collection.\n *\n * This means the mint address of an NFT from this\n * collection must be passed when minting.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftGateGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftGateGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftGate guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftGateGuardSettings} for more\n * information on the nftGate guard itself.\n */\nexport type NftGateGuardMintSettings = {\n  /**\n   * The mint address of an NFT from the required\n   * collection that belongs to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftGateGuardManifest: CandyGuardManifest<\n  NftGateGuardSettings,\n  NftGateGuardMintSettings\n> = {\n  name: 'nftGate',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftGateBeet),\n  mintSettingsParser: ({ metaplex, mintSettings, payer, programs }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftGate');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n};\n"],"names":["nftGateGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftGateBeet","mintSettingsParser","metaplex","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA;AACO,MAAMA,oBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,SAAS;AACfC,EAAAA,aAAa,EAAE,EAAE;AACjBC,EAAAA,kBAAkB,EAAEC,mCAAwB,CAACC,yBAAW,CAAC;AACzDC,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAQ;IAAEC,YAAY;IAAEC,KAAK;AAAEC,IAAAA,QAAAA;AAAS,GAAC,KAAK;IACnE,IAAI,CAACF,YAAY,EAAE;AACjB,MAAA,MAAM,IAAIG,oCAA6B,CAAC,SAAS,CAAC,CAAA;AACpD,KAAA;AAEA,IAAA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAY,IACzBL,QAAQ,CAACM,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MAC9CC,IAAI,EAAER,YAAY,CAACQ,IAAI;MACvBC,KAAK,EAAER,KAAK,CAACS,SAAS;AACtBR,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEJ,MAAMS,aAAa,GAAGZ,QAAQ,CAACa,IAAI,EAAE,CAACN,IAAI,EAAE,CAACO,QAAQ,CAAC;MACpDL,IAAI,EAAER,YAAY,CAACQ,IAAI;AACvBN,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLY,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEf,YAAY;AACrBgB,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,EACD;AACEF,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAER,aAAa;AACtBS,QAAAA,UAAU,EAAE,KAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}