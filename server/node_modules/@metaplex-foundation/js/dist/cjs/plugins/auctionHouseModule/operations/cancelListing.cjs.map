{"version":3,"file":"cancelListing.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelListing.ts"],"sourcesContent":["import {\n  CancelInstructionAccounts,\n  createAuctioneerCancelInstruction,\n  createCancelInstruction,\n  createCancelListingReceiptInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AUCTIONEER_PRICE } from '../constants';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Listing } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelListingOperation' as const;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelListing({ auctionHouse, listing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelListingOperation = useOperation<CancelListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelListingOperation = Operation<\n  typeof Key,\n  CancelListingInput,\n  CancelListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelListingInput = {\n  /** The Auction House in which to cancel Bid. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'address' | 'authorityAddress' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Listing to cancel.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, seller address, price, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelListingOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelListingOperationHandler: OperationHandler<CancelListingOperation> =\n  {\n    handle: async (\n      operation: CancelListingOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      cancelListingBuilder(metaplex, operation.input, scope).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelListingBuilderParams = Omit<\n  CancelListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelListingBuilderContext = Omit<CancelListingOutput, 'response'>;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelListing({ auctionHouse, listing });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelListingBuilder = (\n  metaplex: Metaplex,\n  params: CancelListingBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CancelListingBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, listing } = params;\n\n  // Data.\n  const {\n    asset,\n    sellerAddress,\n    receiptAddress,\n    tradeStateAddress,\n    price,\n    tokens,\n  } = listing;\n  const {\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const buyerPrice = hasAuctioneer ? AUCTIONEER_PRICE : price.basisPoints;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Listing Instruction.\n  let cancelListingInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelListingInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouseAddress,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Cancel Listing.\n      .add({\n        instruction: cancelListingInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelListing',\n      })\n\n      // Cancel Listing Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelListingReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelListingOperation","useOperation","cancelListingOperationHandler","handle","operation","metaplex","scope","cancelListingBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","listing","asset","sellerAddress","receiptAddress","tradeStateAddress","price","tokens","address","auctionHouseAddress","authorityAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","buyerPrice","AUCTIONEER_PRICE","basisPoints","accounts","wallet","tokenAccount","token","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","tokenSize","cancelListingInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","pdas","auctioneer","cancelSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelListingReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}