{"version":3,"file":"findBidByReceipt.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findBidByReceipt.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toBidReceiptAccount } from '../accounts';\nimport { AuctionHouse, Bid, toLazyBid } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidByReceiptOperation' as const;\n\n/**\n * Finds a Bid by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findBidByReceipt({ receiptAddress, auctionHouse };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findBidByReceiptOperation =\n  useOperation<FindBidByReceiptOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindBidByReceiptOperation = Operation<\n  typeof Key,\n  FindBidByReceiptInput,\n  Bid\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindBidByReceiptInput = {\n  /**\n   * The address of the bid receipt account.\n   * This is the account that stores information about this bid.\n   * The Bid model is built on top of this account.\n   */\n  receiptAddress: PublicKey;\n\n  /** A model of the Auction House related to this bid. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findBidByReceiptOperationHandler: OperationHandler<FindBidByReceiptOperation> =\n  {\n    handle: async (\n      operation: FindBidByReceiptOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { receiptAddress, auctionHouse } = operation.input;\n\n      const account = toBidReceiptAccount(\n        await metaplex.rpc().getAccount(receiptAddress, scope.commitment)\n      );\n      scope.throwIfCanceled();\n\n      const lazyBid = toLazyBid(account, auctionHouse);\n      return metaplex\n        .auctionHouse()\n        .loadBid({ lazyBid, ...operation.input }, scope);\n    },\n  };\n"],"names":["Key","findBidByReceiptOperation","useOperation","findBidByReceiptOperationHandler","handle","operation","metaplex","scope","receiptAddress","auctionHouse","input","account","toBidReceiptAccount","rpc","getAccount","commitment","throwIfCanceled","lazyBid","toLazyBid","loadBid"],"mappings":";;;;;;;;AAWA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAoC,CAAA;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,yBAAyB,GACpCC,sBAAY,CAA4BF,GAAG,EAAC;;AAE9C;AACA;AACA;AACA;;AA8BA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAoC,EACpCC,QAAkB,EAClBC,KAAqB,KAClB;IACH,MAAM;MAAEC,cAAc;AAAEC,MAAAA,YAAAA;KAAc,GAAGJ,SAAS,CAACK,KAAK,CAAA;AAExD,IAAA,MAAMC,OAAO,GAAGC,4BAAmB,CACjC,MAAMN,QAAQ,CAACO,GAAG,EAAE,CAACC,UAAU,CAACN,cAAc,EAAED,KAAK,CAACQ,UAAU,CAAC,CAClE,CAAA;IACDR,KAAK,CAACS,eAAe,EAAE,CAAA;AAEvB,IAAA,MAAMC,OAAO,GAAGC,aAAS,CAACP,OAAO,EAAEF,YAAY,CAAC,CAAA;AAChD,IAAA,OAAOH,QAAQ,CACZG,YAAY,EAAE,CACdU,OAAO,CAAC;MAAEF,OAAO;AAAE,MAAA,GAAGZ,SAAS,CAACK,KAAAA;KAAO,EAAEH,KAAK,CAAC,CAAA;AACpD,GAAA;AACF;;;;;"}