/// <reference types="node" />
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import * as beetSolana from '@metaplex-foundation/beet-solana';
import { Key } from '../types/Key';
export type EditionMarkerV2Args = {
    key: Key;
    ledger: Uint8Array;
};
export declare class EditionMarkerV2 implements EditionMarkerV2Args {
    readonly key: Key;
    readonly ledger: Uint8Array;
    private constructor();
    static fromArgs(args: EditionMarkerV2Args): EditionMarkerV2;
    static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset?: number): [EditionMarkerV2, number];
    static fromAccountAddress(connection: web3.Connection, address: web3.PublicKey, commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig): Promise<EditionMarkerV2>;
    static gpaBuilder(programId?: web3.PublicKey): beetSolana.GpaBuilder<EditionMarkerV2Args>;
    static deserialize(buf: Buffer, offset?: number): [EditionMarkerV2, number];
    serialize(): [Buffer, number];
    static byteSize(args: EditionMarkerV2Args): number;
    static getMinimumBalanceForRentExemption(args: EditionMarkerV2Args, connection: web3.Connection, commitment?: web3.Commitment): Promise<number>;
    pretty(): {
        key: string;
        ledger: Uint8Array;
    };
}
export declare const editionMarkerV2Beet: beet.FixableBeetStruct<EditionMarkerV2, EditionMarkerV2Args>;
