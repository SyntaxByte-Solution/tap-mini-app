import { toMetadataAccount } from '../accounts.mjs';
import { MetadataV1GpaBuilder } from '../gpaBuilders.mjs';
import { useOperation } from '../../../types/Operation.mjs';
import { toMetadata } from '../models/Metadata.mjs';

// -----------------
// Operation
// -----------------

const Key = 'FindNftsByCreatorOperation';

/**
 * Finds multiple NFTs and SFTs by their creator at a given position.
 *
 * ```ts
 * // Find all by first creator.
 * const nfts = await metaplex
 *   .nfts()
 *   .findAllByCreator({ creator };
 *
 * // Find all by second creator.
 * const nfts = await metaplex
 *   .nfts()
 *   .findAllByCreator({ creator, position: 2 };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const findNftsByCreatorOperation = useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const findNftsByCreatorOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const {
      programs
    } = scope;
    const {
      creator,
      position = 1
    } = operation.input;
    const gpaBuilder = new MetadataV1GpaBuilder(metaplex, metaplex.programs().getTokenMetadata(programs).address);
    const nfts = await gpaBuilder.whereCreator(position, creator).get();
    scope.throwIfCanceled();
    return nfts.map(account => {
      if (account == null) {
        return null;
      }
      try {
        return toMetadata(toMetadataAccount(account));
      } catch (error) {
        return null;
      }
    }).filter(nft => nft !== null);
  }
};

export { findNftsByCreatorOperation, findNftsByCreatorOperationHandler };
//# sourceMappingURL=findNftsByCreator.mjs.map
