{"version":3,"file":"approveTokenDelegateAuthority.cjs","sources":["../../../../../src/plugins/tokenModule/operations/approveTokenDelegateAuthority.ts"],"sourcesContent":["import { createApproveInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  token,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveTokenDelegateAuthorityOperation' as const;\n\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityOperation =\n  useOperation<ApproveTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  ApproveTokenDelegateAuthorityInput,\n  ApproveTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n * */\nexport type ApproveTokenDelegateAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the new delegate authority. */\n  delegateAuthority: PublicKey;\n\n  /**\n   * The maximum amount of tokens that can be manipulated\n   * by the new delegate authority.\n   *\n   * @defaultValue `token(1)`\n   */\n  amount?: SplTokenAmount;\n\n  /**\n   * The owner of the token account as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer | PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveTokenDelegateAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveTokenDelegateAuthorityOperationHandler: OperationHandler<ApproveTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveTokenDelegateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveTokenDelegateAuthorityOutput> => {\n      return approveTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveTokenDelegateAuthorityBuilderParams = Omit<\n  ApproveTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the delegate authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a delegate authority for a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .tokens()\n *   .builders()\n *   .approveDelegateAuthority({\n *     delegateAuthority,\n *     mintAddress,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveTokenDelegateAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    delegateAuthority,\n    amount = token(1),\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: ownerPublicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createApproveInstruction(\n        tokenAddressOrAta,\n        delegateAuthority,\n        ownerPublicKey,\n        amount.basisPoints.toNumber(),\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'approveDelegateAuthority',\n    });\n};\n"],"names":["Key","approveTokenDelegateAuthorityOperation","useOperation","approveTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","scope","approveTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","delegateAuthority","amount","token","owner","identity","tokenAddress","multiSigners","ownerPublicKey","signers","isSigner","publicKey","tokenProgram","getToken","tokenAddressOrAta","tokens","pdas","associatedTokenAccount","mint","TransactionBuilder","make","setFeePayer","add","instruction","createApproveInstruction","basisPoints","toNumber","address","key","instructionKey"],"mappings":";;;;;;;;;;AAiBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAiD,CAAA;;AAE7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,sCAAsC,GACjDC,sBAAY,CAAyCF,GAAG,EAAC;;AAE3D;AACA;AACA;AACA;;AA6DA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAiD,EACjDC,QAAkB,EAClBC,KAAqB,KAC4B;AACjD,IAAA,OAAOC,oCAAoC,CACzCF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAC,CAAA;AAClD,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,oCAAoC,GAAG,CAClDF,QAAkB,EAClBM,MAAkD,EAClDC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;IACJK,WAAW;IACXC,iBAAiB;AACjBC,IAAAA,MAAM,GAAGC,YAAK,CAAC,CAAC,CAAC;AACjBC,IAAAA,KAAK,GAAGhB,QAAQ,CAACiB,QAAQ,EAAE;IAC3BC,YAAY;AACZC,IAAAA,YAAY,GAAG,EAAA;AACjB,GAAC,GAAGb,MAAM,CAAA;EAEV,MAAM,CAACc,cAAc,EAAEC,OAAO,CAAC,GAAGC,eAAQ,CAACN,KAAK,CAAC,GAC7C,CAACA,KAAK,CAACO,SAAS,EAAE,CAACP,KAAK,CAAC,CAAC,GAC1B,CAACA,KAAK,EAAEG,YAAY,CAAC,CAAA;EAEzB,MAAMK,YAAY,GAAGxB,QAAQ,CAACQ,QAAQ,EAAE,CAACiB,QAAQ,CAACjB,QAAQ,CAAC,CAAA;AAC3D,EAAA,MAAMkB,iBAAiB,GACrBR,YAAY,IACZlB,QAAQ,CAAC2B,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;AAC9CC,IAAAA,IAAI,EAAElB,WAAW;AACjBI,IAAAA,KAAK,EAAEI,cAAc;AACrBZ,IAAAA,QAAAA;AACF,GAAC,CAAC,CAAA;EAEJ,OAAOuB,qCAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACxB,KAAK,CAAC,CAClByB,GAAG,CAAC;IACHC,WAAW,EAAEC,iCAAwB,CACnCV,iBAAiB,EACjBb,iBAAiB,EACjBO,cAAc,EACdN,MAAM,CAACuB,WAAW,CAACC,QAAQ,EAAE,EAC7BnB,YAAY,EACZK,YAAY,CAACe,OAAO,CACrB;IACDlB,OAAO;AACPmB,IAAAA,GAAG,EAAElC,MAAM,CAACmC,cAAc,IAAI,0BAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}