{"version":3,"file":"printNewEdition.mjs","sources":["../../../../../src/plugins/nftModule/operations/printNewEdition.ts"],"sourcesContent":["import { createMintNewEditionFromMasterEditionViaTokenInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { toOriginalEditionAccount } from '../accounts';\nimport {\n  assertNftWithToken,\n  NftWithToken,\n  toNftOriginalEdition,\n} from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toBigNumber,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\n\n/**\n * Prints a new edition from an original NFT.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .nfts()\n *   .printNewEdition({ originalMint };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type PrintNewEditionInput = {\n  /** The address of the original NFT. */\n  originalMint: PublicKey;\n\n  /**\n   * The owner of the original NFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  originalTokenAccountOwner?: Signer;\n\n  /**\n   * The address of the original NFT's token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `originalMint` and `originalTokenAccountOwner` parameters.\n   */\n  originalTokenAccount?: PublicKey;\n\n  /**\n   * The address of the new mint account as a Signer.\n   * This is useful if you already have a generated Keypair\n   * for the mint account of the Print NFT to create.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  newMint?: Signer;\n\n  /**\n   * The update authority of the new printed NFT.\n   *\n   * Depending on your use-case, you might want to change that to\n   * the `updateAuthority` of the original NFT.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  newUpdateAuthority?: PublicKey;\n\n  /**\n   * The owner of the new printed NFT.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  newOwner?: PublicKey;\n\n  /**\n   * The address of the new printed NFT's token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `originalMint` and `newOwner` parameters.\n   */\n  newTokenAccount?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type PrintNewEditionOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The newly created NFT and its associated token. */\n  nft: NftWithToken;\n\n  /** The created mint account as a Signer. */\n  mintSigner: Signer;\n\n  /** The address of the metadata account. */\n  metadataAddress: PublicKey;\n\n  /** The address of the edition account. */\n  editionAddress: PublicKey;\n\n  /** The address of the token account. */\n  tokenAddress: PublicKey;\n\n  /** The new supply of the original NFT. */\n  updatedSupply: BigNumber;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (\n      operation: PrintNewEditionOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const originalEditionAccount = await metaplex.rpc().getAccount(\n        metaplex.nfts().pdas().masterEdition({\n          mint: operation.input.originalMint,\n          programs: scope.programs,\n        })\n      );\n      scope.throwIfCanceled();\n\n      const originalEdition = toNftOriginalEdition(\n        toOriginalEditionAccount(originalEditionAccount)\n      );\n      const builder = await printNewEditionBuilder(\n        metaplex,\n        { ...operation.input, originalSupply: originalEdition.supply },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const nft = await metaplex.nfts().findByMint(\n        {\n          mintAddress: output.mintSigner.publicKey,\n          tokenAddress: output.tokenAddress,\n        },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      assertNftWithToken(nft);\n      return { ...output, nft };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type PrintNewEditionBuilderParams = Omit<\n  PrintNewEditionInput,\n  'confirmOptions'\n> & {\n  /** The current supply of the original edition. */\n  originalSupply: BigNumber;\n\n  /** A key to distinguish the instruction that creates the mint account. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n\n  /** A key to distinguish the instruction that prints the new edition. */\n  printNewEditionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type PrintNewEditionBuilderContext = Omit<\n  PrintNewEditionOutput,\n  'response' | 'nft'\n>;\n\n/**\n * Prints a new edition from an original NFT.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .nfts()\n *   .builders()\n *   .printNewEdition({ originalMint });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    originalMint,\n    newMint = Keypair.generate(),\n    newUpdateAuthority = metaplex.identity().publicKey,\n    newOwner = metaplex.identity().publicKey,\n    newTokenAccount,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // Original NFT.\n  const originalMetadataAddress = metaplex.nfts().pdas().metadata({\n    mint: originalMint,\n    programs,\n  });\n  const originalEditionAddress = metaplex.nfts().pdas().masterEdition({\n    mint: originalMint,\n    programs,\n  });\n  const edition = toBigNumber(params.originalSupply.addn(1));\n  const originalEditionMarkPda = metaplex.nfts().pdas().editionMarker({\n    mint: originalMint,\n    edition,\n    programs,\n  });\n\n  // New NFT.\n  const newMintAuthority = Keypair.generate(); // Will be overwritten by edition PDA.\n  const newMetadataAddress = metaplex.nfts().pdas().metadata({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const newEditionAddress = metaplex.nfts().pdas().edition({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const sharedAccounts = {\n    newMetadata: newMetadataAddress,\n    newEdition: newEditionAddress,\n    masterEdition: originalEditionAddress,\n    newMint: newMint.publicKey,\n    editionMarkPda: originalEditionMarkPda,\n    newMintAuthority: newMintAuthority.publicKey,\n    payer: payer.publicKey,\n    newMetadataUpdateAuthority: newUpdateAuthority,\n    metadata: originalMetadataAddress,\n  };\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint(\n      {\n        decimals: 0,\n        initialSupply: token(1),\n        mint: newMint,\n        mintAuthority: newMintAuthority,\n        freezeAuthority: newMintAuthority.publicKey,\n        owner: newOwner,\n        token: newTokenAccount,\n        createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n        initializeMintInstructionKey: params.initializeMintInstructionKey,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey,\n        createTokenAccountInstructionKey:\n          params.createTokenAccountInstructionKey,\n        initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      },\n      { payer, programs }\n    );\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n  const originalTokenAccountOwner =\n    params.originalTokenAccountOwner ?? metaplex.identity();\n  const originalTokenAccount =\n    params.originalTokenAccount ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: originalMint,\n      owner: originalTokenAccountOwner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        metadataAddress: newMetadataAddress,\n        editionAddress: newEditionAddress,\n        tokenAddress,\n        updatedSupply: edition,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add({\n        instruction: createMintNewEditionFromMasterEditionViaTokenInstruction(\n          {\n            ...sharedAccounts,\n            tokenAccountOwner: originalTokenAccountOwner.publicKey,\n            tokenAccount: originalTokenAccount,\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } },\n          tokenMetadataProgram.address\n        ),\n        signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],\n        key: printNewEditionInstructionKey,\n      })\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","scope","originalEditionAccount","rpc","getAccount","nfts","pdas","masterEdition","mint","input","originalMint","programs","throwIfCanceled","originalEdition","toNftOriginalEdition","toOriginalEditionAccount","builder","printNewEditionBuilder","originalSupply","supply","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","nft","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","assertNftWithToken","params","options","payer","getDefaultFeePayer","newMint","Keypair","generate","newUpdateAuthority","identity","newOwner","newTokenAccount","printNewEditionInstructionKey","tokenMetadataProgram","getTokenMetadata","originalMetadataAddress","metadata","originalEditionAddress","edition","toBigNumber","addn","originalEditionMarkPda","editionMarker","newMintAuthority","newMetadataAddress","newEditionAddress","sharedAccounts","newMetadata","newEdition","editionMarkPda","newMetadataUpdateAuthority","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","originalTokenAccountOwner","originalTokenAccount","associatedTokenAccount","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","editionAddress","updatedSupply","add","instruction","createMintNewEditionFromMasterEditionViaTokenInstruction","tokenAccountOwner","tokenAccount","mintNewEditionFromMasterEditionViaTokenArgs","address","signers","key"],"mappings":"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"}