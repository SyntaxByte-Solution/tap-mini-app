'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var web3_js = require('@solana/web3.js');
var Authorization = require('../Authorization.cjs');
var DelegateInput = require('../DelegateInput.cjs');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');
var Metadata = require('../models/Metadata.cjs');

const TOKEN_AUTH_RULES_ID = new web3_js.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'RevokeNftDelegateOperation';

/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const revokeNftDelegateOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const revokeNftDelegateOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    return revokeNftDelegateBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Revoke an existing delegate authority for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .revoke({ sftOrNft, delegate });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const revokeNftDelegateBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    authority = metaplex.identity(),
    authorizationDetails
  } = params;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const tokenProgram = metaplex.programs().getToken(programs);
  const systemProgram = metaplex.programs().getSystem(programs);

  // PDAs.
  const metadata = metaplex.nfts().pdas().metadata({
    mint: nftOrSft.address,
    programs
  });
  const masterEdition = metaplex.nfts().pdas().masterEdition({
    mint: nftOrSft.address,
    programs
  });

  // Delegate to revoke.
  const {
    delegateRecord,
    delegate,
    tokenAccount,
    isTokenDelegate
  } = DelegateInput.parseTokenMetadataDelegateInput(metaplex, nftOrSft.address, params.delegate, programs);

  // Auth.
  let tokenMetadataAuthority;
  if (!('__kind' in authority)) {
    tokenMetadataAuthority = 'owner' in params.delegate ? {
      __kind: 'holder',
      owner: authority,
      token: metaplex.tokens().pdas().associatedTokenAccount({
        mint: nftOrSft.address,
        owner: authority.publicKey,
        programs
      })
    } : {
      __kind: 'metadata',
      updateAuthority: authority
    };
  } else if (authority.__kind === 'self') {
    tokenMetadataAuthority = {
      ...params.delegate,
      __kind: 'owner' in params.delegate ? 'tokenDelegate' : 'metadataDelegate',
      delegate: authority.delegate
    };
  } else {
    tokenMetadataAuthority = authority;
  }
  const auth = Authorization.parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: tokenMetadataAuthority,
    authorizationDetails,
    programs
  });
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Update the metadata account.
  .add({
    instruction: mplTokenMetadata.createRevokeInstruction({
      delegateRecord,
      delegate,
      metadata,
      masterEdition: Metadata.isNonFungible(nftOrSft) ? masterEdition : undefined,
      tokenRecord: isTokenDelegate ? delegateRecord : undefined,
      mint: nftOrSft.address,
      token: tokenAccount,
      authority: auth.accounts.authority,
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: web3_js.SYSVAR_INSTRUCTIONS_PUBKEY,
      splTokenProgram: tokenProgram.address,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      revokeArgs: mplTokenMetadata.RevokeArgs[params.delegate.type]
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.instructionKey ?? 'revokeNftDelegate'
  });
};

exports.revokeNftDelegateBuilder = revokeNftDelegateBuilder;
exports.revokeNftDelegateOperation = revokeNftDelegateOperation;
exports.revokeNftDelegateOperationHandler = revokeNftDelegateOperationHandler;
//# sourceMappingURL=revokeNftDelegate.cjs.map
