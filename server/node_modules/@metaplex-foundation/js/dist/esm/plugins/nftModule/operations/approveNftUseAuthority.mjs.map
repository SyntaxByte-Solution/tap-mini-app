{"version":3,"file":"approveNftUseAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftUseAuthority.ts"],"sourcesContent":["import { createApproveUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftUseAuthorityOperation' as const;\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftUseAuthorityOperation =\n  useOperation<ApproveNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftUseAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftUseAuthorityInput,\n  ApproveNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to approve. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n\n  /**\n   * The number of usages this new use authority\n   * is allowed to perform.\n   *\n   * @defaultValue `1`\n   */\n  numberOfUses?: number;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftUseAuthorityOperationHandler: OperationHandler<ApproveNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftUseAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftUseAuthorityOutput> => {\n      return approveNftUseAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityBuilderParams = Omit<\n  ApproveNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftUseAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs,\n  });\n  const programAsBurner = metaplex.nfts().pdas().burner({\n    programs,\n  });\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the use authority.\n      .add({\n        instruction: createApproveUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            payer: payer.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            metadata,\n            mint: mintAddress,\n            burner: programAsBurner,\n            tokenProgram: tokenProgram.address,\n            systemProgram: systemProgram.address,\n          },\n          {\n            approveUseAuthorityArgs: {\n              numberOfUses: params.numberOfUses ?? 1,\n            },\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner, payer],\n        key: params.instructionKey ?? 'approveUseAuthority',\n      })\n  );\n};\n"],"names":["Key","approveNftUseAuthorityOperation","useOperation","approveNftUseAuthorityOperationHandler","handle","operation","metaplex","scope","approveNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","user","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","useAuthorityRecord","useAuthority","programAsBurner","burner","ownerTokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createApproveUseAuthorityInstruction","ownerTokenAccount","address","approveUseAuthorityArgs","numberOfUses","signers","key","instructionKey"],"mappings":"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"}