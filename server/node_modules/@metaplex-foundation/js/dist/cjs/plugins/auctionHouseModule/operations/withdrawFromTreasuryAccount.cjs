'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplAuctionHouse = require('@metaplex-foundation/mpl-auction-house');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'WithdrawFromTreasuryAccountOperation';

/**
 * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.
 * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.
 *
 * ```ts
 * await metaplex
 *   .auctionHouse()
 *   .withdrawFromTreasuryAccount({ auctionHouse, amount };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const withdrawFromTreasuryAccountOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const withdrawFromTreasuryAccountOperationHandler = {
  handle: async (operation, metaplex, scope) => withdrawFromTreasuryAccountBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions)
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.
 * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .auctionHouse()
 *   .builders()
 *   .withdrawFromTreasuryAccount({ auctionHouse, amount });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const withdrawFromTreasuryAccountBuilder = (metaplex, params, options = {}) => {
  // Data.
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    auctionHouse,
    amount,
    instructionKey,
    authority = metaplex.identity()
  } = params;

  // Accounts.
  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({
    auctionHouse: auctionHouse.address,
    programs
  });
  const accounts = {
    treasuryMint: auctionHouse.treasuryMint.address,
    authority: auctionHouse.authorityAddress,
    treasuryWithdrawalDestination: auctionHouse.treasuryWithdrawalDestinationAddress,
    auctionHouseTreasury,
    auctionHouse: auctionHouse.address
  };

  // Withdraw From Treasury Instruction.
  const withdrawFromTreasuryInstruction = mplAuctionHouse.createWithdrawFromTreasuryInstruction(accounts, {
    amount: amount.basisPoints
  });

  // Signers.
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Withdraw From Treasury.
  .add({
    instruction: withdrawFromTreasuryInstruction,
    signers: [authority],
    key: instructionKey ?? 'withdrawFromTreasuryAccount'
  });
};

exports.withdrawFromTreasuryAccountBuilder = withdrawFromTreasuryAccountBuilder;
exports.withdrawFromTreasuryAccountOperation = withdrawFromTreasuryAccountOperation;
exports.withdrawFromTreasuryAccountOperationHandler = withdrawFromTreasuryAccountOperationHandler;
//# sourceMappingURL=withdrawFromTreasuryAccount.cjs.map
