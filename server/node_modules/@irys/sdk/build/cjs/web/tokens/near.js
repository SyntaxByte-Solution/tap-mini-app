"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const web_1 = require("arbundles/web");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const crypto_1 = require("@near-js/crypto");
const keystores_browser_1 = require("@near-js/keystores-browser");
const transactions_1 = require("@near-js/transactions");
const bs58_1 = __importDefault(require("bs58"));
const borsh_1 = require("borsh");
const bn_js_1 = __importDefault(require("bn.js"));
const js_sha256_1 = require("js-sha256");
const token_1 = __importDefault(require("../token"));
class NearConfig extends token_1.default {
    constructor(config) {
        super(config);
        this.near = this.wallet._near;
        this.base = ["yoctoNEAR", 1e25];
        // this.keyPair = KeyPair.fromString(this.wallet)
    }
    ready() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.wallet.isSignedIn()) {
                throw new Error("Wallet has not been signed in!");
            }
            const keystore = new keystores_browser_1.BrowserLocalStorageKeyStore();
            const account = this.wallet.account();
            // console.log(this.address)
            // console.log(await account.getAccessKeys())
            // this._address = this.wallet.getAccountId()
            // this.keyPair = KeyPair.fromString(this.wallet)
            // console.log(await account.getAccessKeys())
            this.keyPair = yield keystore.getKey(this.wallet._networkId, account.accountId);
            if (!this.keyPair) {
                this.keyPair = crypto_1.KeyPair.fromRandom("ed25519");
                const publicKey = this.keyPair.getPublicKey().toString();
                // this.wallet._networkId
                yield keystore.setKey(this.wallet._networkId, account.accountId, this.keyPair);
                // can't do this :c
                // console.log(publicKey)
                yield account.addKey(publicKey);
            }
            // console.log(this.keyPair.getPublicKey().toString());
            // this._address = this.ownerToAddress(Buffer.from(this.keyPair.getPublicKey().data));
            this._address = yield this.wallet.getAccountId();
            // this.providerInstance = new providers.JsonRpcProvider({ url: this.providerUrl });
            this.providerInstance = this.wallet._near.connection.provider;
            // console.log(this.keyPair);
        });
    }
    /**
     * NEAR wants both the sender ID and tx Hash, so we have to concatenate to keep with the interface.
     * @param txId assumes format senderID:txHash
     */
    getTx(txId) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            // NOTE: their type defs are out of date with their actual API (23-01-2022)... beware the expect-error when debugging!
            const provider = yield this.providerInstance;
            const [id, hash] = txId.split(":");
            const status = yield provider.txStatusReceipts(bs58_1.default.decode(hash), id);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const blockHeight = yield provider.block(status.transaction_outcome.block_hash);
            const latestBlockHeight = (yield provider.block({ finality: "final" })).header.height;
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            if (status.receipts_outcome[0].outcome.status.SuccessValue !== "") {
                throw new Error("Transaction failed!");
            }
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const deposit = (_a = status.receipts[0].receipt.Action.actions[0].Transfer.deposit) !== null && _a !== void 0 ? _a : 0;
            // console.log(decode(status.receipts_outcome[0].block_hash))
            // // const routcometx = await provider.txStatusReceipts(decode(status.receipts_outcome[0].block_hash), status.receipts_outcome[0].id)
            // console.log({ blockHeight, status, latestBlockHeight })
            return {
                from: id,
                to: status.transaction.receiver_id,
                amount: new bignumber_js_1.default(deposit),
                blockHeight: new bignumber_js_1.default(blockHeight.header.height),
                pending: false,
                confirmed: latestBlockHeight - blockHeight.header.height >= this.minConfirm,
            };
        });
    }
    /**
     * address = accountID
     * @param owner // assumed to be the "ed25519:" header + b58 encoded key
     */
    ownerToAddress(owner) {
        // should just return the loaded address?
        const pubkey = typeof owner === "string" ? owner : bs58_1.default.encode(owner);
        return Buffer.from(bs58_1.default.decode(pubkey.replace("ed25519:", ""))).toString("hex");
    }
    sign(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getSigner().sign(data);
        });
    }
    getSigner() {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error
        return new web_1.NearSigner(this.keyPair.secretKey);
    }
    verify(pub, data, signature) {
        return __awaiter(this, void 0, void 0, function* () {
            return web_1.NearSigner.verify(pub, data, signature);
        });
    }
    getCurrentHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            // const provider = await this.getProvider();
            const res = yield this.providerInstance.status();
            return new bignumber_js_1.default(res.sync_info.latest_block_height);
        });
    }
    getFee(_amount, _to) {
        return __awaiter(this, void 0, void 0, function* () {
            // const provider = await this.getProvider();
            // one unit of gas
            // const res = await provider.connection.provider.gasPrice(await (await this.getCurrentHeight()).toNumber())
            const latestBlockHeight = (yield this.providerInstance.block({ finality: "final" })).header.height;
            const res = yield this.providerInstance.gasPrice(latestBlockHeight); // null == gas price as of latest block
            // multiply by action cost in gas units (assume only action is transfer)
            // 4.5x10^11 gas units for fund transfers
            return new bignumber_js_1.default(res.gas_price).multipliedBy(450000000000);
        });
    }
    sendTx(data) {
        return __awaiter(this, void 0, void 0, function* () {
            data;
            const res = yield this.providerInstance.sendTransaction(data);
            return `${this.address}:${res.transaction.hash}`; // encode into compound format
        });
    }
    createTx(amount, to, _fee) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.address)
                throw new Error("Address is undefined - you might be missing a wallet, or have not run Irys.ready()");
            const accessKey = yield this.providerInstance.query({
                request_type: "view_access_key",
                finality: "final",
                account_id: this.address,
                public_key: this.keyPair.getPublicKey().toString(),
            });
            // console.log(accessKey);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            const nonce = ++accessKey.nonce;
            const recentBlockHash = Buffer.from(bs58_1.default.decode(accessKey.block_hash));
            const actions = [transactions_1.actionCreators.transfer(new bn_js_1.default(new bignumber_js_1.default(amount).toString()))];
            const tx = (0, transactions_1.createTransaction)(this.address, this.keyPair.getPublicKey(), to, nonce, actions, recentBlockHash);
            const serialTx = (0, borsh_1.serialize)(transactions_1.SCHEMA, tx);
            const serialTxHash = new Uint8Array(js_sha256_1.sha256.array(serialTx));
            const signature = this.keyPair.sign(serialTxHash);
            const signedTx = new transactions_1.SignedTransaction({
                transaction: tx,
                signature: new transactions_1.Signature({
                    keyType: tx.publicKey.keyType,
                    data: signature.signature,
                }),
            });
            return { tx: signedTx, txId: undefined };
        });
    }
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return Buffer.from(this.keyPair.getPublicKey().data);
        });
    }
}
exports.default = NearConfig;
//# sourceMappingURL=near.js.map