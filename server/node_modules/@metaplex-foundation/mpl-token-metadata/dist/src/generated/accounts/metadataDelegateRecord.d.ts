/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
import { MetadataDelegateRoleSeedArgs } from '../../hooked';
import { Key, KeyArgs } from '../types';
export type MetadataDelegateRecord = Account<MetadataDelegateRecordAccountData>;
export type MetadataDelegateRecordAccountData = {
    key: Key;
    bump: number;
    mint: PublicKey;
    delegate: PublicKey;
    updateAuthority: PublicKey;
};
export type MetadataDelegateRecordAccountDataArgs = {
    key: KeyArgs;
    bump: number;
    mint: PublicKey;
    delegate: PublicKey;
    updateAuthority: PublicKey;
};
export declare function getMetadataDelegateRecordAccountDataSerializer(): Serializer<MetadataDelegateRecordAccountDataArgs, MetadataDelegateRecordAccountData>;
export declare function deserializeMetadataDelegateRecord(rawAccount: RpcAccount): MetadataDelegateRecord;
export declare function fetchMetadataDelegateRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<MetadataDelegateRecord>;
export declare function safeFetchMetadataDelegateRecord(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<MetadataDelegateRecord | null>;
export declare function fetchAllMetadataDelegateRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<MetadataDelegateRecord[]>;
export declare function safeFetchAllMetadataDelegateRecord(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<MetadataDelegateRecord[]>;
export declare function getMetadataDelegateRecordGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<MetadataDelegateRecord, {
    key: KeyArgs;
    bump: number;
    mint: PublicKey;
    delegate: PublicKey;
    updateAuthority: PublicKey;
}>;
export declare function getMetadataDelegateRecordSize(): number;
export declare function findMetadataDelegateRecordPda(context: Pick<Context, 'eddsa' | 'programs'>, seeds: {
    /** The address of the mint account */
    mint: PublicKey;
    /** The role of the metadata delegate */
    delegateRole: MetadataDelegateRoleSeedArgs;
    /** The address of the metadata's update authority */
    updateAuthority: PublicKey;
    /** The address of the delegate authority */
    delegate: PublicKey;
}): Pda;
export declare function fetchMetadataDelegateRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findMetadataDelegateRecordPda>[1], options?: RpcGetAccountOptions): Promise<MetadataDelegateRecord>;
export declare function safeFetchMetadataDelegateRecordFromSeeds(context: Pick<Context, 'eddsa' | 'programs' | 'rpc'>, seeds: Parameters<typeof findMetadataDelegateRecordPda>[1], options?: RpcGetAccountOptions): Promise<MetadataDelegateRecord | null>;
