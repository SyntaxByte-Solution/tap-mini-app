import { TokenStandard } from '@metaplex-foundation/mpl-token-metadata';
import assert from '../../../utils/assert.mjs';
import { removeEmptyChars } from '../../../utils/common.mjs';
import { Pda } from '../../../types/Pda.mjs';
import { toBigNumber } from '../../../types/BigNumber.mjs';

/** @group Models */

/** @group Model Helpers */
const isMetadata = value => typeof value === 'object' && value.model === 'metadata';

/** @group Model Helpers */
function assertMetadata(value) {
  assert(isMetadata(value), `Expected Metadata model`);
}

/** @group Model Helpers */
const toMetadata = (account, json) => ({
  model: 'metadata',
  address: Pda.find(account.owner, [Buffer.from('metadata', 'utf8'), account.owner.toBuffer(), account.data.mint.toBuffer()]),
  mintAddress: account.data.mint,
  updateAuthorityAddress: account.data.updateAuthority,
  json: json ?? null,
  jsonLoaded: json !== undefined,
  name: removeEmptyChars(account.data.data.name),
  symbol: removeEmptyChars(account.data.data.symbol),
  uri: removeEmptyChars(account.data.data.uri),
  isMutable: account.data.isMutable,
  primarySaleHappened: account.data.primarySaleHappened,
  sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,
  editionNonce: account.data.editionNonce,
  creators: account.data.data.creators ?? [],
  tokenStandard: account.data.tokenStandard,
  collection: account.data.collection ? {
    ...account.data.collection,
    address: account.data.collection.key
  } : null,
  collectionDetails: account.data.collectionDetails ? {
    version: account.data.collectionDetails.__kind,
    size: toBigNumber(account.data.collectionDetails.size)
  } : null,
  uses: account.data.uses ? {
    ...account.data.uses,
    remaining: toBigNumber(account.data.uses.remaining),
    total: toBigNumber(account.data.uses.total)
  } : null,
  programmableConfig: account.data.programmableConfig
});
const isNonFungible = nftOrSft => nftOrSft.tokenStandard === null || nftOrSft.tokenStandard === TokenStandard.NonFungible || nftOrSft.tokenStandard === TokenStandard.NonFungibleEdition || nftOrSft.tokenStandard === TokenStandard.ProgrammableNonFungible;
const isProgrammable = nftOrSft => nftOrSft.tokenStandard === TokenStandard.ProgrammableNonFungible;

export { assertMetadata, isMetadata, isNonFungible, isProgrammable, toMetadata };
//# sourceMappingURL=Metadata.mjs.map
