"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebIrys = void 0;
require("../common/hack.js");
const api_1 = __importDefault(require("../common/api"));
const fund_1 = __importDefault(require("../common/fund"));
const irys_1 = __importDefault(require("../common/irys"));
const utils_1 = __importDefault(require("../common/utils"));
const index_1 = __importDefault(require("./tokens/index"));
const provenance_1 = require("../common/provenance");
const transactions_1 = require("../common/transactions");
const arbundles = __importStar(require("./utils"));
const upload_1 = require("./upload");
class WebIrys extends irys_1.default {
    constructor({ url, token, wallet, config, }) {
        var _a, _b, _c;
        switch (url) {
            case undefined:
            case "node1":
                url = "https://node1.irys.xyz";
                break;
            case "node2":
                url = "https://node2.irys.xyz";
                break;
            case "devnet":
                url = "https://devnet.irys.xyz";
                break;
        }
        const parsed = new URL(url);
        // @ts-expect-error types
        super({ url: parsed, arbundles });
        this.api = new api_1.default({
            url: parsed,
            timeout: (_a = config === null || config === void 0 ? void 0 : config.timeout) !== null && _a !== void 0 ? _a : 100000,
            headers: config === null || config === void 0 ? void 0 : config.headers,
        });
        this.tokenConfig = (0, index_1.default)({
            irys: this,
            token: token.toLowerCase(),
            wallet: wallet === null || wallet === void 0 ? void 0 : wallet.provider,
            providerUrl: (_b = config === null || config === void 0 ? void 0 : config.providerUrl) !== null && _b !== void 0 ? _b : wallet === null || wallet === void 0 ? void 0 : wallet.rpcUrl,
            contractAddress: config === null || config === void 0 ? void 0 : config.contractAddress,
            providerName: wallet === null || wallet === void 0 ? void 0 : wallet.name,
        });
        this.token = this.tokenConfig.name;
        if (parsed.host === "devnet.irys.network" && !((_c = config === null || config === void 0 ? void 0 : config.providerUrl) !== null && _c !== void 0 ? _c : ((wallet === null || wallet === void 0 ? void 0 : wallet.rpcUrl) || this.tokenConfig.inheritsRPC)))
            throw new Error(`Using ${parsed.host} requires a dev/testnet RPC to be configured! see https://docs.irys.network/sdk/using-devnet`);
        this.utils = new utils_1.default(this.api, this.token, this.tokenConfig);
        this.uploader = new upload_1.WebUploader(this);
        this.funder = new fund_1.default(this.utils);
        this.uploader = new upload_1.WebUploader(this);
        this.provenance = new provenance_1.Provenance(this);
        this.transactions = new transactions_1.Transaction(this);
        this.address = "Please run `await Irys.ready()`";
        this.uploadFolder = this.uploader.uploadFolder.bind(this.uploader);
        this.uploadFile = this.uploader.uploadFile.bind(this.uploader);
    }
}
exports.WebIrys = WebIrys;
exports.default = WebIrys;
//# sourceMappingURL=irys.js.map