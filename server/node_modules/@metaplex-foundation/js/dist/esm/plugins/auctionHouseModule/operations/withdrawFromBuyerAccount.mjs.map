{"version":3,"file":"withdrawFromBuyerAccount.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromBuyerAccount.ts"],"sourcesContent":["import {\n  createAuctioneerWithdrawInstruction,\n  createWithdrawInstruction,\n  WithdrawInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  AuctioneerAuthorityRequiredError,\n  WithdrawFromBuyerAccountRequiresSignerError,\n} from '../errors';\nimport { AuctionHouse } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromBuyerAccountOperation' as const;\n\n/**\n * Withdraws funds from the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromBuyerAccount({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountOperation =\n  useOperation<WithdrawFromBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromBuyerAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromBuyerAccountInput,\n  WithdrawFromBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountInput = {\n  /** The Auction House from which escrow buyer withdraws funds. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who withdraws funds.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: PublicKey | Signer;\n\n  /**\n   * The Authority key.\n   * It is required when the buyer is not a signer.\n   * There must be one and only one signer; Authority or Buyer must sign.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  authority?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromBuyerAccountOperationHandler: OperationHandler<WithdrawFromBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromBuyerAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromBuyerAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountBuilderParams = Omit<\n  WithdrawFromBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromBuyerAccountBuilderContext = Omit<\n  WithdrawFromBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Withdraws funds from the user's buyer escrow account to the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromBuyerAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromBuyerAccountBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, amount } = params;\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const amountBasisPoint = amount.basisPoints;\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n\n  if (!isSigner(buyer) && !isSigner(authority)) {\n    throw new WithdrawFromBuyerAccountRequiresSignerError();\n  }\n\n  const escrowPayment = metaplex\n    .auctionHouse()\n    .pdas()\n    .buyerEscrow({\n      auctionHouse: auctionHouse.address,\n      buyer: toPublicKey(buyer),\n      programs,\n    });\n\n  // Accounts,\n  const accounts: WithdrawInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    receiptAccount: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amountBasisPoint,\n  };\n\n  // Withdraw Instruction.\n  let withdrawInstruction = createWithdrawInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs,\n    });\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    withdrawInstruction = createAuctioneerWithdrawInstruction(\n      accountsWithAuctioneer,\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(buyer) ? buyer : (authority as Signer);\n  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = withdrawInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  withdrawInstruction.keys[signerKeyIndex].isSigner = true;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw.\n      .add({\n        instruction: withdrawInstruction,\n        signers: withdrawSigners,\n        key: params.instructionKey ?? 'withdrawFromBuyerAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromBuyerAccountOperation","useOperation","withdrawFromBuyerAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","amount","hasAuctioneer","AuctioneerAuthorityRequiredError","amountBasisPoint","basisPoints","buyer","identity","authority","authorityAddress","isSigner","WithdrawFromBuyerAccountRequiresSignerError","escrowPayment","pdas","buyerEscrow","address","toPublicKey","accounts","wallet","receiptAccount","escrowPaymentAccount","treasuryMint","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","withdrawInstruction","createWithdrawInstruction","ahAuctioneerPda","auctioneer","publicKey","accountsWithAuctioneer","createAuctioneerWithdrawInstruction","signer","withdrawSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","TransactionBuilder","make","setFeePayer","add","instruction","signers","instructionKey"],"mappings":"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"}