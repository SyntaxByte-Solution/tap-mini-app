"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRedstonePrice = void 0;
const utils_1 = require("./utils");
const base64url_1 = __importDefault(require("base64url"));
const axios_1 = __importDefault(require("axios"));
const utils_2 = __importDefault(require("../common/utils"));
class BaseWebToken {
    constructor(config) {
        this.minConfirm = 5;
        this.isSlow = false;
        this.needsFee = true;
        this.inheritsRPC = false;
        Object.assign(this, config);
    }
    // common methods
    get address() {
        return this._address;
    }
    ready() {
        return __awaiter(this, void 0, void 0, function* () {
            this._address = this.wallet ? this.ownerToAddress(yield this.getPublicKey()) : undefined;
        });
    }
    getId(item) {
        return __awaiter(this, void 0, void 0, function* () {
            return base64url_1.default.encode(Buffer.from(yield (0, utils_1.getCryptoDriver)().hash(yield item.rawSignature())));
        });
    }
    price() {
        return __awaiter(this, void 0, void 0, function* () {
            return getRedstonePrice(this.ticker);
        });
    }
}
exports.default = BaseWebToken;
function getRedstonePrice(token) {
    return __awaiter(this, void 0, void 0, function* () {
        const res = yield axios_1.default.get(`https://api.redstone.finance/prices?symbol=${token}&provider=redstone&limit=1`);
        yield utils_2.default.checkAndThrow(res, "Getting price data");
        return res.data[0].value;
    });
}
exports.getRedstonePrice = getRedstonePrice;
//# sourceMappingURL=token.js.map