{"version":3,"file":"updateNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/updateNft.ts"],"sourcesContent":["import {\n  CollectionDetails,\n  createUpdateInstruction,\n  UpdateArgs,\n  Uses,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthority,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport { isNonFungible, Sft } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  CreatorInput,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateNftOperation' as const;\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .update({ nftOrSft, name: \"My new NFT name\" });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateNftOperation = useOperation<UpdateNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateNftOperation = Operation<\n  typeof Key,\n  UpdateNftInput,\n  UpdateNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateNftInput = {\n  /**\n   * The NFT or SFT to update.\n   * We only need a subset of the `Sft` (or `Nft`) model to figure out\n   * the current values for the data of the metadata account and only update\n   * the parts that are different.\n   */\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n    | 'programmableConfig'\n    | 'tokenStandard'\n  >;\n\n  /**\n   * The current update authority of the asset as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   * @deprecated Use `authority` instead.\n   */\n  updateAuthority?: Signer;\n\n  /**\n   * An authority allowed to update the asset.\n   *\n   * If a `Signer` is provided directly,\n   * it will be used as the update authority.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer | TokenMetadataAuthority;\n\n  /**\n   * The authorization rules and data to use for the update.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n\n  /**\n   * The address of the new update authority to set for the asset\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newUpdateAuthority?: PublicKey;\n\n  /**\n   * The new on-chain name of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  name?: string;\n\n  /**\n   * The new on-chain symbol of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  symbol?: string;\n\n  /**\n   * The new on-chain uri of the asset.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uri?: string;\n\n  /**\n   * The new royalties of the asset in percent basis point\n   * (i.e. 250 is 2.5%) that should be paid to the creators\n   * on each secondary sale.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  sellerFeeBasisPoints?: number;\n\n  /**\n   * The new creators for the asset.\n   * For each creator, if an `authority` Signer is provided,\n   * the creator will be marked as verified.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  creators?: CreatorInput[];\n\n  /**\n   * Whether or not the asset has already been sold to its first buyer.\n   * This can only be flipped from `false` to `true`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  primarySaleHappened?: boolean;\n\n  /**\n   * Whether or not the asset is mutable.\n   * When set to `false` no one can update the Metadata account,\n   * not even the update authority.\n   * This can only be flipped from `true` to `false`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  isMutable?: boolean;\n\n  /**\n   * When this field is not `null`, it indicates that the asset\n   * can be \"used\" by its owner or any approved \"use authorities\".\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  uses?: Option<Uses>;\n\n  /**\n   * The new Collection NFT that this asset belongs to.\n   * When `null`, this will remove the asset from its current collection.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collection?: Option<PublicKey>;\n\n  /**\n   * The ruleset account that should be used to configure the\n   * programmable NFT.\n   *\n   * This is only relevant for programmable NFTs, i.e. if the\n   * `tokenStandard` is set to `TokenStandard.ProgrammableNonFungible`.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  ruleSet?: Option<PublicKey>;\n\n  /**\n   * The collection authority that should sign the asset\n   * to prove that it is part of the newly provided collection.\n   * When `null`, the provided `collection` will not be verified.\n   *\n   * @defaultValue `null`\n   */\n  collectionAuthority?: Option<Signer>;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  collectionAuthorityIsDelegated?: boolean;\n\n  /**\n   * Whether or not the newly provided `collection` is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  collectionIsSized?: boolean;\n\n  /**\n   * The authority of the asset's current collection.\n   * This may be required if the current collection is being removed\n   * or updated and needs to be unverified before doing so.\n   *\n   * @defaultValue `payer`\n   */\n  oldCollectionAuthority?: Signer;\n\n  /**\n   * Whether or not the asset's current collection is a sized collection\n   * and not a legacy collection.\n   *\n   * @defaultValue `true`\n   */\n  oldCollectionIsSized?: boolean;\n\n  /**\n   * Transforms a regular NFT into a Collection NFT of the\n   * provided size.\n   *\n   * The provided size should include all **verified** NFTs\n   * and/or SFTs within the Collection. Unverified NFTs\n   * and/or SFTs should not be included in the size.\n   *\n   * **Warning, once set, this size can no longer be updated manually.**\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  collectionDetails?: CollectionDetails;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateNftOperationHandler: OperationHandler<UpdateNftOperation> = {\n  handle: async (\n    operation: UpdateNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<UpdateNftOutput> => {\n    const builder = updateNftBuilder(metaplex, operation.input, scope);\n\n    if (builder.isEmpty()) {\n      throw new NoInstructionsToSendError(Key);\n    }\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateNftBuilderParams = Omit<UpdateNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that updates the metadata account. */\n  updateMetadataInstructionKey?: string;\n};\n\n/**\n * Updates an existing NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .update({ nftOrSft, name: \"My new NFT name\" });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateNftBuilder = (\n  metaplex: Metaplex,\n  params: UpdateNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    nftOrSft,\n    updateAuthority = metaplex.identity(),\n    authority = updateAuthority,\n    authorizationDetails,\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);\n  const updateInstructionData = toInstructionData(nftOrSft, params);\n  const shouldSendUpdateInstruction = !isEqual(\n    updateInstructionData,\n    updateInstructionDataWithoutChanges\n  );\n\n  const isRemovingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    params.collection === null;\n  const isOverridingVerifiedCollection =\n    !!nftOrSft.collection &&\n    !!nftOrSft.collection.verified &&\n    !!params.collection &&\n    !params.collection.equals(nftOrSft.collection.address);\n  const shouldUnverifyCurrentCollection =\n    isRemovingVerifiedCollection || isOverridingVerifiedCollection;\n\n  // Auth.\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority:\n      '__kind' in authority\n        ? authority\n        : { __kind: 'metadata', updateAuthority: authority },\n    authorizationDetails,\n    programs,\n  });\n\n  const creatorsInput: CreatorInput[] = params.creators ?? nftOrSft.creators;\n  const verifyAdditionalCreatorInstructions = creatorsInput\n    .filter((creator) => {\n      const currentCreator = nftOrSft.creators.find(({ address }) =>\n        address.equals(creator.address)\n      );\n      const currentlyVerified = currentCreator?.verified ?? false;\n      return !!creator.authority && !currentlyVerified;\n    })\n    .map((creator) => {\n      return metaplex.nfts().builders().verifyCreator(\n        {\n          mintAddress: nftOrSft.address,\n          creator: creator.authority,\n        },\n        { payer, programs }\n      );\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Unverify current collection before overriding it.\n      // Otherwise, the previous collection size will not be properly decremented.\n      .when(shouldUnverifyCurrentCollection, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .unverifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: nftOrSft.collection\n                  ?.address as PublicKey,\n                collectionAuthority: params.oldCollectionAuthority ?? payer,\n                isSizedCollection: params.oldCollectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n\n      // Update the metadata account.\n      .when(shouldSendUpdateInstruction, (builder) =>\n        builder.add({\n          instruction: createUpdateInstruction(\n            {\n              authority: auth.accounts.authority,\n              delegateRecord: auth.accounts.delegateRecord,\n              token: auth.accounts.token,\n              mint: nftOrSft.address,\n              metadata: metaplex.nfts().pdas().metadata({\n                mint: nftOrSft.address,\n                programs,\n              }),\n              edition: isNonFungible(nftOrSft)\n                ? metaplex.nfts().pdas().masterEdition({\n                    mint: nftOrSft.address,\n                    programs,\n                  })\n                : undefined,\n              // tokenRecord, // TODO\n              payer: payer.publicKey,\n              systemProgram: systemProgram.address,\n              sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n              authorizationRules: auth.accounts.authorizationRules,\n              authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n            },\n            {\n              updateArgs: { ...updateInstructionData, ...auth.data } as any,\n            },\n            tokenMetadataProgram.address\n          ),\n          signers: [payer, ...auth.signers],\n          key: params.updateMetadataInstructionKey ?? 'updateMetadata',\n        })\n      )\n\n      // Verify additional creators.\n      .add(...verifyAdditionalCreatorInstructions)\n\n      // Verify collection.\n      .when(!!params.collection && !!params.collectionAuthority, (builder) =>\n        builder.add(\n          metaplex\n            .nfts()\n            .builders()\n            .verifyCollection(\n              {\n                mintAddress: nftOrSft.address,\n                collectionMintAddress: params.collection as PublicKey,\n                collectionAuthority: params.collectionAuthority as Signer,\n                isDelegated: params.collectionAuthorityIsDelegated ?? false,\n                isSizedCollection: params.collectionIsSized ?? true,\n              },\n              { programs, payer }\n            )\n        )\n      )\n  );\n};\n\nconst toInstructionData = (\n  nftOrSft: Pick<\n    Sft,\n    | 'address'\n    | 'collection'\n    | 'creators'\n    | 'name'\n    | 'symbol'\n    | 'uri'\n    | 'sellerFeeBasisPoints'\n    | 'uses'\n    | 'programmableConfig'\n  >,\n  input: Partial<UpdateNftInput> = {}\n): Omit<UpdateArgs, 'authorityType' | 'authorizationData'> => {\n  const creators =\n    input.creators === undefined\n      ? nftOrSft.creators\n      : input.creators.map((creator) => {\n          const currentCreator = nftOrSft.creators.find(({ address }) =>\n            address.equals(creator.address)\n          );\n          return {\n            ...creator,\n            verified: currentCreator?.verified ?? false,\n          };\n        });\n\n  return <Omit<UpdateArgs, 'authorityType' | 'authorizationData'>>{\n    __kind: 'V1',\n    newUpdateAuthority: input.newUpdateAuthority ?? null,\n    data: {\n      name: input.name ?? nftOrSft.name,\n      symbol: input.symbol ?? nftOrSft.symbol,\n      uri: input.uri ?? nftOrSft.uri,\n      sellerFeeBasisPoints:\n        input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,\n      creators: creators.length > 0 ? creators : null,\n    },\n    primarySaleHappened: input.primarySaleHappened ?? null,\n    isMutable: input.isMutable ?? null,\n    collection: input.collection\n      ? { __kind: 'Set', fields: [{ key: input.collection, verified: false }] }\n      : { __kind: input.collection === undefined ? 'None' : 'Clear' },\n    collectionDetails: input.collectionDetails\n      ? { __kind: 'Set', fields: [input.collectionDetails] }\n      : { __kind: 'None' },\n    uses: input.uses\n      ? { __kind: 'Set', fields: [input.uses] }\n      : { __kind: input.uses === undefined ? 'None' : 'Clear' },\n    ruleSet: input.ruleSet\n      ? { __kind: 'Set', fields: [input.ruleSet] }\n      : { __kind: input.ruleSet === undefined ? 'None' : 'Clear' },\n  };\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","updateNftOperation","useOperation","updateNftOperationHandler","handle","operation","metaplex","scope","builder","updateNftBuilder","input","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","updateAuthority","identity","authority","authorizationDetails","tokenMetadataProgram","getTokenMetadata","systemProgram","getSystem","updateInstructionDataWithoutChanges","toInstructionData","updateInstructionData","shouldSendUpdateInstruction","isEqual","isRemovingVerifiedCollection","collection","verified","isOverridingVerifiedCollection","equals","address","shouldUnverifyCurrentCollection","auth","parseTokenMetadataAuthorization","mint","__kind","creatorsInput","creators","verifyAdditionalCreatorInstructions","filter","creator","currentCreator","find","currentlyVerified","map","nfts","builders","verifyCreator","mintAddress","TransactionBuilder","make","setFeePayer","when","add","unverifyCollection","collectionMintAddress","collectionAuthority","oldCollectionAuthority","isSizedCollection","oldCollectionIsSized","instruction","createUpdateInstruction","accounts","delegateRecord","token","metadata","pdas","edition","isNonFungible","masterEdition","undefined","publicKey","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","authorizationRules","authorizationRulesProgram","updateArgs","data","signers","key","updateMetadataInstructionKey","verifyCollection","isDelegated","collectionAuthorityIsDelegated","collectionIsSized","newUpdateAuthority","name","symbol","uri","sellerFeeBasisPoints","length","primarySaleHappened","isMutable","fields","collectionDetails","uses","ruleSet"],"mappings":"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"}