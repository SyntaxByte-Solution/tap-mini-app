{"version":3,"file":"findAuctionHouseByAddress.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findAuctionHouseByAddress.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { toAuctioneerAccount, toAuctionHouseAccount } from '../accounts';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, toAuctionHouse } from '../models/AuctionHouse';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindAuctionHouseByAddressOperation' as const;\n\n/**\n * Finds an Auction House by its address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findByAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findAuctionHouseByAddressOperation =\n  useOperation<FindAuctionHouseByAddressOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindAuctionHouseByAddressOperation = Operation<\n  typeof Key,\n  FindAuctionHouseByAddressInput,\n  AuctionHouse\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindAuctionHouseByAddressInput = {\n  /** The address of the Auction House. */\n  address: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findAuctionHouseByAddressOperationHandler: OperationHandler<FindAuctionHouseByAddressOperation> =\n  {\n    handle: async (\n      operation: FindAuctionHouseByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { programs, commitment } = scope;\n      const { address, auctioneerAuthority } = operation.input;\n      const auctioneerPda = auctioneerAuthority\n        ? metaplex.auctionHouse().pdas().auctioneer({\n            auctionHouse: address,\n            auctioneerAuthority,\n            programs,\n          })\n        : undefined;\n      const accountsToFetch = [address, auctioneerPda].filter(\n        (account): account is PublicKey => !!account\n      );\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(accountsToFetch, commitment);\n      scope.throwIfCanceled();\n\n      const auctionHouseAccount = toAuctionHouseAccount(accounts[0]);\n      const mintModel = await metaplex\n        .tokens()\n        .findMintByAddress(\n          { address: auctionHouseAccount.data.treasuryMint },\n          scope\n        );\n      scope.throwIfCanceled();\n\n      if (!auctionHouseAccount.data.hasAuctioneer) {\n        return toAuctionHouse(auctionHouseAccount, mintModel);\n      }\n\n      if (!accounts[1] || !accounts[1].exists) {\n        throw new AuctioneerAuthorityRequiredError();\n      }\n\n      const auctioneerAccount = toAuctioneerAccount(accounts[1]);\n      return toAuctionHouse(auctionHouseAccount, mintModel, auctioneerAccount);\n    },\n  };\n"],"names":["Key","findAuctionHouseByAddressOperation","useOperation","findAuctionHouseByAddressOperationHandler","handle","operation","metaplex","scope","programs","commitment","address","auctioneerAuthority","input","auctioneerPda","auctionHouse","pdas","auctioneer","undefined","accountsToFetch","filter","account","accounts","rpc","getMultipleAccounts","throwIfCanceled","auctionHouseAccount","toAuctionHouseAccount","mintModel","tokens","findMintByAddress","data","treasuryMint","hasAuctioneer","toAuctionHouse","exists","AuctioneerAuthorityRequiredError","auctioneerAccount","toAuctioneerAccount"],"mappings":";;;;;;;;;AAYA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAA6C,CAAA;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,kCAAkC,GAC7CC,sBAAY,CAAqCF,GAAG,EAAC;;AAEvD;AACA;AACA;AACA;;AAwBA;AACA;AACA;AACA;AACO,MAAMG,yCAA+F,GAC1G;AACEC,EAAAA,MAAM,EAAE,OACNC,SAA6C,EAC7CC,QAAkB,EAClBC,KAAqB,KAClB;IACH,MAAM;MAAEC,QAAQ;AAAEC,MAAAA,UAAAA;AAAW,KAAC,GAAGF,KAAK,CAAA;IACtC,MAAM;MAAEG,OAAO;AAAEC,MAAAA,mBAAAA;KAAqB,GAAGN,SAAS,CAACO,KAAK,CAAA;AACxD,IAAA,MAAMC,aAAa,GAAGF,mBAAmB,GACrCL,QAAQ,CAACQ,YAAY,EAAE,CAACC,IAAI,EAAE,CAACC,UAAU,CAAC;AACxCF,MAAAA,YAAY,EAAEJ,OAAO;MACrBC,mBAAmB;AACnBH,MAAAA,QAAAA;KACD,CAAC,GACFS,SAAS,CAAA;AACb,IAAA,MAAMC,eAAe,GAAG,CAACR,OAAO,EAAEG,aAAa,CAAC,CAACM,MAAM,CACpDC,OAAO,IAA2B,CAAC,CAACA,OAAO,CAC7C,CAAA;AAED,IAAA,MAAMC,UAAQ,GAAG,MAAMf,QAAQ,CAC5BgB,GAAG,EAAE,CACLC,mBAAmB,CAACL,eAAe,EAAET,UAAU,CAAC,CAAA;IACnDF,KAAK,CAACiB,eAAe,EAAE,CAAA;IAEvB,MAAMC,mBAAmB,GAAGC,8BAAqB,CAACL,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;IAC9D,MAAMM,SAAS,GAAG,MAAMrB,QAAQ,CAC7BsB,MAAM,EAAE,CACRC,iBAAiB,CAChB;AAAEnB,MAAAA,OAAO,EAAEe,mBAAmB,CAACK,IAAI,CAACC,YAAAA;KAAc,EAClDxB,KAAK,CACN,CAAA;IACHA,KAAK,CAACiB,eAAe,EAAE,CAAA;AAEvB,IAAA,IAAI,CAACC,mBAAmB,CAACK,IAAI,CAACE,aAAa,EAAE;AAC3C,MAAA,OAAOC,2BAAc,CAACR,mBAAmB,EAAEE,SAAS,CAAC,CAAA;AACvD,KAAA;AAEA,IAAA,IAAI,CAACN,UAAQ,CAAC,CAAC,CAAC,IAAI,CAACA,UAAQ,CAAC,CAAC,CAAC,CAACa,MAAM,EAAE;MACvC,MAAM,IAAIC,uCAAgC,EAAE,CAAA;AAC9C,KAAA;IAEA,MAAMC,iBAAiB,GAAGC,4BAAmB,CAAChB,UAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;AAC1D,IAAA,OAAOY,2BAAc,CAACR,mBAAmB,EAAEE,SAAS,EAAES,iBAAiB,CAAC,CAAA;AAC1E,GAAA;AACF;;;;;"}