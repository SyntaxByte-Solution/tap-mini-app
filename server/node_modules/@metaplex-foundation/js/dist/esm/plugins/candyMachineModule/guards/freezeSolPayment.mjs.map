{"version":3,"file":"freezeSolPayment.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/freezeSolPayment.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  FreezeInstruction,\n  FreezeSolPayment,\n  freezeSolPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport {\n  MintOwnerMustBeMintPayerError,\n  UnrecognizePathForRouteInstructionError,\n} from '../errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsRemainingAccount,\n  RouteSettingsParserInput,\n} from './core';\nimport { assert } from '@/utils';\nimport {\n  createSerializerFromBeet,\n  lamports,\n  mapSerializer,\n  PublicKey,\n  Signer,\n  SolAmount,\n} from '@/types';\n\n/**\n * The freezeSolPayment guard allows minting frozen NFTs by charging\n * the payer an amount in SOL. Frozen NFTs cannot be transferred\n * or listed on any marketplaces until thawed.\n *\n * The funds are transferred to a freeze escrow until all NFTs are thaw,\n * at which point, they can be transferred (unlocked) to the configured\n * destination account.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link FreezeSolPaymentGuardRouteSettings} to learn more about\n * the instructions that can be executed against this guard.\n */\nexport type FreezeSolPaymentGuardSettings = {\n  /** The amount in SOL to charge for. */\n  amount: SolAmount;\n\n  /** The configured destination address to send the funds to. */\n  destination: PublicKey;\n};\n\n/**\n * The settings for the freezeSolPayment guard that should be provided\n * when accessing the guard's special \"route\" instruction.\n *\n * ## Initialize\n * The `initialize` path creates the freeze escrow account that will\n * hold the funds until all NFTs are thawed. It must be called before\n * any NFTs can be minted.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'initialize',\n *     period: 15 * 24 * 60 * 60, // 15 days.\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * ## Thaw\n * The `thaw` path unfreezes one NFT if one of the following conditions are met:\n * - All NFTs have been minted.\n * - The configured period has elapsed (max 30 days).\n * - The Candy Machine account was deleted.\n *\n * Anyone can call this instruction. Since the funds are not transferrable\n * until all NFTs are thawed, it creates an incentive for the treasury to\n * thaw all NFTs as soon as possible.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'thaw',\n *     nftMint: nftToThaw.address,\n *     nftOwner: nftToThaw.token.ownerAddress,\n *   },\n * });\n * ```\n *\n * ## Unlock Funds\n * The `unlockFunds` path transfers all of the escrow funds to the\n * configured destination address once all NFTs have been thawed.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'unlockFunds',\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * @see {@link FreezeSolPaymentGuardSettings} for more\n * information on the freezeSolPayment guard itself.\n */\nexport type FreezeSolPaymentGuardRouteSettings =\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'initialize';\n\n      /** The freeze period in seconds (maximum 30 days). */\n      period: number;\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'thaw';\n\n      /** The mint address of the NFT to thaw. */\n      nftMint: PublicKey;\n\n      /** The owner address of the NFT to thaw. */\n      nftOwner: PublicKey;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'unlockFunds';\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    };\n\n/** @internal */\nexport const freezeSolPaymentGuardManifest: CandyGuardManifest<\n  FreezeSolPaymentGuardSettings,\n  {},\n  FreezeSolPaymentGuardRouteSettings\n> = {\n  name: 'freezeSolPayment',\n  settingsBytes: 40,\n  settingsSerializer: mapSerializer<\n    FreezeSolPayment,\n    FreezeSolPaymentGuardSettings\n  >(\n    createSerializerFromBeet(freezeSolPaymentBeet),\n    (settings) => ({\n      amount: lamports(settings.lamports),\n      destination: settings.destination,\n    }),\n    (settings) => ({\n      lamports: settings.amount.basisPoints,\n      destination: settings.destination,\n    })\n  ),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    owner,\n    payer,\n    mint,\n    candyMachine,\n    candyGuard,\n    programs,\n  }) => {\n    if (!owner.equals(payer.publicKey)) {\n      throw new MintOwnerMustBeMintPayerError('freezeSolPayment');\n    }\n\n    const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n      destination: settings.destination,\n      candyMachine,\n      candyGuard,\n      programs,\n    });\n    const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mint.publicKey,\n      owner: payer.publicKey,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: freezeEscrow,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: nftAta,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n  routeSettingsParser: (input) => {\n    switch (input.routeSettings.path) {\n      case 'initialize':\n        return initializeRouteInstruction(input);\n      case 'thaw':\n        return thawRouteInstruction(input);\n      case 'unlockFunds':\n        return unlockFundsRouteInstruction(input);\n      default:\n        throw new UnrecognizePathForRouteInstructionError(\n          'freezeSolPayment',\n          // @ts-ignore\n          input.routeSettings.path\n        );\n    }\n  },\n};\n\nfunction initializeRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'initialize');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  const args = Buffer.alloc(9);\n  beet.u8.write(args, 0, FreezeInstruction.Initialize);\n  beet.u64.write(args, 1, routeSettings.period);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction thawRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'thaw');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: routeSettings.nftMint,\n    owner: routeSettings.nftOwner,\n    programs,\n  });\n  const nftEdition = metaplex.nfts().pdas().masterEdition({\n    mint: routeSettings.nftMint,\n    programs,\n  });\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.Thaw);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftMint,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftOwner,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: nftAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: nftEdition,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenMetadataProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction unlockFundsRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'unlockFunds');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.UnlockFunds);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: settings.destination,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n"],"names":["freezeSolPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","freezeSolPaymentBeet","settings","amount","lamports","destination","basisPoints","mintSettingsParser","metaplex","owner","payer","mint","candyMachine","candyGuard","programs","equals","publicKey","MintOwnerMustBeMintPayerError","freezeEscrow","candyMachines","pdas","nftAta","tokens","associatedTokenAccount","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable","routeSettingsParser","input","routeSettings","path","initializeRouteInstruction","thawRouteInstruction","unlockFundsRouteInstruction","UnrecognizePathForRouteInstructionError","assert","systemProgram","getSystem","args","alloc","beet","u8","write","FreezeInstruction","Initialize","u64","period","candyGuardAuthority","nftMint","nftOwner","nftEdition","nfts","masterEdition","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","Thaw","UnlockFunds"],"mappings":"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"}