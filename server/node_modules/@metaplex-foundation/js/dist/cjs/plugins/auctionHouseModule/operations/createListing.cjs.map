{"version":3,"file":"createListing.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createListing.ts"],"sourcesContent":["import {\n  createAuctioneerSellInstruction,\n  createPrintListingReceiptInstruction,\n  createSellInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AUCTIONEER_PRICE } from '../constants';\nimport {\n  AuctioneerAuthorityRequiredError,\n  CreateListingRequiresSignerError,\n} from '../errors';\nimport { AuctionHouse, LazyListing, Listing } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  amount,\n  isSigner,\n  lamports,\n  makeConfirmOptionsFinalizedOnMainnet,\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  token,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateListingOperation' as const;\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .list({ auctionHouse, mintAccount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createListingOperation = useOperation<CreateListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateListingOperation = Operation<\n  typeof Key,\n  CreateListingInput,\n  CreateListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateListingInput = {\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Creator of a listing.\n   *\n   * The wallet being a signer is the only condition in which an NFT can sell at a price of 0.\n   * If the user does list at 0 then auction house can change the sale price if the 'can_change_sale_price' option is true.\n   * If the trade is not priced at 0, the wallet holder has to be a signer since auction house cannot sign if listing over 0.\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  seller?: PublicKey | Signer;\n\n  /**\n   * The Auction House authority.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   * Auction house should be the signer for changing the price instead of user wallet for cases when seller lists at 0.\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The mint account to create a listing for.\n   * This is used to find the metadata.\n   */\n  mintAccount: PublicKey;\n\n  /**\n   * The token account address that's associated to the asset a listing created is for.\n   *\n   * @defaultValue Seller's Associated Token Account.\n   */\n  tokenAccount?: PublicKey;\n\n  /**\n   * The listing price.\n   *\n   * @defaultValue 0 SOLs or tokens.\n   */\n  price?: SolAmount | SplTokenAmount;\n\n  /**\n   * The number of tokens to list.\n   * For an NFT listing it must be 1 token.\n   *\n   * When a Fungible Asset is put on sale.\n   * The buyer can then create a buy order of said assets that is\n   * less than the token_size of the sell order.\n   *\n   * @defaultValue 1 token.\n   */\n  tokens?: SplTokenAmount;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the listing receipt.\n   * The receipt holds information about the listing,\n   * So it's important to print it if you want to use the `Listing` model\n   *\n   * The receipt printing is skipped for the Auctioneer Auction House\n   * Since it currently doesn't support it.\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateListingOutput = {\n  /** Seller trade state account PDA encoding the listing order. */\n  sellerTradeState: Pda;\n\n  /** Seller free trade state account PDA encoding the free listing order. */\n  freeSellerTradeState: Pda;\n\n  /** The asset's token account address. */\n  tokenAccount: PublicKey;\n\n  /** The asset's metadata PDA. */\n  metadata: Pda;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The listing price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens listed. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Listing. */\n  listing: Listing;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createListingOperationHandler: OperationHandler<CreateListingOperation> =\n  {\n    async handle(\n      operation: CreateListingOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateListingOutput> {\n      const { auctionHouse } = operation.input;\n      const builder = createListingBuilder(metaplex, operation.input, scope);\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const listing = await metaplex\n          .auctionHouse()\n          .findListingByReceipt(\n            { receiptAddress: output.receipt, auctionHouse },\n            scope\n          );\n\n        return { listing, ...output };\n      }\n\n      scope.throwIfCanceled();\n      const lazyListing: LazyListing = {\n        model: 'listing',\n        lazy: true,\n        auctionHouse,\n        tradeStateAddress: output.sellerTradeState,\n        bookkeeperAddress: output.bookkeeper,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        receiptAddress: output.receipt,\n        purchaseReceiptAddress: null,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n        canceledAt: null,\n      };\n\n      return {\n        listing: await metaplex\n          .auctionHouse()\n          .loadListing({ lazyListing }, scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createListing({ auctionHouse, mintAccount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport type CreateListingBuilderParams = Omit<\n  CreateListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateListingBuilderContext = Omit<\n  CreateListingOutput,\n  'response' | 'listing'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createListingBuilder = (\n  metaplex: Metaplex,\n  params: CreateListingBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateListingBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    mintAccount,\n    tokens = token(1),\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n  } = params;\n\n  // Data.\n  const priceBasisPoint = auctioneerAuthority\n    ? AUCTIONEER_PRICE\n    : params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (!isSigner(seller) && !isSigner(authority)) {\n    throw new CreateListingRequiresSignerError();\n  }\n\n  // Accounts.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAccount,\n    programs,\n  });\n  const tokenAccount =\n    params.tokenAccount ??\n    metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({\n        mint: mintAccount,\n        owner: toPublicKey(seller),\n        programs,\n      });\n  const sellerTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouse.address,\n      wallet: toPublicKey(seller),\n      treasuryMint: auctionHouse.treasuryMint.address,\n      tokenMint: mintAccount,\n      price: price.basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount,\n      programs,\n    });\n  const freeSellerTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouse.address,\n      wallet: toPublicKey(seller),\n      treasuryMint: auctionHouse.treasuryMint.address,\n      tokenMint: mintAccount,\n      price: lamports(0).basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount,\n      programs,\n    });\n  const programAsSigner = metaplex\n    .auctionHouse()\n    .pdas()\n    .programAsSigner({ programs });\n  const accounts = {\n    wallet: toPublicKey(seller),\n    tokenAccount,\n    metadata,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    sellerTradeState,\n    freeSellerTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: sellerTradeState.bump,\n    freeTradeStateBump: freeSellerTradeState.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let sellInstruction = createSellInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    sellInstruction = createAuctioneerSellInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouse.address,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(seller) ? seller : (authority as Signer);\n  const sellSigners = [signer, auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = sellInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  sellInstruction.keys[signerKeyIndex].isSigner = true;\n\n  // Fixes cross-program invocation with unauthorized writable account\n  if (sellInstruction.keys[signerKeyIndex].pubkey.equals(toPublicKey(seller))) {\n    sellInstruction.keys[signerKeyIndex].isWritable = true;\n  }\n\n  // Receipt.\n  // Since createPrintListingReceiptInstruction can't deserialize createAuctioneerSellInstruction due to a bug\n  // Don't print Auctioneer Sell receipt for the time being.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) && !auctioneerAuthority;\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const receipt = metaplex.auctionHouse().pdas().listingReceipt({\n    tradeState: sellerTradeState,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make<CreateListingBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        sellerTradeState,\n        freeSellerTradeState,\n        tokenAccount,\n        metadata,\n        seller: toPublicKey(seller),\n        receipt: shouldPrintReceipt ? receipt : null,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        price,\n        tokens,\n      })\n\n      // Create Listing.\n      .add({\n        instruction: sellInstruction,\n        signers: sellSigners,\n        key: 'sell',\n      })\n\n      // Print the Listing Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintListingReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createListingOperation","useOperation","createListingOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","builder","createListingBuilder","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","receipt","listing","findListingByReceipt","receiptAddress","lazyListing","model","lazy","tradeStateAddress","sellerTradeState","bookkeeperAddress","bookkeeper","sellerAddress","seller","metadataAddress","metadata","purchaseReceiptAddress","price","tokens","basisPoints","createdAt","now","canceledAt","loadListing","params","options","programs","payer","rpc","getDefaultFeePayer","auctioneerAuthority","mintAccount","token","identity","authority","authorityAddress","priceBasisPoint","AUCTIONEER_PRICE","isNative","lamports","amount","treasuryMint","currency","hasAuctioneer","AuctioneerAuthorityRequiredError","isSigner","CreateListingRequiresSignerError","nfts","pdas","mint","tokenAccount","associatedTokenAccount","owner","toPublicKey","tradeState","address","wallet","tokenMint","tokenSize","freeSellerTradeState","programAsSigner","accounts","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","freeTradeStateBump","programAsSignerBump","buyerPrice","sellInstruction","createSellInstruction","createAuctioneerSellInstruction","publicKey","ahAuctioneerPda","auctioneer","signer","sellSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","isWritable","shouldPrintReceipt","printReceipt","listingReceipt","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","when","createPrintListingReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}