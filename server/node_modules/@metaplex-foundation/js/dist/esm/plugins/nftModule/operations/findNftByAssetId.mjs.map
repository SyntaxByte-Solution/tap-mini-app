{"version":3,"file":"findNftByAssetId.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByAssetId.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { Nft, toNft } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n  ReadApiAsset,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  toMetadataFromReadApiAsset,\n  toMintFromReadApiAsset,\n  toNftEditionFromReadApiAsset,\n} from '@/utils/readApiConnection';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByAssetIdOperation' as const;\n\n/**\n * Finds an NFT or an SFT by its mint address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByAssetId({ assetId };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftByAssetIdOperation =\n  useOperation<FindNftByAssetIdOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByAssetIdOperation = Operation<\n  typeof Key,\n  FindNftByAssetIdInput,\n  FindNftByAssetIdOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByAssetIdInput = {\n  /** The id of an asset. */\n  assetId: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByAssetIdOutput = Nft;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByAssetIdOperationHandler: OperationHandler<FindNftByAssetIdOperation> =\n  {\n    handle: async (\n      operation: FindNftByAssetIdOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftByAssetIdOutput> => {\n      const { assetId } = operation.input;\n\n      // Retrieve asset from RPC\n      // Massage into the NFT model\n\n      const asset = await metaplex.rpc().getAsset(assetId);\n      scope.throwIfCanceled();\n\n      const metadata = toMetadataFromReadApiAsset(asset as ReadApiAsset);\n      const mint = toMintFromReadApiAsset(asset as ReadApiAsset);\n      const nftEdition = toNftEditionFromReadApiAsset(asset as ReadApiAsset);\n\n      return toNft(metadata, mint, nftEdition);\n    },\n  };\n"],"names":["Key","findNftByAssetIdOperation","useOperation","findNftByAssetIdOperationHandler","handle","operation","metaplex","scope","assetId","input","asset","rpc","getAsset","throwIfCanceled","metadata","toMetadataFromReadApiAsset","mint","toMintFromReadApiAsset","nftEdition","toNftEditionFromReadApiAsset","toNft"],"mappings":";;;;AAgBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAoC,CAAA;;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,yBAAyB,GACpCC,YAAY,CAA4BF,GAAG,EAAC;;AAE9C;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACEC,EAAAA,MAAM,EAAE,OACNC,SAAoC,EACpCC,QAAkB,EAClBC,KAAqB,KACe;IACpC,MAAM;AAAEC,MAAAA,OAAAA;KAAS,GAAGH,SAAS,CAACI,KAAK,CAAA;;AAEnC;AACA;;IAEA,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,GAAG,EAAE,CAACC,QAAQ,CAACJ,OAAO,CAAC,CAAA;IACpDD,KAAK,CAACM,eAAe,EAAE,CAAA;AAEvB,IAAA,MAAMC,QAAQ,GAAGC,0BAA0B,CAACL,KAAK,CAAiB,CAAA;AAClE,IAAA,MAAMM,IAAI,GAAGC,sBAAsB,CAACP,KAAK,CAAiB,CAAA;AAC1D,IAAA,MAAMQ,UAAU,GAAGC,4BAA4B,CAACT,KAAK,CAAiB,CAAA;AAEtE,IAAA,OAAOU,KAAK,CAACN,QAAQ,EAAEE,IAAI,EAAEE,UAAU,CAAC,CAAA;AAC1C,GAAA;AACF;;;;"}