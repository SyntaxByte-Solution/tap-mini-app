'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplCandyMachineCore = require('@metaplex-foundation/mpl-candy-machine-core');
var asserts = require('../asserts.cjs');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');

// -----------------
// Operation
// -----------------

const Key = 'InsertCandyMachineItemsOperation';

/**
 * Insert items into an existing Candy Machine.
 *
 * Note that the name and URI of each item should not include
 * the prefixes configured in the config line settings.
 *
 * ```ts
 * await metaplex
 *   .candyMachines()
 *   .insertItems({
 *     candyMachine,
 *     items: [
 *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },
 *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },
 *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },
 *     ],
 *   };
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const insertCandyMachineItemsOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const insertCandyMachineItemsOperationHandler = {
  async handle(operation, metaplex, scope) {
    return insertCandyMachineItemsBuilder(metaplex, operation.input, scope).sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Insert items into an existing Candy Machine.
 *
 * Note that the name and URI of each item should not include
 * the prefixes configured in the config line settings.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .candyMachines()
 *   .builders()
 *   .insertItems({ candyMachine, items });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const insertCandyMachineItemsBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const authority = params.authority ?? metaplex.identity();
  const index = params.index ?? params.candyMachine.itemsLoaded;
  const {
    items
  } = params;
  asserts.assertCanAdd(params.candyMachine, index, items.length);
  asserts.assertAllItemConstraints(params.candyMachine, items);

  // Programs.
  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer).add({
    instruction: mplCandyMachineCore.createAddConfigLinesInstruction({
      candyMachine: params.candyMachine.address,
      authority: authority.publicKey
    }, {
      index,
      configLines: items
    }, candyMachineProgram.address),
    signers: [authority],
    key: params.instructionKey ?? 'insertItems'
  });
};

exports.insertCandyMachineItemsBuilder = insertCandyMachineItemsBuilder;
exports.insertCandyMachineItemsOperation = insertCandyMachineItemsOperation;
exports.insertCandyMachineItemsOperationHandler = insertCandyMachineItemsOperationHandler;
//# sourceMappingURL=insertCandyMachineItems.cjs.map
