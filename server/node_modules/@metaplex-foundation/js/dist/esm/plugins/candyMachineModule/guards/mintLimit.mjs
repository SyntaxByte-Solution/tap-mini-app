import { Buffer } from 'buffer';
import { mintLimitBeet } from '@metaplex-foundation/mpl-candy-guard';
import { createSerializerFromBeet } from '../../../types/Serializer.mjs';

/**
 * The mintLimit guard allows to specify a limit on the
 * number of mints for each individual wallet.
 *
 * The limit is set per wallet, per candy machine and per
 * identified (provided in the settings) to allow multiple
 * mint limits within a Candy Machine. This is particularly
 * useful when using groups of guards and we want each of them
 * to have a different mint limit.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 */

/** @internal */
const mintLimitGuardManifest = {
  name: 'mintLimit',
  settingsBytes: 3,
  settingsSerializer: createSerializerFromBeet(mintLimitBeet),
  mintSettingsParser: ({
    metaplex,
    settings,
    payer,
    candyMachine,
    candyGuard,
    programs
  }) => {
    const counterPda = metaplex.candyMachines().pdas().mintLimitCounter({
      id: settings.id,
      user: payer.publicKey,
      candyMachine,
      candyGuard,
      programs
    });
    return {
      arguments: Buffer.from([]),
      remainingAccounts: [{
        address: counterPda,
        isSigner: false,
        isWritable: true
      }]
    };
  }
};

export { mintLimitGuardManifest };
//# sourceMappingURL=mintLimit.mjs.map
