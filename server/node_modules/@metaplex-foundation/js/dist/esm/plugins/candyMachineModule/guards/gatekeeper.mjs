import { Buffer } from 'buffer';
import { gatekeeperBeet } from '@metaplex-foundation/mpl-candy-guard';
import { mapSerializer, createSerializerFromBeet } from '../../../types/Serializer.mjs';
import { Pda } from '../../../types/Pda.mjs';

/**
 * The gatekeeper guard checks whether the minting wallet
 * has a valid Gateway Token from a specified Gateway Network.
 *
 * In most cases, this token will be obtain after completing a
 * captcha challenge but any Gateway Network may be used.
 *
 * This object defines the settings that should be
 * provided when creating and/or updating a Candy
 * Machine if you wish to enable this guard.
 *
 * @see {@link GatekeeperGuardMintSettings} for more
 * information on the mint settings of this guard.
 */

/** @internal */
const gatekeeperGuardManifest = {
  name: 'gatekeeper',
  settingsBytes: 33,
  settingsSerializer: mapSerializer(createSerializerFromBeet(gatekeeperBeet), settings => ({
    ...settings,
    network: settings.gatekeeperNetwork
  }), settings => ({
    ...settings,
    gatekeeperNetwork: settings.network
  })),
  mintSettingsParser: ({
    metaplex,
    settings,
    mintSettings,
    payer,
    programs
  }) => {
    const gatewayProgram = metaplex.programs().getGateway(programs);
    const tokenAccount = mintSettings?.tokenAccount ?? Pda.find(gatewayProgram.address, [payer.publicKey.toBuffer(), Buffer.from('gateway'), Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]), settings.network.toBuffer()]);
    const remainingAccounts = [{
      isSigner: false,
      address: tokenAccount,
      isWritable: true
    }];
    if (settings.expireOnUse) {
      const expireAccount = Pda.find(gatewayProgram.address, [settings.network.toBuffer(), Buffer.from('expire')]);
      remainingAccounts.push({
        isSigner: false,
        address: gatewayProgram.address,
        isWritable: false
      });
      remainingAccounts.push({
        isSigner: false,
        address: expireAccount,
        isWritable: false
      });
    }
    return {
      arguments: Buffer.from([]),
      remainingAccounts
    };
  }
};

export { gatekeeperGuardManifest };
//# sourceMappingURL=gatekeeper.mjs.map
