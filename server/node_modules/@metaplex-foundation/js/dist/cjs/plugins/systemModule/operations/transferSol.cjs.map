{"version":3,"file":"transferSol.cjs","sources":["../../../../../src/plugins/systemModule/operations/transferSol.ts"],"sourcesContent":["import { PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'TransferSolOperation' as const;\n\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * await metaplex\n *   .system()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   };\n * ````\n *\n * @group Operations\n * @category Constructors\n */\nexport const transferSolOperation = useOperation<TransferSolOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type TransferSolOperation = Operation<\n  typeof Key,\n  TransferSolInput,\n  TransferSolOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type TransferSolInput = {\n  /**\n   * The account that sends the SOLs as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  from?: Signer;\n\n  /** The address of the account that receives the SOLs. */\n  to: PublicKey;\n\n  /** The amount of SOLs to send. */\n  amount: SolAmount;\n\n  /**\n   * Base public key to use to derive the funding account address.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  basePubkey?: PublicKey;\n\n  /**\n   * Seed to use to derive the funding account address.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  seed?: string;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type TransferSolOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const transferSolOperationHandler: OperationHandler<TransferSolOperation> =\n  {\n    async handle(\n      operation: TransferSolOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<TransferSolOutput> {\n      const builder = transferSolBuilder(metaplex, operation.input, scope);\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type TransferSolBuilderParams = Omit<\n  TransferSolInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that transfers some SOL. */\n  instructionKey?: string;\n};\n\n/**\n * Transfers some SOL from one account to another.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .system()\n *   .builders()\n *   .transferSol({\n *     to: new PublicKey(\"...\"),\n *     amount: sol(1.5),\n *   });\n * ````\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const transferSolBuilder = (\n  metaplex: Metaplex,\n  params: TransferSolBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { from = metaplex.identity(), to, amount, basePubkey, seed } = params;\n\n  assertSol(amount);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: SystemProgram.transfer({\n        fromPubkey: from.publicKey,\n        toPubkey: to,\n        lamports: amount.basisPoints.toNumber(),\n        ...(basePubkey ? { basePubkey, seed } : {}),\n        programId: metaplex.programs().getSystem(programs).address,\n      }),\n      signers: [from],\n      key: params.instructionKey ?? 'transferSol',\n    });\n};\n"],"names":["Key","transferSolOperation","useOperation","transferSolOperationHandler","handle","operation","metaplex","scope","builder","transferSolBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","from","identity","to","amount","basePubkey","seed","assertSol","TransactionBuilder","make","setFeePayer","add","instruction","SystemProgram","transfer","fromPubkey","publicKey","toPubkey","lamports","basisPoints","toNumber","programId","getSystem","address","signers","key","instructionKey"],"mappings":";;;;;;;;;AAcA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,sBAA+B,CAAA;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,oBAAoB,GAAGC,sBAAY,CAAuBF,GAAG,EAAC;;AAE3E;AACA;AACA;AACA;;AAiDA;AACA;AACA;AACA;AACO,MAAMG,2BAAmE,GAC9E;AACE,EAAA,MAAMC,MAAM,CACVC,SAA+B,EAC/BC,QAAkB,EAClBC,KAAqB,EACO;IAC5B,MAAMC,OAAO,GAAGC,kBAAkB,CAACH,QAAQ,EAAED,SAAS,CAACK,KAAK,EAAEH,KAAK,CAAC,CAAA;IACpE,OAAOC,OAAO,CAACG,cAAc,CAACL,QAAQ,EAAEC,KAAK,CAACK,cAAc,CAAC,CAAA;AAC/D,GAAA;AACF,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,kBAAkB,GAAG,CAChCH,QAAkB,EAClBO,MAAgC,EAChCC,OAAkC,GAAG,EAAE,KAChB;EACvB,MAAM;IAAEC,QAAQ;AAAEC,IAAAA,KAAK,GAAGV,QAAQ,CAACW,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGJ,OAAO,CAAA;EACzE,MAAM;AAAEK,IAAAA,IAAI,GAAGb,QAAQ,CAACc,QAAQ,EAAE;IAAEC,EAAE;IAAEC,MAAM;IAAEC,UAAU;AAAEC,IAAAA,IAAAA;AAAK,GAAC,GAAGX,MAAM,CAAA;EAE3EY,gBAAS,CAACH,MAAM,CAAC,CAAA;EAEjB,OAAOI,qCAAkB,CAACC,IAAI,EAAE,CAC7BC,WAAW,CAACZ,KAAK,CAAC,CAClBa,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEC,qBAAa,CAACC,QAAQ,CAAC;MAClCC,UAAU,EAAEd,IAAI,CAACe,SAAS;AAC1BC,MAAAA,QAAQ,EAAEd,EAAE;AACZe,MAAAA,QAAQ,EAAEd,MAAM,CAACe,WAAW,CAACC,QAAQ,EAAE;AACvC,MAAA,IAAIf,UAAU,GAAG;QAAEA,UAAU;AAAEC,QAAAA,IAAAA;OAAM,GAAG,EAAE,CAAC;MAC3Ce,SAAS,EAAEjC,QAAQ,CAACS,QAAQ,EAAE,CAACyB,SAAS,CAACzB,QAAQ,CAAC,CAAC0B,OAAAA;AACrD,KAAC,CAAC;IACFC,OAAO,EAAE,CAACvB,IAAI,CAAC;AACfwB,IAAAA,GAAG,EAAE9B,MAAM,CAAC+B,cAAc,IAAI,aAAA;AAChC,GAAC,CAAC,CAAA;AACN;;;;;;"}