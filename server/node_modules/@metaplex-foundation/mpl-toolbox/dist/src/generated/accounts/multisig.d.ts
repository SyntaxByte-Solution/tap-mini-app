/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Account, Context, Pda, PublicKey, RpcAccount, RpcGetAccountOptions, RpcGetAccountsOptions } from '@metaplex-foundation/umi';
import { Serializer } from '@metaplex-foundation/umi/serializers';
export type Multisig = Account<MultisigAccountData>;
export type MultisigAccountData = {
    m: number;
    n: number;
    isInitialized: boolean;
    signers: Array<PublicKey>;
};
export type MultisigAccountDataArgs = MultisigAccountData;
export declare function getMultisigAccountDataSerializer(): Serializer<MultisigAccountDataArgs, MultisigAccountData>;
export declare function deserializeMultisig(rawAccount: RpcAccount): Multisig;
export declare function fetchMultisig(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Multisig>;
export declare function safeFetchMultisig(context: Pick<Context, 'rpc'>, publicKey: PublicKey | Pda, options?: RpcGetAccountOptions): Promise<Multisig | null>;
export declare function fetchAllMultisig(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Multisig[]>;
export declare function safeFetchAllMultisig(context: Pick<Context, 'rpc'>, publicKeys: Array<PublicKey | Pda>, options?: RpcGetAccountsOptions): Promise<Multisig[]>;
export declare function getMultisigGpaBuilder(context: Pick<Context, 'rpc' | 'programs'>): import("@metaplex-foundation/umi").GpaBuilder<Multisig, {
    m: number;
    n: number;
    isInitialized: boolean;
    signers: Array<PublicKey>;
}>;
export declare function getMultisigSize(): number;
