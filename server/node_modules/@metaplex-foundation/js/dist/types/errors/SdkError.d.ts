import { PublicKey } from '@solana/web3.js';
import { MetaplexError } from './MetaplexError';
import { Cluster, Currency } from '../types';
/** @group Errors */
export declare class SdkError extends MetaplexError {
    readonly name: string;
    constructor(message: string, cause?: Error);
}
/** @group Errors */
export declare class OperationHandlerMissingError extends SdkError {
    readonly name: string;
    constructor(operationKey: string);
}
/** @group Errors */
export declare class DriverNotProvidedError extends SdkError {
    readonly name: string;
    constructor(driver: string);
}
/** @group Errors */
export declare class UnexpectedCurrencyError extends SdkError {
    readonly name: string;
    readonly actual: Currency;
    readonly expected: Currency;
    constructor(actual: Currency, expected: Currency);
}
/** @group Errors */
export declare class CurrencyMismatchError extends SdkError {
    readonly name: string;
    readonly left: Currency;
    readonly right: Currency;
    readonly operation?: string;
    constructor(left: Currency, right: Currency, operation?: string);
}
/** @group Errors */
export declare class InvalidJsonVariableError extends SdkError {
    readonly name: string;
    constructor(cause?: Error);
}
/** @group Errors */
export declare class InvalidJsonStringError extends SdkError {
    readonly name: string;
    constructor(cause?: Error);
}
/** @group Errors */
export declare class OperationUnauthorizedForGuestsError extends SdkError {
    readonly name: string;
    constructor(operation: string);
}
/** @group Errors */
export declare class UninitializedWalletAdapterError extends SdkError {
    readonly name: string;
    constructor();
}
/** @group Errors */
export declare class OperationNotSupportedByWalletAdapterError extends SdkError {
    readonly name: string;
    constructor(operation: string);
}
/** @group Errors */
export declare class TaskIsAlreadyRunningError extends SdkError {
    readonly name: string;
    constructor();
}
/** @group Errors */
export declare class AssetNotFoundError extends SdkError {
    readonly name: string;
    constructor(location: string);
}
/** @group Errors */
export declare class AccountNotFoundError extends SdkError {
    readonly name: string;
    constructor(address: PublicKey, accountType?: string, solution?: string);
}
/** @group Errors */
export declare class UnexpectedAccountError extends SdkError {
    readonly name: string;
    constructor(address: PublicKey, expectedType: string, cause?: Error);
}
/** @group Errors */
export declare class UnexpectedTypeError extends SdkError {
    readonly name: string;
    constructor(variable: string, actualType: string, expectedType: string);
}
/** @group Errors */
export declare class ExpectedSignerError extends SdkError {
    readonly name: string;
    constructor(variable: string, actualType: string, solution?: string);
}
/** @group Errors */
export declare class ProgramNotRecognizedError extends SdkError {
    readonly name: string;
    readonly nameOrAddress: string | PublicKey;
    readonly cluster: Cluster;
    constructor(nameOrAddress: string | PublicKey, cluster: Cluster);
}
/** @group Errors */
export declare class NoInstructionsToSendError extends SdkError {
    readonly name: string;
    constructor(operation: string, solution?: string);
}
/** @group Errors */
export declare class FailedToSerializeDataError extends SdkError {
    readonly name: string;
    constructor(dataDescription: string, cause?: Error);
}
/** @group Errors */
export declare class FailedToDeserializeDataError extends SdkError {
    readonly name: string;
    constructor(dataDescription: string, cause?: Error);
}
/** @group Errors */
export declare class MissingInputDataError extends SdkError {
    readonly name: string;
    constructor(missingParameters: string[], solution?: string);
}
/** @group Errors */
export declare class NotYetImplementedError extends SdkError {
    readonly name: string;
    constructor();
}
/** @group Errors */
export declare class UnreachableCaseError extends SdkError {
    readonly name: string;
    constructor(value: never);
}
