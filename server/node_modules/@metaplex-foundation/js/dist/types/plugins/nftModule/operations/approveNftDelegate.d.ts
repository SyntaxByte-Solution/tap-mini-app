import { SendAndConfirmTransactionResponse } from '../../rpcModule';
import { TokenMetadataAuthorityHolder, TokenMetadataAuthorityMetadata, TokenMetadataAuthorizationDetails } from '../Authorization';
import { DelegateInputWithData } from '../DelegateInput';
import { Sft } from '../models';
import { TransactionBuilder, TransactionBuilderOptions } from '../../../utils';
import { Operation, OperationHandler, Signer } from '../../../types';
import { Metaplex } from '../../../Metaplex';
declare const Key: "ApproveNftDelegateOperation";
/**
 * Approve a new delegate authority for an NFT or SFT.
 *
 * ```ts
 * await metaplex.nfts().delegate({
 *   nftOrSft,
 *   delegate,
 *   delegateArgs
 * });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
export declare const approveNftDelegateOperation: import("../../../types").OperationConstructor<ApproveNftDelegateOperation, "ApproveNftDelegateOperation", ApproveNftDelegateInput, ApproveNftDelegateOutput>;
/**
 * @group Operations
 * @category Types
 */
export type ApproveNftDelegateOperation = Operation<typeof Key, ApproveNftDelegateInput, ApproveNftDelegateOutput>;
/**
 * @group Operations
 * @category Inputs
 */
export type ApproveNftDelegateInput = {
    /**
     * The NFT or SFT for which we want to approve a delegate.
     * We only need its address and token standard.
     */
    nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;
    /**
     * An authority allowed to approve a new delegate authority.
     *
     * Note that Delegate authorities are not supported for this
     * instruction as delegates cannot approve other delegates.
     *
     * If a `Signer` is provided directly, it will be either
     * used as the update authority or as the token holder
     * based on the delegate type, i.g. `delegate.type`.
     *
     * @see {@link TokenMetadataAuthority}
     * @defaultValue `metaplex.identity()`
     */
    authority?: Signer | TokenMetadataAuthorityMetadata | TokenMetadataAuthorityHolder;
    /**
     * The authorization rules and data to use
     * when approving the delegate authority.
     *
     * @see {@link TokenMetadataAuthorizationDetails}
     * @defaultValue Defaults to not using auth rules.
     */
    authorizationDetails?: TokenMetadataAuthorizationDetails;
    /**
     * The role, address, approver and data of the delegate to approve.
     */
    delegate: DelegateInputWithData;
};
/**
 * @group Operations
 * @category Outputs
 */
export type ApproveNftDelegateOutput = {
    /** The blockchain response from sending and confirming the transaction. */
    response: SendAndConfirmTransactionResponse;
};
/**
 * @group Operations
 * @category Handlers
 */
export declare const approveNftDelegateOperationHandler: OperationHandler<ApproveNftDelegateOperation>;
/**
 * @group Transaction Builders
 * @category Inputs
 */
export type ApproveNftDelegateBuilderParams = Omit<ApproveNftDelegateInput, 'confirmOptions'> & {
    /** A key to distinguish the instruction that uses the NFT. */
    instructionKey?: string;
};
/**
 * Approve a new delegate authority for an NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .delegate({
 *     nftOrSft,
 *     delegate,
 *     delegateArgs
 *   });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
export declare const approveNftDelegateBuilder: (metaplex: Metaplex, params: ApproveNftDelegateBuilderParams, options?: TransactionBuilderOptions) => TransactionBuilder;
export {};
