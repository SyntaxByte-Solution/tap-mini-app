'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var mplTokenMetadata = require('@metaplex-foundation/mpl-token-metadata');
var web3_js = require('@solana/web3.js');
var isEqual = require('lodash.isequal');
var Authorization = require('../Authorization.cjs');
var SdkError = require('../../../errors/SdkError.cjs');
var Operation = require('../../../types/Operation.cjs');
var TransactionBuilder = require('../../../utils/TransactionBuilder.cjs');
var Metadata = require('../models/Metadata.cjs');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var isEqual__default = /*#__PURE__*/_interopDefaultLegacy(isEqual);

const TOKEN_AUTH_RULES_ID = new web3_js.PublicKey('auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg');

// -----------------
// Operation
// -----------------

const Key = 'UpdateNftOperation';

/**
 * Updates an existing NFT or SFT.
 *
 * ```ts
 * await metaplex
 *   .nfts()
 *   .update({ nftOrSft, name: "My new NFT name" });
 * ```
 *
 * @group Operations
 * @category Constructors
 */
const updateNftOperation = Operation.useOperation(Key);

/**
 * @group Operations
 * @category Types
 */

/**
 * @group Operations
 * @category Handlers
 */
const updateNftOperationHandler = {
  handle: async (operation, metaplex, scope) => {
    const builder = updateNftBuilder(metaplex, operation.input, scope);
    if (builder.isEmpty()) {
      throw new SdkError.NoInstructionsToSendError(Key);
    }
    return builder.sendAndConfirm(metaplex, scope.confirmOptions);
  }
};

// -----------------
// Builder
// -----------------

/**
 * @group Transaction Builders
 * @category Inputs
 */

/**
 * Updates an existing NFT or SFT.
 *
 * ```ts
 * const transactionBuilder = metaplex
 *   .nfts()
 *   .builders()
 *   .update({ nftOrSft, name: "My new NFT name" });
 * ```
 *
 * @group Transaction Builders
 * @category Constructors
 */
const updateNftBuilder = (metaplex, params, options = {}) => {
  const {
    programs,
    payer = metaplex.rpc().getDefaultFeePayer()
  } = options;
  const {
    nftOrSft,
    updateAuthority = metaplex.identity(),
    authority = updateAuthority,
    authorizationDetails
  } = params;

  // Programs.
  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);
  const systemProgram = metaplex.programs().getSystem(programs);
  const updateInstructionDataWithoutChanges = toInstructionData(nftOrSft);
  const updateInstructionData = toInstructionData(nftOrSft, params);
  const shouldSendUpdateInstruction = !isEqual__default["default"](updateInstructionData, updateInstructionDataWithoutChanges);
  const isRemovingVerifiedCollection = !!nftOrSft.collection && !!nftOrSft.collection.verified && params.collection === null;
  const isOverridingVerifiedCollection = !!nftOrSft.collection && !!nftOrSft.collection.verified && !!params.collection && !params.collection.equals(nftOrSft.collection.address);
  const shouldUnverifyCurrentCollection = isRemovingVerifiedCollection || isOverridingVerifiedCollection;

  // Auth.
  const auth = Authorization.parseTokenMetadataAuthorization(metaplex, {
    mint: nftOrSft.address,
    authority: '__kind' in authority ? authority : {
      __kind: 'metadata',
      updateAuthority: authority
    },
    authorizationDetails,
    programs
  });
  const creatorsInput = params.creators ?? nftOrSft.creators;
  const verifyAdditionalCreatorInstructions = creatorsInput.filter(creator => {
    const currentCreator = nftOrSft.creators.find(({
      address
    }) => address.equals(creator.address));
    const currentlyVerified = currentCreator?.verified ?? false;
    return !!creator.authority && !currentlyVerified;
  }).map(creator => {
    return metaplex.nfts().builders().verifyCreator({
      mintAddress: nftOrSft.address,
      creator: creator.authority
    }, {
      payer,
      programs
    });
  });
  return TransactionBuilder.TransactionBuilder.make().setFeePayer(payer)

  // Unverify current collection before overriding it.
  // Otherwise, the previous collection size will not be properly decremented.
  .when(shouldUnverifyCurrentCollection, builder => builder.add(metaplex.nfts().builders().unverifyCollection({
    mintAddress: nftOrSft.address,
    collectionMintAddress: nftOrSft.collection?.address,
    collectionAuthority: params.oldCollectionAuthority ?? payer,
    isSizedCollection: params.oldCollectionIsSized ?? true
  }, {
    programs,
    payer
  })))

  // Update the metadata account.
  .when(shouldSendUpdateInstruction, builder => builder.add({
    instruction: mplTokenMetadata.createUpdateInstruction({
      authority: auth.accounts.authority,
      delegateRecord: auth.accounts.delegateRecord,
      token: auth.accounts.token,
      mint: nftOrSft.address,
      metadata: metaplex.nfts().pdas().metadata({
        mint: nftOrSft.address,
        programs
      }),
      edition: Metadata.isNonFungible(nftOrSft) ? metaplex.nfts().pdas().masterEdition({
        mint: nftOrSft.address,
        programs
      }) : undefined,
      // tokenRecord, // TODO
      payer: payer.publicKey,
      systemProgram: systemProgram.address,
      sysvarInstructions: web3_js.SYSVAR_INSTRUCTIONS_PUBKEY,
      authorizationRules: auth.accounts.authorizationRules,
      authorizationRulesProgram: TOKEN_AUTH_RULES_ID
    }, {
      updateArgs: {
        ...updateInstructionData,
        ...auth.data
      }
    }, tokenMetadataProgram.address),
    signers: [payer, ...auth.signers],
    key: params.updateMetadataInstructionKey ?? 'updateMetadata'
  }))

  // Verify additional creators.
  .add(...verifyAdditionalCreatorInstructions)

  // Verify collection.
  .when(!!params.collection && !!params.collectionAuthority, builder => builder.add(metaplex.nfts().builders().verifyCollection({
    mintAddress: nftOrSft.address,
    collectionMintAddress: params.collection,
    collectionAuthority: params.collectionAuthority,
    isDelegated: params.collectionAuthorityIsDelegated ?? false,
    isSizedCollection: params.collectionIsSized ?? true
  }, {
    programs,
    payer
  })));
};
const toInstructionData = (nftOrSft, input = {}) => {
  const creators = input.creators === undefined ? nftOrSft.creators : input.creators.map(creator => {
    const currentCreator = nftOrSft.creators.find(({
      address
    }) => address.equals(creator.address));
    return {
      ...creator,
      verified: currentCreator?.verified ?? false
    };
  });
  return {
    __kind: 'V1',
    newUpdateAuthority: input.newUpdateAuthority ?? null,
    data: {
      name: input.name ?? nftOrSft.name,
      symbol: input.symbol ?? nftOrSft.symbol,
      uri: input.uri ?? nftOrSft.uri,
      sellerFeeBasisPoints: input.sellerFeeBasisPoints ?? nftOrSft.sellerFeeBasisPoints,
      creators: creators.length > 0 ? creators : null
    },
    primarySaleHappened: input.primarySaleHappened ?? null,
    isMutable: input.isMutable ?? null,
    collection: input.collection ? {
      __kind: 'Set',
      fields: [{
        key: input.collection,
        verified: false
      }]
    } : {
      __kind: input.collection === undefined ? 'None' : 'Clear'
    },
    collectionDetails: input.collectionDetails ? {
      __kind: 'Set',
      fields: [input.collectionDetails]
    } : {
      __kind: 'None'
    },
    uses: input.uses ? {
      __kind: 'Set',
      fields: [input.uses]
    } : {
      __kind: input.uses === undefined ? 'None' : 'Clear'
    },
    ruleSet: input.ruleSet ? {
      __kind: 'Set',
      fields: [input.ruleSet]
    } : {
      __kind: input.ruleSet === undefined ? 'None' : 'Clear'
    }
  };
};

exports.updateNftBuilder = updateNftBuilder;
exports.updateNftOperation = updateNftOperation;
exports.updateNftOperationHandler = updateNftOperationHandler;
//# sourceMappingURL=updateNft.cjs.map
