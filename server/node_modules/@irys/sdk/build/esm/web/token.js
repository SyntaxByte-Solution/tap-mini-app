import { getCryptoDriver } from "./utils.js";
import base64url from "base64url";
import axios from "axios";
import utils from "../common/utils.js";
export default class BaseWebToken {
    base;
    wallet;
    _address;
    providerUrl;
    providerInstance;
    ticker;
    name;
    irys;
    minConfirm = 5;
    isSlow = false;
    needsFee = true;
    inheritsRPC = false;
    constructor(config) {
        Object.assign(this, config);
    }
    // common methods
    get address() {
        return this._address;
    }
    async ready() {
        this._address = this.wallet ? this.ownerToAddress(await this.getPublicKey()) : undefined;
    }
    async getId(item) {
        return base64url.encode(Buffer.from(await getCryptoDriver().hash(await item.rawSignature())));
    }
    async price() {
        return getRedstonePrice(this.ticker);
    }
}
export async function getRedstonePrice(token) {
    const res = await axios.get(`https://api.redstone.finance/prices?symbol=${token}&provider=redstone&limit=1`);
    await utils.checkAndThrow(res, "Getting price data");
    return res.data[0].value;
}
//# sourceMappingURL=token.js.map