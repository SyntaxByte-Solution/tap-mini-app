{"version":3,"file":"withdrawFromFeeAccount.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromFeeAccount.ts"],"sourcesContent":["import {\n  createWithdrawFromFeeInstruction,\n  WithdrawFromFeeInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromFeeAccountOperation' as const;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromFeeAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromFeeAccountOperation =\n  useOperation<WithdrawFromFeeAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromFeeAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromFeeAccountInput,\n  WithdrawFromFeeAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountInput = {\n  /**\n   * The Auction House from which to transfer funds from the fee wallet to the fee withdrawal destination wallet.\n   * `feeWithdrawalDestinationAddress` is set on Auction House creation, but you can also change it via the `update` operation.\n   * */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'feeWithdrawalDestinationAddress'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromFeeAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromFeeAccountOperationHandler: OperationHandler<WithdrawFromFeeAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromFeeAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromFeeAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountBuilderParams = Omit<\n  WithdrawFromFeeAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromFeeAccountBuilderContext = Omit<\n  WithdrawFromFeeAccountOutput,\n  'response'\n>;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromFeeAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromFeeAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromFeeAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromFeeAccountBuilderContext> => {\n  // Data.\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity(),\n  } = params;\n\n  // Accounts.\n  const accounts: WithdrawFromFeeInstructionAccounts = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Withdraw From Fee Instruction.\n  const withdrawFromFeeInstruction = createWithdrawFromFeeInstruction(\n    accounts,\n    { amount: amount.basisPoints }\n  );\n\n  // Signers.\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw From Fee.\n      .add({\n        instruction: withdrawFromFeeInstruction,\n        signers: [authority],\n        key: instructionKey ?? 'withdrawFromFeeAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromFeeAccountOperation","useOperation","withdrawFromFeeAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromFeeAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","auctionHouse","amount","instructionKey","authority","identity","accounts","authorityAddress","feeWithdrawalDestination","feeWithdrawalDestinationAddress","address","auctionHouseFeeAccount","feeAccountAddress","withdrawFromFeeInstruction","createWithdrawFromFeeInstruction","basisPoints","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;;;;;;;AAkBA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAG,iCAA0C,CAAA;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaC,+BAA+B,GAC1CC,sBAAY,CAAkCF,GAAG,EAAC;;AAEpD;AACA;AACA;AACA;;AA+CA;AACA;AACA;AACA;AACO,MAAMG,sCAAyF,GACpG;EACEC,MAAM,EAAE,OACNC,SAA0C,EAC1CC,QAAkB,EAClBC,KAAqB,KAErBC,6BAA6B,CAC3BF,QAAQ,EACRD,SAAS,CAACI,KAAK,EACfF,KAAK,CACN,CAACG,cAAc,CAACJ,QAAQ,EAAEC,KAAK,CAACI,cAAc,CAAA;AACnD,EAAC;;AAEH;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACaH,MAAAA,6BAA6B,GAAG,CAC3CF,QAAkB,EAClBM,MAA2C,EAC3CC,OAAkC,GAAG,EAAE,KACsB;AAC7D;EACA,MAAM;AAAEC,IAAAA,KAAK,GAAGR,QAAQ,CAACS,GAAG,EAAE,CAACC,kBAAkB,EAAA;AAAG,GAAC,GAAGH,OAAO,CAAA;EAC/D,MAAM;IACJI,YAAY;IACZC,MAAM;IACNC,cAAc;IACdC,SAAS,GAAGd,QAAQ,CAACe,QAAQ,EAAA;AAC/B,GAAC,GAAGT,MAAM,CAAA;;AAEV;AACA,EAAA,MAAMU,QAA4C,GAAG;IACnDF,SAAS,EAAEH,YAAY,CAACM,gBAAgB;IACxCC,wBAAwB,EAAEP,YAAY,CAACQ,+BAA+B;IACtER,YAAY,EAAEA,YAAY,CAACS,OAAO;IAClCC,sBAAsB,EAAEV,YAAY,CAACW,iBAAAA;GACtC,CAAA;;AAED;AACA,EAAA,MAAMC,0BAA0B,GAAGC,gDAAgC,CACjER,QAAQ,EACR;IAAEJ,MAAM,EAAEA,MAAM,CAACa,WAAAA;AAAY,GAAC,CAC/B,CAAA;;AAED;AACA,EAAA,OACEC,qCAAkB,CAACC,IAAI,EAAE,CACtBC,WAAW,CAACpB,KAAK,CAAA;;AAElB;AAAA,GACCqB,GAAG,CAAC;AACHC,IAAAA,WAAW,EAAEP,0BAA0B;IACvCQ,OAAO,EAAE,CAACjB,SAAS,CAAC;IACpBkB,GAAG,EAAEnB,cAAc,IAAI,wBAAA;AACzB,GAAC,CAAC,CAAA;AAER;;;;;;"}