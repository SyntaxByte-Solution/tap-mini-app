'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var createNft = require('./operations/createNft.cjs');
var createSft = require('./operations/createSft.cjs');
var printNewEdition = require('./operations/printNewEdition.cjs');
var updateNft = require('./operations/updateNft.cjs');
var deleteNft = require('./operations/deleteNft.cjs');
var approveNftDelegate = require('./operations/approveNftDelegate.cjs');
var revokeNftDelegate = require('./operations/revokeNftDelegate.cjs');
var useNft = require('./operations/useNft.cjs');
var approveNftUseAuthority = require('./operations/approveNftUseAuthority.cjs');
var revokeNftUseAuthority = require('./operations/revokeNftUseAuthority.cjs');
var verifyNftCreator = require('./operations/verifyNftCreator.cjs');
var unverifyNftCreator = require('./operations/unverifyNftCreator.cjs');
var verifyNftCollection = require('./operations/verifyNftCollection.cjs');
var unverifyNftCollection = require('./operations/unverifyNftCollection.cjs');
var approveNftCollectionAuthority = require('./operations/approveNftCollectionAuthority.cjs');
var revokeNftCollectionAuthority = require('./operations/revokeNftCollectionAuthority.cjs');
var migrateToSizedCollectionNft = require('./operations/migrateToSizedCollectionNft.cjs');
var lockNft = require('./operations/lockNft.cjs');
var unlockNft = require('./operations/unlockNft.cjs');
var mintNft = require('./operations/mintNft.cjs');
var transferNft = require('./operations/transferNft.cjs');
var freezeDelegatedNft = require('./operations/freezeDelegatedNft.cjs');
var thawDelegatedNft = require('./operations/thawDelegatedNft.cjs');

/**
 * This client allows you to access the underlying Transaction Builders
 * for the write operations of the NFT module.
 *
 * @see {@link NftClient}
 * @group Module Builders
 * */
class NftBuildersClient {
  constructor(metaplex) {
    this.metaplex = metaplex;
  }

  // -----------------
  // Create, Update and Delete
  // -----------------

  /** {@inheritDoc createNftBuilder} */
  create(input, options) {
    return createNft.createNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc createSftBuilder} */
  createSft(input, options) {
    return createSft.createSftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc printNewEditionBuilder} */
  printNewEdition(input, options) {
    return printNewEdition.printNewEditionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc updateNftBuilder} */
  update(input, options) {
    return updateNft.updateNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc deleteNftBuilder} */
  delete(input, options) {
    return deleteNft.deleteNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Delegates
  // -----------------

  /** {@inheritDoc approveNftDelegateBuilder} */
  delegate(input, options) {
    return approveNftDelegate.approveNftDelegateBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftDelegateBuilder} */
  revoke(input, options) {
    return revokeNftDelegate.revokeNftDelegateBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Use
  // -----------------

  /** {@inheritDoc useNftBuilder} */
  use(input, options) {
    return useNft.useNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc approveNftUseAuthorityBuilder} */
  approveUseAuthority(input, options) {
    return approveNftUseAuthority.approveNftUseAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftUseAuthorityBuilder} */
  revokeUseAuthority(input, options) {
    return revokeNftUseAuthority.revokeNftUseAuthorityBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Creators
  // -----------------

  /** {@inheritDoc verifyNftCreatorBuilder} */
  verifyCreator(input, options) {
    return verifyNftCreator.verifyNftCreatorBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unverifyNftCreatorBuilder} */
  unverifyCreator(input, options) {
    return unverifyNftCreator.unverifyNftCreatorBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Collections
  // -----------------

  /** {@inheritDoc verifyNftCollectionBuilder} */
  verifyCollection(input, options) {
    return verifyNftCollection.verifyNftCollectionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unverifyNftCollectionBuilder} */
  unverifyCollection(input, options) {
    return unverifyNftCollection.unverifyNftCollectionBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc approveNftCollectionAuthorityBuilder} */
  approveCollectionAuthority(input, options) {
    return approveNftCollectionAuthority.approveNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc revokeNftCollectionAuthorityBuilder} */
  revokeCollectionAuthority(input, options) {
    return revokeNftCollectionAuthority.revokeNftCollectionAuthorityBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc migrateToSizedCollectionNftBuilder} */
  migrateToSizedCollection(input, options) {
    return migrateToSizedCollectionNft.migrateToSizedCollectionNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Programmables
  // -----------------

  /** {@inheritDoc lockNftBuilder} */
  lock(input, options) {
    return lockNft.lockNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc unlockNftBuilder} */
  unlock(input, options) {
    return unlockNft.unlockNftBuilder(this.metaplex, input, options);
  }

  // -----------------
  // Token
  // -----------------

  /** {@inheritDoc mintNftBuilder} */
  mint(input, options) {
    return mintNft.mintNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc transferNftBuilder} */
  transfer(input, options) {
    return transferNft.transferNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc freezeDelegatedNftBuilder} */
  freezeDelegatedNft(input, options) {
    return freezeDelegatedNft.freezeDelegatedNftBuilder(this.metaplex, input, options);
  }

  /** {@inheritDoc thawDelegatedNftBuilder} */
  thawDelegatedNft(input, options) {
    return thawDelegatedNft.thawDelegatedNftBuilder(this.metaplex, input, options);
  }
}

exports.NftBuildersClient = NftBuildersClient;
//# sourceMappingURL=NftBuildersClient.cjs.map
