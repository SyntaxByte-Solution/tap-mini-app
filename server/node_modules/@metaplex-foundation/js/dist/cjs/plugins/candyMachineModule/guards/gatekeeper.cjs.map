{"version":3,"file":"gatekeeper.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/gatekeeper.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  Gatekeeper,\n  gatekeeperBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest, CandyGuardsRemainingAccount } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  Pda,\n  PublicKey,\n} from '@/types';\n\n/**\n * The gatekeeper guard checks whether the minting wallet\n * has a valid Gateway Token from a specified Gateway Network.\n *\n * In most cases, this token will be obtain after completing a\n * captcha challenge but any Gateway Network may be used.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link GatekeeperGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type GatekeeperGuardSettings = {\n  /**\n   * The public key of the Gatekeeper Network that will\n   * be used to check the validity of the minting wallet.\n   *\n   * For instance, you may use the \"Civic Captcha Pass\" Network,\n   * which ensures the minting wallet has passed a captcha, by using\n   * the following address: `ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6`.\n   */\n  network: PublicKey;\n\n  /**\n   * Whether we should mark the Gateway Token of the minting wallet\n   * as expired after the NFT has been minting.\n   *\n   * When set to `true`, they will need to go through the Gatekeeper\n   * Network again in order to mint another NFT.\n   *\n   * When set to `false`, they will be able to mint another NFT\n   * until the Gateway Token expires naturally.\n   */\n  expireOnUse: boolean;\n};\n\n/**\n * The settings for the gatekeeper guard that may\n * be provided when minting from the Candy Machine.\n *\n * @see {@link GatekeeperGuardSettings} for more\n * information on the gatekeeper guard itself.\n */\nexport type GatekeeperGuardMintSettings = {\n  /**\n   * The Gateway Token PDA derived from the payer\n   * and the Gatekeeper Network which is used to\n   * verify the payer's eligibility to mint.\n   *\n   * @defaultValue\n   * Computes the Gateway Token PDA using the payer's and the\n   * Gatekeeper Network's public keys as well as the default\n   * `seed` value which is `[0, 0, 0, 0, 0, 0, 0, 0]`.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const gatekeeperGuardManifest: CandyGuardManifest<\n  GatekeeperGuardSettings,\n  GatekeeperGuardMintSettings\n> = {\n  name: 'gatekeeper',\n  settingsBytes: 33,\n  settingsSerializer: mapSerializer<Gatekeeper, GatekeeperGuardSettings>(\n    createSerializerFromBeet(gatekeeperBeet),\n    (settings) => ({ ...settings, network: settings.gatekeeperNetwork }),\n    (settings) => ({ ...settings, gatekeeperNetwork: settings.network })\n  ),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    const gatewayProgram = metaplex.programs().getGateway(programs);\n    const tokenAccount =\n      mintSettings?.tokenAccount ??\n      Pda.find(gatewayProgram.address, [\n        payer.publicKey.toBuffer(),\n        Buffer.from('gateway'),\n        Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\n        settings.network.toBuffer(),\n      ]);\n\n    const remainingAccounts: CandyGuardsRemainingAccount[] = [\n      {\n        isSigner: false,\n        address: tokenAccount,\n        isWritable: true,\n      },\n    ];\n\n    if (settings.expireOnUse) {\n      const expireAccount = Pda.find(gatewayProgram.address, [\n        settings.network.toBuffer(),\n        Buffer.from('expire'),\n      ]);\n\n      remainingAccounts.push({\n        isSigner: false,\n        address: gatewayProgram.address,\n        isWritable: false,\n      });\n      remainingAccounts.push({\n        isSigner: false,\n        address: expireAccount,\n        isWritable: false,\n      });\n    }\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts,\n    };\n  },\n};\n"],"names":["gatekeeperGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","gatekeeperBeet","settings","network","gatekeeperNetwork","mintSettingsParser","metaplex","mintSettings","payer","programs","gatewayProgram","getGateway","tokenAccount","Pda","find","address","publicKey","toBuffer","Buffer","from","remainingAccounts","isSigner","isWritable","expireOnUse","expireAccount","push","arguments"],"mappings":";;;;;;;;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8CA;AACO,MAAMA,uBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,YAAY;AAClBC,EAAAA,aAAa,EAAE,EAAE;EACjBC,kBAAkB,EAAEC,wBAAa,CAC/BC,mCAAwB,CAACC,4BAAc,CAAC,EACvCC,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;IAAEC,OAAO,EAAED,QAAQ,CAACE,iBAAAA;GAAmB,CAAC,EACnEF,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;IAAEE,iBAAiB,EAAEF,QAAQ,CAACC,OAAAA;AAAQ,GAAC,CAAC,CACrE;AACDE,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QAAQ;IACRJ,QAAQ;IACRK,YAAY;IACZC,KAAK;AACLC,IAAAA,QAAAA;AACF,GAAC,KAAK;IACJ,MAAMC,cAAc,GAAGJ,QAAQ,CAACG,QAAQ,EAAE,CAACE,UAAU,CAACF,QAAQ,CAAC,CAAA;IAC/D,MAAMG,YAAY,GAChBL,YAAY,EAAEK,YAAY,IAC1BC,OAAG,CAACC,IAAI,CAACJ,cAAc,CAACK,OAAO,EAAE,CAC/BP,KAAK,CAACQ,SAAS,CAACC,QAAQ,EAAE,EAC1BC,aAAM,CAACC,IAAI,CAAC,SAAS,CAAC,EACtBD,aAAM,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EACrCjB,QAAQ,CAACC,OAAO,CAACc,QAAQ,EAAE,CAC5B,CAAC,CAAA;IAEJ,MAAMG,iBAAgD,GAAG,CACvD;AACEC,MAAAA,QAAQ,EAAE,KAAK;AACfN,MAAAA,OAAO,EAAEH,YAAY;AACrBU,MAAAA,UAAU,EAAE,IAAA;AACd,KAAC,CACF,CAAA;IAED,IAAIpB,QAAQ,CAACqB,WAAW,EAAE;MACxB,MAAMC,aAAa,GAAGX,OAAG,CAACC,IAAI,CAACJ,cAAc,CAACK,OAAO,EAAE,CACrDb,QAAQ,CAACC,OAAO,CAACc,QAAQ,EAAE,EAC3BC,aAAM,CAACC,IAAI,CAAC,QAAQ,CAAC,CACtB,CAAC,CAAA;MAEFC,iBAAiB,CAACK,IAAI,CAAC;AACrBJ,QAAAA,QAAQ,EAAE,KAAK;QACfN,OAAO,EAAEL,cAAc,CAACK,OAAO;AAC/BO,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,CAAC,CAAA;MACFF,iBAAiB,CAACK,IAAI,CAAC;AACrBJ,QAAAA,QAAQ,EAAE,KAAK;AACfN,QAAAA,OAAO,EAAES,aAAa;AACtBF,QAAAA,UAAU,EAAE,KAAA;AACd,OAAC,CAAC,CAAA;AACJ,KAAA;IAEA,OAAO;AACLI,MAAAA,SAAS,EAAER,aAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAAA;KACD,CAAA;AACH,GAAA;AACF;;;;"}