/// <reference types="node" />
import type { JsonRpcSigner, TransactionRequest, Web3Provider } from "@ethersproject/providers";
import BigNumber from "bignumber.js";
import type { Tx, TokenConfig } from "../../common/types";
import BaseWebToken from "../token";
import { InjectedTypedEthereumSigner, type InjectedTypedEthereumSignerMinimalSigner } from "arbundles/web";
type MinimalSigner = InjectedTypedEthereumSignerMinimalSigner & Pick<JsonRpcSigner, "sendTransaction" | "estimateGas" | "getGasPrice" | "populateTransaction">;
type MinimalProvider = {
    getSigner: () => MinimalSigner;
} & Pick<Web3Provider, "getTransaction" | "getNetwork" | "_ready" | "send" | "estimateGas" | "getGasPrice" | "getTransactionCount">;
export default class EthereumConfig extends BaseWebToken {
    protected signer: InjectedTypedEthereumSigner;
    protected wallet: MinimalProvider;
    protected w3signer: MinimalSigner;
    protected providerInstance: MinimalProvider;
    readonly inheritsRPC = true;
    constructor(config: TokenConfig);
    getTx(txId: string): Promise<Tx>;
    ownerToAddress(owner: any): string;
    sign(data: Uint8Array): Promise<Uint8Array>;
    getSigner(): InjectedTypedEthereumSigner;
    verify(pub: any, data: Uint8Array, signature: Uint8Array): Promise<boolean>;
    getCurrentHeight(): Promise<BigNumber>;
    getFee(amount: BigNumber.Value, to?: string): Promise<BigNumber>;
    sendTx(data: TransactionRequest): Promise<string | undefined>;
    createTx(amount: BigNumber.Value, to: string, _fee?: string): Promise<{
        txId: string | undefined;
        tx: any;
    }>;
    getPublicKey(): Promise<string | Buffer>;
    ready(): Promise<void>;
}
export {};
