{"version":3,"file":"tokenGate.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/tokenGate.ts"],"sourcesContent":["import { TokenGate, tokenGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenGate guard restricts minting to token holders\n * of a specified mint account. The `amount` determines\n * how many tokens are required.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenGateGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n};\n\n/** @internal */\nexport const tokenGateGuardManifest: CandyGuardManifest<TokenGateGuardSettings> =\n  {\n    name: 'tokenGate',\n    settingsBytes: 40,\n    settingsSerializer: mapSerializer<TokenGate, TokenGateGuardSettings>(\n      createSerializerFromBeet(tokenGateBeet),\n      (settings) => ({ ...settings, amount: token(settings.amount) }),\n      (settings) => ({ ...settings, amount: settings.amount.basisPoints })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAccount,\n            isWritable: false,\n          },\n        ],\n      };\n    },\n  };\n"],"names":["tokenGateGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenGateBeet","settings","amount","token","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACO,MAAMA,sBAAkE,GAC7E;AACEC,EAAAA,IAAI,EAAE,WAAW;AACjBC,EAAAA,aAAa,EAAE,EAAE;EACjBC,kBAAkB,EAAEC,wBAAa,CAC/BC,mCAAwB,CAACC,2BAAa,CAAC,EACtCC,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;AAAEC,IAAAA,MAAM,EAAEC,YAAK,CAACF,QAAQ,CAACC,MAAM,CAAA;GAAG,CAAC,EAC9DD,QAAQ,KAAM;AAAE,IAAA,GAAGA,QAAQ;AAAEC,IAAAA,MAAM,EAAED,QAAQ,CAACC,MAAM,CAACE,WAAAA;AAAY,GAAC,CAAC,CACrE;AACDC,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAQ;IAAEL,QAAQ;IAAEM,KAAK;AAAEC,IAAAA,QAAAA;AAAS,GAAC,KAAK;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAAM,EAAE,CAACC,IAAI,EAAE,CAACC,sBAAsB,CAAC;MACnEC,IAAI,EAAEZ,QAAQ,CAACY,IAAI;MACnBC,KAAK,EAAEP,KAAK,CAACQ,SAAS;AACtBP,MAAAA,QAAAA;AACF,KAAC,CAAC,CAAA;IAEF,OAAO;AACLQ,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC;AAC1BC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KAAK;AACfC,QAAAA,OAAO,EAAEZ,YAAY;AACrBa,QAAAA,UAAU,EAAE,KAAA;OACb,CAAA;KAEJ,CAAA;AACH,GAAA;AACF;;;;"}