{"version":3,"file":"createCandyMachineV2.mjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/createCandyMachineV2.ts"],"sourcesContent":["import {\n  createInitializeCandyMachineInstruction,\n  createSetCollectionInstruction,\n  Creator,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { getCandyMachineV2AccountSizeFromData } from '../helpers';\nimport {\n  CandyMachineV2,\n  CandyMachineV2Configs,\n  toCandyMachineV2InstructionData,\n} from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { CandyMachineV2Program } from '../program';\nimport {\n  Option,\n  RequiredKeys,\n  TransactionBuilder,\n  TransactionBuilderOptions,\n} from '@/utils';\nimport {\n  assertSameCurrencies,\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SOL,\n  toBigNumber,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineV2Operation' as const;\n\n/**\n * Creates a brand new Candy Machine.\n *\n * ```ts\n * const { candyMachine } = await metaplex\n *   .candyMachinesV2()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createCandyMachineV2Operation =\n  useOperation<CreateCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateCandyMachineV2Operation = Operation<\n  typeof Key,\n  CreateCandyMachineV2Input,\n  CreateCandyMachineV2Output\n>;\n\nexport type CreateCandyMachineV2InputWithoutConfigs = {\n  /**\n   * The Candy Machine to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  candyMachine?: Signer;\n\n  /**\n   * The authority that will be allowed to update the Candy Machine.\n   * Upon creation, passing the authority's public key is enough to set it.\n   * However, when also passing a `collection` to this operation,\n   * this authority will need to be passed as a Signer so the relevant\n   * instruction can be signed.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer | PublicKey; // Defaults to mx.identity().\n\n  /**\n   * The mint address of the Collection NFT that all NFTs minted from\n   * this Candy Machine should be part of.\n   * When provided, the `authority` parameter will need to be passed as a `Signer`.\n   * When `null`, minted NFTs won't be part of a collection.\n   *\n   * @defaultValue `null`\n   */\n  collection?: Option<PublicKey>;\n};\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateCandyMachineV2Input =\n  CreateCandyMachineV2InputWithoutConfigs &\n    RequiredKeys<\n      Partial<CandyMachineV2Configs>,\n      'price' | 'sellerFeeBasisPoints' | 'itemsAvailable'\n    >;\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The created Candy Machine. */\n  candyMachine: CandyMachineV2;\n\n  /** The create Candy Machine's account as a Signer. */\n  candyMachineSigner: Signer;\n\n  /** The created Candy Machine's wallet. */\n  wallet: PublicKey;\n\n  /** The created Candy Machine's authority. */\n  authority: PublicKey;\n\n  /** The created Candy Machine's creators. */\n  creators: Creator[];\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createCandyMachineV2OperationHandler: OperationHandler<CreateCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: CreateCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateCandyMachineV2Output> {\n      const builder = await createCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const candyMachine = await metaplex\n        .candyMachinesV2()\n        .findByAddress({ address: output.candyMachineSigner.publicKey }, scope);\n\n      return { ...output, candyMachine };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateCandyMachineV2BuilderParams = Omit<\n  CreateCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the Candy Machine. */\n  initializeCandyMachineInstructionKey?: string;\n\n  /** A key to distinguish the instruction that sets the collection. */\n  setCollectionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateCandyMachineV2BuilderContext = Omit<\n  CreateCandyMachineV2Output,\n  'response' | 'candyMachine'\n>;\n\n/**\n * Creates a brand new Candy Machine.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createCandyMachineV2Builder = async (\n  metaplex: Metaplex,\n  params: CreateCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateCandyMachineV2BuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const candyMachine = params.candyMachine ?? Keypair.generate();\n  const authority = params.authority ?? metaplex.identity();\n  const collection: PublicKey | null = params.collection ?? null;\n\n  const { data, wallet, tokenMint } = toCandyMachineV2InstructionData(\n    candyMachine.publicKey,\n    {\n      ...params,\n      wallet: params.wallet ?? metaplex.identity().publicKey,\n      tokenMint: params.tokenMint ?? null,\n      symbol: params.symbol ?? '',\n      maxEditionSupply: params.maxEditionSupply ?? toBigNumber(0),\n      isMutable: params.isMutable ?? true,\n      retainAuthority: params.retainAuthority ?? true,\n      goLiveDate: params.goLiveDate ?? null,\n      endSettings: params.endSettings ?? null,\n      creators: params.creators ?? [\n        {\n          address: metaplex.identity().publicKey,\n          share: 100,\n          verified: false,\n        },\n      ],\n      hiddenSettings: params.hiddenSettings ?? null,\n      whitelistMintSettings: params.whitelistMintSettings ?? null,\n      gatekeeper: params.gatekeeper ?? null,\n    }\n  );\n\n  const initializeInstruction = createInitializeCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.publicKey,\n      wallet,\n      authority: toPublicKey(authority),\n      payer: payer.publicKey,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    initializeInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make<CreateCandyMachineV2BuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        candyMachineSigner: candyMachine,\n        wallet,\n        authority: toPublicKey(authority),\n        creators: data.creators,\n      })\n\n      // Create an empty account for the candy machine.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount(\n            {\n              newAccount: candyMachine,\n              space: getCandyMachineV2AccountSizeFromData(data),\n              program: CandyMachineV2Program.publicKey,\n              instructionKey:\n                params.createAccountInstructionKey ?? 'createAccount',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Initialize the candy machine account.\n      .add({\n        instruction: initializeInstruction,\n        signers: [candyMachine, payer],\n        key:\n          params.initializeCandyMachineInstructionKey ??\n          'initializeCandyMachine',\n      })\n\n      // Set the collection.\n      .when(!!collection, (builder) => {\n        if (!isSigner(authority)) {\n          throw new ExpectedSignerError(\n            'authority',\n            'PublicKey',\n            'You are trying to create a Candy Machine with a Collection NFT. ' +\n              'In order for the Collection NFT to be set successfully, you must provide the authority as a Signer. ' +\n              'Please provide the \"authority\" parameter as a Signer if you want to set the Collection NFT upon creation. ' +\n              'Alternatively, you may remove the \"collection\" parameter to create a Candy Machine without an associated Collection NFT.'\n          );\n        }\n\n        const collectionMint = collection as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const edition = metaplex.nfts().pdas().masterEdition({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.publicKey\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.publicKey,\n            authority: toPublicKey(authority),\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: metaplex.programs().getTokenMetadata()\n              .address,\n          }),\n          signers: [authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","createCandyMachineV2Operation","useOperation","createCandyMachineV2OperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineV2Builder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","candyMachine","candyMachinesV2","findByAddress","address","candyMachineSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","Keypair","generate","authority","identity","collection","data","wallet","tokenMint","toCandyMachineV2InstructionData","symbol","maxEditionSupply","toBigNumber","isMutable","retainAuthority","goLiveDate","endSettings","creators","share","verified","hiddenSettings","whitelistMintSettings","gatekeeper","initializeInstruction","createInitializeCandyMachineInstruction","toPublicKey","keys","push","pubkey","isWritable","isSigner","assertSameCurrencies","price","SOL","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","getCandyMachineV2AccountSizeFromData","program","CandyMachineV2Program","instructionKey","createAccountInstructionKey","instruction","signers","key","initializeCandyMachineInstructionKey","when","ExpectedSignerError","collectionMint","metadata","nfts","pdas","mint","edition","masterEdition","collectionPda","findCandyMachineV2CollectionPda","collectionAuthorityRecord","collectionAuthority","createSetCollectionInstruction","tokenMetadataProgram","getTokenMetadata","setCollectionInstructionKey"],"mappings":"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"}