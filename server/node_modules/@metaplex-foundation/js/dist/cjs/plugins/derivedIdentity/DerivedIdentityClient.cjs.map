{"version":3,"file":"DerivedIdentityClient.cjs","sources":["../../../../src/plugins/derivedIdentity/DerivedIdentityClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as ed25519 from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { UninitializedDerivedIdentityError } from './errors';\nimport {\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n  SolAmount,\n  subtractAmounts,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * @group Modules\n */\nexport class DerivedIdentityClient implements IdentitySigner, KeypairSigner {\n  protected readonly metaplex: Metaplex;\n  protected originalSigner: Signer | null = null;\n  protected derivedKeypair: Keypair | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  get publicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey(): Uint8Array {\n    this.assertInitialized();\n\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.originalSigner.publicKey;\n  }\n\n  async deriveFrom(\n    message: string | Uint8Array,\n    originalSigner?: IdentitySigner\n  ) {\n    this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n\n    const signature = await this.originalSigner.signMessage(\n      Buffer.from(message)\n    );\n\n    const seeds = sha512(signature).slice(0, 32);\n\n    this.derivedKeypair = Keypair.fromSeed(seeds);\n  }\n\n  fund(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.originalSigner,\n        to: this.derivedKeypair.publicKey,\n        amount,\n      },\n      { payer: this.originalSigner }\n    );\n  }\n\n  withdraw(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.derivedKeypair,\n        to: this.originalSigner.publicKey,\n        amount,\n      },\n      { payer: this.derivedKeypair }\n    );\n  }\n\n  async withdrawAll() {\n    this.assertInitialized();\n    const balance = await this.metaplex\n      .rpc()\n      .getBalance(this.derivedKeypair.publicKey);\n    const transactionFee = this.metaplex.utils().estimateTransactionFee();\n    return this.withdraw(subtractAmounts(balance, transactionFee));\n  }\n\n  close(): void {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return ed25519.sync.sign(message, this.secretKey);\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this);\n\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized(): asserts this is {\n    originalSigner: Signer;\n    derivedKeypair: Keypair;\n  } {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n}\n"],"names":["DerivedIdentityClient","constructor","metaplex","_defineProperty","publicKey","assertInitialized","derivedKeypair","secretKey","originalPublicKey","originalSigner","deriveFrom","message","identity","driver","signature","signMessage","Buffer","from","seeds","sha512","slice","Keypair","fromSeed","fund","amount","system","transferSol","to","payer","withdraw","withdrawAll","balance","rpc","getBalance","transactionFee","utils","estimateTransactionFee","subtractAmounts","close","ed25519","sync","sign","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map","verifyMessage","verify","toBytes","equals","that","isSigner","UninitializedDerivedIdentityError"],"mappings":"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"}