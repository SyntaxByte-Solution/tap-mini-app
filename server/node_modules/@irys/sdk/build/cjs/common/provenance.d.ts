/// <reference types="node" />
/// <reference types="node" />
import type Irys from "./irys";
import type { TxGqlNode, UploadReceipt } from "./types";
import type { Readable } from "stream";
import type { DataItemCreateOptions } from "arbundles";
export declare class Provenance {
    protected irys: Irys;
    constructor(irys: Irys);
    upload(data: string | Buffer | Readable, opts?: DataItemCreateOptions): Promise<UploadReceipt>;
    uploadProof(proofFields: {
        dataProtocol?: string;
        hashingAlgo?: string;
        dataHash: string;
        uploadedFor?: string;
        prompt?: string;
        promptHash?: string;
        model?: string;
    }): Promise<UploadReceipt>;
    getAllProofs(searchBy: {
        dataProtocol?: string;
        hashingAlgo?: string;
        dataHash?: string;
        uploadedFor?: string;
        prompt?: string;
        promptHash?: string;
        model?: string;
    }, opts?: {
        limit?: number;
    }): Promise<ProvenanceProofGQLNode[]>;
    getProof(searchBy: {
        dataProtocol?: string;
        hashingAlgo?: string;
        dataHash?: string;
        uploadedFor?: string;
        prompt?: string;
        promptHash?: string;
        model?: string;
    }): Promise<ProvenanceProofGQLNode>;
}
type ProvenanceProofGQLNode = Pick<TxGqlNode, "id" | "receipt" | "tags">;
export {};
