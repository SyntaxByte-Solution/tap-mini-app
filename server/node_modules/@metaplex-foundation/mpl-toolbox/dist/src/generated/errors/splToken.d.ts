/**
 * This code was AUTOGENERATED using the kinobi library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun kinobi to update it.
 *
 * @see https://github.com/metaplex-foundation/kinobi
 */
import { Program, ProgramError } from '@metaplex-foundation/umi';
/** NotRentExempt: Lamport balance below rent-exempt threshold */
export declare class TokNotRentExemptError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InsufficientFunds: Insufficient funds */
export declare class TokInsufficientFundsError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidMint: Invalid Mint */
export declare class TokInvalidMintError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintMismatch: Account not associated with this Mint */
export declare class TokMintMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** OwnerMismatch: Owner does not match */
export declare class TokOwnerMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** FixedSupply: Fixed supply */
export declare class TokFixedSupplyError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AlreadyInUse: Already in use */
export declare class TokAlreadyInUseError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidNumberOfProvidedSigners: Invalid number of provided signers */
export declare class TokInvalidNumberOfProvidedSignersError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidNumberOfRequiredSigners: Invalid number of required signers */
export declare class TokInvalidNumberOfRequiredSignersError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** UninitializedState: State is unititialized */
export declare class TokUninitializedStateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NativeNotSupported: Instruction does not support native tokens */
export declare class TokNativeNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NonNativeHasBalance: Non-native account can only be closed if its balance is zero */
export declare class TokNonNativeHasBalanceError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidInstruction: Invalid instruction */
export declare class TokInvalidInstructionError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** InvalidState: State is invalid for requested operation */
export declare class TokInvalidStateError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** Overflow: Operation overflowed */
export declare class TokOverflowError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AuthorityTypeNotSupported: Account does not support specified authority type */
export declare class TokAuthorityTypeNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintCannotFreeze: This token mint cannot freeze accounts */
export declare class TokMintCannotFreezeError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** AccountFrozen: Account is frozen */
export declare class TokAccountFrozenError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** MintDecimalsMismatch: The provided decimals value different from the Mint decimals */
export declare class TokMintDecimalsMismatchError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/** NonNativeNotSupported: Instruction does not support non-native tokens */
export declare class TokNonNativeNotSupportedError extends ProgramError {
    readonly name: string;
    readonly code: number;
    constructor(program: Program, cause?: Error);
}
/**
 * Attempts to resolve a custom program error from the provided error code.
 * @category Errors
 */
export declare function getSplTokenErrorFromCode(code: number, program: Program, cause?: Error): ProgramError | null;
/**
 * Attempts to resolve a custom program error from the provided error name, i.e. 'Unauthorized'.
 * @category Errors
 */
export declare function getSplTokenErrorFromName(name: string, program: Program, cause?: Error): ProgramError | null;
