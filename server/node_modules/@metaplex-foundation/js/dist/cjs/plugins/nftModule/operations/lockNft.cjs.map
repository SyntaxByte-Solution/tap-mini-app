{"version":3,"file":"lockNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/lockNft.ts"],"sourcesContent":["import { createLockInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { isNonFungible, Sft } from '../models';\nimport {\n  parseTokenMetadataAuthorization,\n  TokenMetadataAuthorityTokenDelegate,\n  TokenMetadataAuthorizationDetails,\n} from '../Authorization';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\nconst TOKEN_AUTH_RULES_ID = new PublicKey(\n  'auth9SigNpDKz4sJJ1DfCTuZrZNSAgh9sFD3rboVmgg'\n);\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LockNftOperation' as const;\n\n/**\n * Lock a programmable NFT.\n *\n * ```ts\n * await metaplex.nfts().lock({ nftOrSft, authority });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const lockNftOperation = useOperation<LockNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LockNftOperation = Operation<\n  typeof Key,\n  LockNftInput,\n  LockNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LockNftInput = {\n  /**\n   * The NFT or SFT to lock.\n   * We only need its address and token standard.\n   *\n   * Note that locking only works for programmable assets.\n   */\n  nftOrSft: Pick<Sft, 'address' | 'tokenStandard'>;\n\n  /**\n   * An authority allowed to lock the asset.\n   *\n   * This must be a token delegate.\n   *\n   * @see {@link TokenMetadataAuthority}\n   * @defaultValue `metaplex.identity()`\n   */\n  authority: TokenMetadataAuthorityTokenDelegate;\n\n  /**\n   * The authorization rules and data to use for the operation.\n   *\n   * @see {@link TokenMetadataAuthorizationDetails}\n   * @defaultValue Defaults to not using auth rules.\n   */\n  authorizationDetails?: TokenMetadataAuthorizationDetails;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type LockNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const lockNftOperationHandler: OperationHandler<LockNftOperation> = {\n  handle: async (\n    operation: LockNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<LockNftOutput> => {\n    return lockNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type LockNftBuilderParams = Omit<LockNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Lock a programmable NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .lock({ nftOrSft, authority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const lockNftBuilder = (\n  metaplex: Metaplex,\n  params: LockNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { nftOrSft } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  // Auth.\n  const auth = parseTokenMetadataAuthorization(metaplex, {\n    mint: nftOrSft.address,\n    authority: params.authority,\n    authorizationDetails: params.authorizationDetails,\n    programs,\n  });\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: nftOrSft.address,\n    programs,\n  });\n  const edition = metaplex.nfts().pdas().masterEdition({\n    mint: nftOrSft.address,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createLockInstruction(\n          {\n            authority: auth.accounts.authority,\n            tokenOwner: auth.accounts.approver,\n            token: auth.accounts.token as PublicKey,\n            mint: nftOrSft.address,\n            metadata,\n            edition: isNonFungible(nftOrSft) ? edition : undefined,\n            tokenRecord: auth.accounts.delegateRecord,\n            payer: payer.publicKey,\n            systemProgram: systemProgram.address,\n            sysvarInstructions: SYSVAR_INSTRUCTIONS_PUBKEY,\n            splTokenProgram: tokenProgram.address,\n            authorizationRules: auth.accounts.authorizationRules,\n            authorizationRulesProgram: TOKEN_AUTH_RULES_ID,\n          },\n          { lockArgs: { __kind: 'V1', ...auth.data } },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, ...auth.signers],\n        key: params.instructionKey ?? 'lockNft',\n      })\n  );\n};\n"],"names":["TOKEN_AUTH_RULES_ID","PublicKey","Key","lockNftOperation","useOperation","lockNftOperationHandler","handle","operation","metaplex","scope","lockNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","nftOrSft","tokenMetadataProgram","getTokenMetadata","tokenProgram","getToken","systemProgram","getSystem","auth","parseTokenMetadataAuthorization","mint","address","authority","authorizationDetails","metadata","nfts","pdas","edition","masterEdition","TransactionBuilder","make","setFeePayer","add","instruction","createLockInstruction","accounts","tokenOwner","approver","token","isNonFungible","undefined","tokenRecord","delegateRecord","publicKey","sysvarInstructions","SYSVAR_INSTRUCTIONS_PUBKEY","splTokenProgram","authorizationRules","authorizationRulesProgram","lockArgs","__kind","data","signers","key","instructionKey"],"mappings":"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"}